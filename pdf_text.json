{
    "text": "Manning Publications Co  To comment go to  liveBook \nMEAP Edition \nManning Early Access Program \nThe WellGrounded Python Developer \nVersion 8 \nCopyright 202 2 Manning Publications \nFor more information on this and other Manning titles go to \nmanningcom  Manning Publications Co  To comment go to  liveBook welcome \nThank you for purchasing the MEAP for The WellGrounded Python Developer  The goal of this \nbook is to take you past beginning Python programming to the point where you think and \nfeel like a software developer Where the syntax and grammar of Python are not only \ncomfortable for you but become the tools of a craftsman With these tools youll be able to \ntake on bigger and more complex projects \nI first discovered Python when I moved from the world of Windows development to \nthe Linux environment I was an accomplished CC developer but was interested in \nlearning the scripting languages available in Linux Fortunately I came across Python \nbecause of its strong support for Object Oriented Programming which I enjoyed in C \nSince then Ive never looked back and Python has become my primary language \nThere are a lot of beginner Python books Python cookbooks and reference titles and \nmany of them are very good To get the most from this book you should be past the beginner \nlevel and comfortable with Python My hope is this book provides a middle ground that gives \nyou more context about how and why you should take certain paths when developing a \nprogram \nYoull take the loops conditionals and statements you know now and create larger \nconstructs to handle bigger programming challenges Youll learn some conventions and \npatterns that will reduce the cognitive load on you solving smaller syntactic issues and begin \nto think how to solve the big picture problems How the tools you have and will learn \nabout can be combined to take goal from problem to solution \nThe book does this by taking you along on a development journey to build a web \napplication providing a simple blogging platform While I think thats an interesting application \nto build the creation of that application isnt the end goal of the book The journey is far more \nimportant the ideas and implementation of those ideas as code is the real value \nThe chapters progress and build on the previous ones to illustrate why certain choices were \nmade and how those choices can be altered and improved as more is learned later in the \nbook \nAs developers we are at an interesting place in the history of the industry Engineering \nstandards are as important in software development as they are in other disciplines However \nthe pace of change in the software world changes those standards as well and provides an \nopportunity for a great deal of craftsmanship and artistry from a developer Python gives you \na powerful palette of tools to express that \nPlease feel free to share your comments questions and suggestions in Mannings liveBook \nDiscussion Forum for my book \nDoug Farrell Manning Publications Co  To comment go to  liveBook brief contents \nPART 1   GROUNDWORK  \n  1  Becoming a Pythonista \n  2  Your Development  Environment \n  3  Thats a Good Name\n  4  Where Developers and Computers Meet   \n  5  The Object of Conversation \n  6  Exceptional Events\nPART 2   FIELDWORK  \n  7  Sharing With the World   \n  8  Doing it With Style      \n 9  Do I Know You  \n10  Persistence Means Never Having to say Goodbye \n11  Ive Got Something to Say  \n12  Are We There YetManning Publications Co  To comment go to  liveBook  1 \nBecoming a Pythonista  \nThis chapter covers  \nWho is the intended audience\nBeing a developer\nReaching goals\nUsing Python\nThe Version of Python to use\nWelcome to The Well Grounded Python Developer Im happy to have you here for a journey \nI hope takes you to a place where youll become not only a more robust programmer but one \nwho thinks like a developer and expresses those thoughts using Python  \nRight away I want to clarify the use of a few terms programmer developer and \nPythonista You might think pro grammers and developers are interchangeable indeed many \njob descriptions use the words that way Its easy to think that way because the two are \nrelated  \nA programmer is very focused on creating program code using technology in that process \nand implemen ting designs A developer can and often does all of those things as well but \nadditionally thinks about the bigger picture The big picture includes the architecture of more \nextensive applications the design to achieve it and pulling all the disparate parts together to \nimplement it  \nIf youve read material online in the Python community youve probably seen the term \nPythonista This term is an endearing name in the community to refer to ourselves and others \nwho are enthusiastic about Python  \nAlong the  way well create programs and applications that will build upon each other \nintroducing ways to take on larger projects and break them up into smaller more manageable \npieces As a developer thats what youll do Youll be able to take on complex proje cts using \n1Manning Publications Co  To comment go to  liveBook  multiple technologies and see not only what you need to do but how you can create them \nYoull be able to see your way clear to develop the code that brings a project to life  \nRather than start with a complex system breaking it down into smaller  pieces and work \nthrough them in the chapters of this book well take a different approach Well start by \nbuilding a foundation of skills and tools generally useful to developers Well use those tools to \nbuild standalone applications demonstrating those  tools  \nOnce your toolbelt has been expanded youll create a straightforward web application to \nget comfortable with the challenges it presents Then modify that application to incorporate \nnew features Each step will build on this knowledge to introduce one or more new abilities \ntechniques modules and solutions  \nPython can take you to wonderful places You only need to take those first steps With that \nin mind lets get started  \n11 Who is the intended audience  \nOne of the stated goals of this book  is to help you become a Pythonista With that in mind \nwho is the intended reader of this book I think there are a few broad types of readers who \nwill benefit from the material presented here  \nThe first type of reader is someone who knows the basics of P ython programming how to \nwrite loops conditional statements and use variables to get things done This reader has \nwritten  utility programs that exist in a single file and knows how to run them from the command \nline They might want to build more c omplex applications but dont understand how to do so \nThey could be thinking about writing a web server using Python and what technologies theyd \nhave to know to do that Essentially this reader has a basic toolset has hammered things \ntogether and wan ts to build something more significant  \nThe second type is currently a developer in another language who is interested in \nbroadening their skill set to include Python They could be tw because Python is growing in \npopularity in both usage and interest Or  it could be out of necessity for a project at their \ncurrent job They know how to get things done in the language they currently know and want \nto learn how to do similar work with Python in a Pythonic way  \nThe third type could be someone involved with data science and big data research Python \nis becoming one of the key players in this space with many well developed libraries serving \nthe needs of this kind of work This book wont get into the use of those libraries that would \nbe another book onto itself  but it will help readers involved in that space Many who work \nin data science arent necessarily software developers Coding is a means to an end a tool to \nhelp reach a goal Learning to use that tool better with greater ex pressiveness by becoming \na Python developer will take coding out of the problem domain giving more room to focus on \nthe task at hand  \n12 Being a developer  \nBeing a developer is an unusual pursuit Developers spend time creating something out of \nnothing and even then its hard to describe the thing we just created Ever try explaining \nwhat being a developer is at a party Even if youre a good enough storyteller to keep people \nfrom wandering off immediately its still challenging to reach the aha moment w here \n2Manning Publications Co  To comment go to  liveBook  someone might know what youre talking about And its not a failing on the listeners part Its \njust objectively hard to describe what being developer is  \nPutting conversations about Artificial Intelligence aside for the moment computers are \nexcept ionally static devices Programs are a way for humans to express what we want a \ncomputer to do in a language we can read and write and the computer can understand The \ntrick is being exact enough to get the computer to do whats intended rather than some thing \nelse \nPeople can function in the world and achieve great things because we thrive with the \ninexactness of human communication We get meaning from context intention inflection and \nsubtlety  all of the things that provide great richness to our com munication None of that \nexists for a computer They require an almost maddening exactness to function The attention \nto minutiae to express that exactness the patience to do so and the ability to learn and stay \nopen to new ideas  are part and parcel of being a developer  \n121  Solving Problems  \nThere is a great deal of software available in the world retail commercial and industrial \nsoftware spreadsheets databases web applications games and tons of software that almost \nno one would ever know exist ed All of this software exists to solve problems andor provide \nfunctionality And thats great If there is an existing software solution to a problem youre \ntrying to solve absolutely use it and dont re invent the wheel  \nOn the other hand the world i s filled with unique problems and it is generating more all \nthe time These unique problems require custom software solutions And this is the primary \nrole of a developer Whether youre solving a problem for your projects or those of your  \nemployer  the goal of being a developer is to solve problems  \n122  Process  \nDeveloping software involves a great deal of process and has steps that help lead to a \nsuccessful outcome Much like a classic story it has a beginning middle and end  \nOn a personal level it means how you approach a programming problem and break it down \nto produce a software solution Being a developer includes the ability to recognize the \nboundaries of different parts of a problem and to understand how the technologies you know \nor know about  can help decouple things along those boundaries An example of this is \nknowing how to use a database to persist data and how to get data to and from that database \nto the user interface which provides separation between the two  \nIf you work as a develope r in an organization there are defined processes that apply to \nyour work What coding standards if any does the team support What kind of source code \ncontrol model does the organization practice Do you follow an Agile management process or \nsome other m ethodology How is software tested approved and deployed All of these things \nand more make up the Software Development Life Cycle SDLC The process can help and \nhinder your development life but it exists in a team context and in the broader context o f that \nteam in an organization  \nThere is one other process that in my experience is worth mentioning and valuable to your \nsuccess as a developer Unless youre developing entirely on your own youll be working with \nother people The list is of people you may be working with can be pretty long and includes \n3Manning Publications Co  To comment go to  liveBook  designers accountants managers customers both internal and external clients \ncontractors and more Being able to communicate well across disciplines is an invaluable skill \nThe written word  email wikis messaging is a critical conduit of information and deserves \nyour attention Think about how you present yourself personally when talking to people \nconnections and relationships are essential to a working developer Not only will good \ncommun ication skills immeasurably improve the information help and support flowing \nbetween groups but they just makes your life as a developer more enjoyable  \n123  Your Customers  \nEven if youre writing software only for yourself you do have a customer you Al l software \nhas a user or users Even software thats only ever used by another piece of software has a \ncustomer The customer experience you create has a significant impact on the success or \nfailure of the programs you write Its not a revelation that a g reat deal of the success of Apple \nproducts has to do with the customer experience those products provide  \nIf you write a command line program that works and gets the job done and other \ndevelopers can use it that might be good enough However you shouldn t be surprised if a \nuser in customer service dislikes the command line experience If youre creating software for \npublic consumption an Internet web application with a user interface for example bad \ncustomer experiences can make people leave and possi bly never return Studies show patience \nfor bad customer experience is approaching zero  \nIf the service your software provides is crucial to your users which might put them in the \nposition of having to use what youve created this will color their opinio ns and acceptance of \nanything else you might create  \nEven when you are creating a library module intended only for other developers if the \ninterface isnt well thought out and reasonable youre going to hear about it And if those \nusers are sitting next to you in the office youre going to hear about it forever  \nFrom a high level point of view any single problem youre trying to solve with software \nmeans you have two problems One is the actual work youre trying to capture in code The \nother is the interaction or user interface to get that work done  \nIts challenging to put yourself in the place of your customer when designing software \nYoull be well acquainted with how youve created the application in the way you intended \nrather than how a new user will use the application  Its worth thinking about how someone \nelse will use what youve written Its also advantageous to talk with your customers if \npossible to learn what they want and expect and listen to their feedback about what youve \ncreated Adopting an iterative process and mindset about development design and \nimplementation can make a great deal of difference in keeping a customer or losing them  \n124  Commitment to Learning  \nLearning how to get better at technol ogy and developing with Python is a valuable skill \nWorking to improve yourself as a Python developer has two benefits The first being able to \ntake on larger projects with the confidence you can complete them and create a working \nsystem The second is the  practice of learning Being a lifetime learner isnt just a catchy \neducational phrase its the reality of being a software developer  \n4Manning Publications Co  To comment go to  liveBook  For example during my career as a developer Ive worked in several languages Fortran \nPascal CC PHP and now Python and JavaScript Some of those languages I learned \nbecause that was what was in use where I was working In other cases the language was well \nsuited to the task at hand I considered myself a strong CC programmer and enjoyed \nworking on the applic ations I wrote with it However I dont have an interest in dusting off my \nCC skills and doing that kind of coding again Right now for me Python is the sweet spot \nas a language I want to use It appeals to my desire to work in an object oriented pro gramming \nstyle but doesnt limit me to only that Pythons syntax and grammar are clear and expressive \nenough that I can think about solutions in pseudocode that closely resembles Python code that \nwould almost run  \nIf software development is your vocation  or you want it to be keep in mind a career is \nlong and changes happen continuously Committing to learning new technology and languages \nis the answer to both those things In this rapidly changing world there is very little job security  \nthe only real security are the skills you can bring to the table  \n13 Reaching goals  \nThis book has some goals one of which is implied in the title The Well Grounded Python \nDeveloper helping you become a stronger developer If youre reading this book then I think  \nthats a goal you have as well  \n131  Thinking like a developer  \nLearning a programming language means learning the syntax and grammar of that language \nhow to create variables build loops make decisions and execute program statements These \nare your b asic tools but thinking like a developer also means knowing how to put those tools \ntogether to create a useful program The analogy goes much further towards building bigger \nand more powerful tools  \nThis process of seeing how to use smaller tools to build  bigger tools is key to thinking like \na developer The steps of creating one thing from other things eventually help you see the big \npicture As you learn how to construct more powerful blocks of code seeing the big picture as \na developer means understand ing the problem youre trying to solve and mentally being able \nto travel back and forth along with steps you can take to implement a solution From the \nsmallest block of code to more extensive functionality youll be able to follow the path to \nsuccess  \n132  Building Applications  \nIn developer terms an application is a complete program providing useful functionality and a \nuser interface An obvious one Im sure you know already is Microsoft Word a big desktop \napplication Googles Gmail is a big web application  These are both examples of large \napplications that provide many features with a great deal of functionality  \nThere are many smaller applications for example if youre familiar with the command line \navailable on most computer systems you may have used  the ping command This application \nis often used to determine if another computer on a network is responding to a ping  request \n5Manning Publications Co  To comment go to  liveBook  Using ping is a simple troubleshooting test to see if the remote computer is running at all \nbefore digging further into any p roblem that might exist with it  \nThe ping application is pretty much on the other end of the spectrum from applications like \nWord or Gmail but it is a complete application in its own right It provides a useful function \nand has a user interface from the command line in a terminal window  \nThere are other blocks of code that developers work on and these are libraries of code \nThey provide useful functionality and have interfaces but for the most part they are used by \na larger application that want access  to the contained functionality The standard modules that \ncome with Python a feature commonly referred to as batteries included is an excellent \nexample of library code  \nLibraries provide an Application Programmers Interface API which defines how to  use or \ncall the functionality provided by the library The API can be called directly as in the case of \nimporting and using a standard library module in Python They can also be called remotely \nover a network Examples of this would be an application  that makes calls to a database server \nor calling an HTTP API interface like that provided by Twitter  \nYoull be creating library modules to use in the applications well develop as we move \nforward through this book Well also be creating applications t hat provide an HTTP API \ninterface as well as their main functionality  \n14 Using Python  \nFor the most part everything youve read up till now about thinking like a developer could \napply to just about any programming language What makes Python an excellent choice to \npursue thinking like a developer As I mentioned in the section about reaching goals I believe \nPython provides a sweet spot for application development Lets talk about why I think that \nand I hope you come to feel the same way  \nIf youre already on board with Python feel free to jump to section 15 of this chapter \nwhich introduces what version of Python this book will use  \n141  Whitespace The Final Frontier  \nWhen first introduced to Python people often have a strong opinion about the la nguage syntax \nThey either think that its good or its not I find the language syntax to be terse but wonderfully \nexpressive The ability to code functionality almost as fast as you can type minimizes the \ncognitive load  of programming It also allo ws you to continue working towards the big picture \nrather than getting tangled in syntactical requirements  \nBut lets talk about one thing you might have heard about Python in a negative context  \nthe required whitespace In Python a space is required aft er the for keyword and before the \niteration variable Its also required after the if keyword and before the conditional statement \nthat follows This use of whitespace replaces the use of parenthesis in other languages  \nThe start of a block of code is  indicated by the  character at the end of a program \nstatement line Every line after the  thats indented with whitespace is intended to be in that \nblocks scope The next outdented line after the block indicates the block of code has ended \nThe whi tespace used to create the indented lines within the block are significant to the \nlanguage and required  \n6Manning Publications Co  To comment go to  liveBook  The whitespace required as part Pythons syntax causes consternation among developers \nwho use other languages particularly languages that derive some of their syntax and structure \nfrom the C language In those languages the beginning of a block of code is denoted by the \nuse of a  character This is followed by the program lines intended to be in the block and \nthe block is ended or closed by the u se of a  character This is known as curly brace \nnotation Many popular programming languages use curly brace notation like C C Java \nJavaScript TypeScript PHP and more  \nThose languages are also free form because no particular coding style is necessary \nJavaScript takes advantage of this to pack code files by removing all unnecessary whitespace \nto reduce the number of bytes transmitted over a network to a browser Because these \nlanguages are free form theres debate over what is the right way to style code  \n Do curly braces stand alone on their own line or part of another line  \n How many spaces should be used to indent a code block for readability 2 4 8  \n Should space characters be used after a for or an if keyword for readability or  not \n Should the code in a block maintain indentation at all  \nAs a developer you should adopt a consistent coding style to support readability If you \nwork in a team its beneficial for the team to agree on and choose a coding style as well Code \nis read far more than its written and having a consistent style reduces the white noise of \nreading code in different styles than what youve read before  \nCode oriented editors are aware of the syntax of the language youre writing within them \nand will do w hat they can to automate the writing process For example if youre coding in a \nC derived language and type the opening curly brace character  followed by a carriage \nreturn the editor will most likely auto indent for you It will continue to do so fo r all the lines \nof code you write after that until you type the closing curly brace character followed by a \ncarriage return At which point the editor will automatically outdent for you Many editors give \nthe user options to change the style youd lik e to use but whatever you choose the style will \nbe consistent within that editor for that language  \nIts at this point where the argument against Pythons required whitespace gets silly If a \ncoding style is beneficial to developers to read and write pro grams and code editors \nautomatically provide assistance to write with a coding style what was the objection to \nPythons use of whitespace again  \nThe Python community provides guidance and tools to help create consistently styled \nPython code The PEP 8 P ython Enhancement Proposal 8 is a detailed proposal for styling \nPython code That document exists here httpspepspythonorgpep 0008  There is also a \nPython tool called flake8  httpspypiorgprojectflake8  that can point out and fix styling \nissues It can also be configured to better match your own styling choices  \n142  Variables  \nIf you run Python at the command line you get whats called a REPL or Read  Evaluate Print \nLoop which is an interactive Python The REPL is a nice place to try out short snippets of \nPython code  \nIn Python variables are dynamically typed What does this mean A variable is declared \nwith a line like this  \n7Manning Publications Co  To comment go to  liveBook   x  10  \nThe variable x is created and bound to an integer object whose value is 10 The type of \nvariable x is inferred at runtime from the object to which it is bound As an example these \nPython statements  \n x  10  \n typex  \nclass int  \n \nCreate the variable x and bind it to an integer object with a value of 10 The typex  \nfunction call returns the type of the variable x which tells you its an integer  \nBeing dynamically typed also means the type of a variable can be changed at runtim e by \nbinding it to a differently typed object This means program statements like the following are \nperfectly fine  \n x  10  \n printx  \n10 \n x  Python  \n printx  \nPython \nHere the variable  x is created with a type of integer by binding it to an integer object with \na value of 10 Then the printx  statement prints out the value object x is bound to which \nis the integer 10 The type of the x variable is changed to String when it is re bound to a string \nobject with the literal string value of Pyth on Finally the printx  statement prints the value \nof the object bound to x which is the string Python  \nIn statically typed languages like Java the type information integer string float etc is \nbound to the variable itself For example declari ng an integer variable x in Java looks like \nthis \nint x  10  \nThis indicates to the Java compiler the variable x is of type integer and to assign the value \n10 to it This also means no other type than an integer can ever be assigned to the variable \nx For example this  \nx  Java  \nwill generate an error at compile time in Java Developers who use statically typed languages \nsometimes deride Python because its dynamically typed And to a degree  they have a point  \nbinding a variable declaration to the type at compile time does catch a certain class of error \nconditions Its something to be aware of when using Python  \nHowever Ive been writing Python code for a long time and the dynamically typed nature \nof Python variables has rarely caused a problem  and often presents opportunities for \nexpressiveness  \n8Manning Publications Co  To comment go to  liveBook  143  Programming Paradigms  \nMost if not all of the languages in everyday use draw their abilities from other languages and \nprogramming paradigms Python is a member of this club in good standing If youve \nprogrammed at all in Python you know its a flexible language that covers a lot of ground Part \nof the flexibility of the language is the many ways in which you can work with it  \n The ability to code with control flow provided by loops nested loops condit ional \nevaluation and procedure calls makes Python a structured programming language  \n Python is a procedural language in that you can create functions procedures allowing \nyou to create blocks of code that can be re used in other parts of your program  \n You can code using class based Object Oriented Programming OOP which captures \nstate information along with code that operate on that state  \n Python though not strictly a functional language provides features that allow you to \nprogram in a functional way Functions in Python are first class objects and can be \npassed to other functions T his feature is required by functional programming and \nPythons provision of this feature is useful when working in a functional style  \n Event driven programs like a windowing GUI application where events determine the \nprogram control flow are entirely po ssible with Python  \nAny and all of these paradigms can be brought to bear using Python to solve programming \nproblems and create applications  \n144  Creating Maintainable Code  \nWhen you create an application you expect it will be used which means it will have a lifetime \nDuring that lifetime bugs will manifest themselves in your code and testing doesnt always \nreveal every potential problem Even if youre the only user of the application a change in how \nyou use it or the  environment in which you do so c ould well reveal problems you can resolve \nand improve  \nIf other people use your application whats required of it will change Changing \nrequirements mean changes will need to be made to the existing code to add new features  \nNothing in the software develo pment world is more constant or happening faster than \nchange When I said earlier that code is read more than it is written now has meaning because \nwhat you write will change over time If you come back to your code after a surprisingly short \namount of tim e has passed it will amaze you how much you have to read your own work to \nget back into the context in which it was created If you work in a team and someone else in \nthe team will be modifying your work that person will bless or curse you based on how \nmaintainable and readable your code is  \nWriting maintainable code is a developer strength worth pursuing Adopting a coding style \nand consistently using it goes a long way towards this goal Using intelligent and meaningful \nvariable names function names and class names are important Im a firm believer that no \nprogramming language even Python is completely self documenting Comments that clarify \nthe intention of a section of code can go a long way towards understanding the codes purpose \nand intent  \n9Manning Publications Co  To comment go to  liveBook  Another important aspect of writing maintainable code is making it flexible Its difficult to \nanticipate how the functions and classes you create might be used further on in the \ndevelopment of an application  \nA simplistic example would be a function perform ing some complex calculation formatting \nthe results and then printing those formatted results to standard output  The future use of \nthat function is severely limited to how its currently implemented and likely cant be re used \nfor anything else I f explaining what a function does has an and in the explanation it should \nbe implemented as two functions  \nRefactoring this example leads to a function that does the complex calculation and returns \nthe raw results Then the function can be used later i n the application to format and output \nthe results to a destination device By leaving the formatting and output until its needed the \noutput can be directed to any device a display screen a web page a printer or perhaps a \nresponse to an API call The  underlying calculation function remains unchanged  \n145  The Language Community  \nThe most popular programming languages currently in use have large and active communities \nof people who are willing to share their experiences problems and expertise with others \nPython has a particularly welcoming community with a minimum of flame wars or bullying The \ncommunity is a valuable resource for the newcomer to programming as well as old hands who \nare working out new problems  \nVery often when working out Python puzzles  others have worked on similar puzzles before \nand published solutions The Python Package Index  httpspypiorg  is an absolutely \ninvaluable resource when building applications and looking for libraries and modules to h elp \nthat process along  \nBeyond searching Google for Python help heres a short list of some of the available useful \nPython resources  \n httpsrealpythoncom   Real Python is an excellent source of tutorials about Python  \n httpspythonbytesfm   a Python podcast delivering interesting headlines and banter  \n httpstalkpythonfm   The Talk Python To Me podcast has interv iews with people and \npersonalities in the community  \n httpspythonpodcastcom   Podcastinit is another good interview podcast  \n httpstestandcodecom   Test and  Code a podcast about software testing and Python  \n httpswwwpythonweeklycom   the sign up page for a weekly Python newsletter \ncontaining links to useful articles and information  \n httpspycoderscom   The sign up page for another great Python newsletter  \n146  The Developer Tooling  \nAs a developer one of your goals is to get your thoughts and ideas from your mind and into a \nPython code file with as few impediments as possible A good keyboard that works for you \nproper lighting a decent screen all of these things contribute to the flow of the work youre \ntrying to do A powerful editing tool is also essential There are many good editors out there \nthat recognize Python code and syntax highlight it as you write making it easier to find errors \nand keywords  \n10Manning Publications Co  To comment go to  liveBook  Notice that I said editing tool above this was intentional A good editor is essential but \nbeyond that a good IDE is even more so An IDE o r Integrated Development Environment is \na big step up from an editor when productively writing code Not only will it have a good editor \nwith syntax highlighting but it will have knowledge of the language itself This gives you \nadditional assistance when  writing code which is commonly called  IntelliSense Intellisense \nprovides code completion aide interactively refactoring of existing code symbolic name \ninformation and usage and much more  \nOne last thing a good IDE should provide is a debugger A deb ugger allows you to run a \nprogram interactively and set breakpoints A breakpoint is a marker you can set on a program \nline where the code will stop running when it attempts to execute that line While the program \nis paused you can examine the variables t hat are within the current scope and see what the \nprogram is doing at that point You can even modify the value of a variable which will affect \nthe execution from that point forward You can single step through the code from the \nbreakpoint following the b ehavior of the program on a line by line basis Youll be able to step \ninto a function call and follow the behavior within it  \nBeing able to debug a program is an invaluable tool and skill to have at your disposal It \ngoes far beyond inserting print  statements in your code to try and glean whats happening \ninside Python has standalone debugging tools as well as mature and powerful IDEs available \nto it  \n Visual Studio Code by Microsoft is an advanced source code editor that has extensions \nmaking it a com plete IDE for Python With the Microsoft extension for Python installed \nits not only an excellent editing environment with syntax highlighting and IntelliSense \nbut its also a very powerful debugger Its available across Windows Mac and Linux \nplatfor ms which is a win if you work on multiple different computers Its also free to \ndownload and use  \n PyCharm is one of the suites of development tools provided by JetBrains and is a \ncommercial Python IDE It also has syntax highlighting IntelliSense and a  powerful \ndebugger as well as tools to integrate with databases and source code control systems \nIts a powerful tool for the development of Python code and applications and runs on \nWindows Mac and Linux  \n WingIDE is yet another powerful commercial Pyth on IDE with syntax highlighting \nIntelliSense and has an advanced debugger with features useful in data science work \nThis platform is also available for Windows Mac and Linux  \n147  Performance  \nThe runtime performance of any programming language is an often debated highly charged \nand complex topic Python is often compared to other languages like C or Java regarding \nexecution performance Beyond blanket statements about this or that being faster its here \nthose comparisons get more complicated  \nWhats be ing compared CPU speed or memory speed How is it being measured Is the \nbenchmark software optimized for one language but not the other Does the benchmark make \nthe most of efficient coding practices in both languages being compared  \n11Manning Publications Co  To comment go to  liveBook  At the risk of sou nding flippant I dont care very much about any of this Its not that I \ndont care about performance well get to that but the argument about this language being \nfaster than that language is not worth engaging in  \nComputers are well past the point in time where CPU cycles and memory access times are \nworth considering very much in any performance calculation To steal a business idiom  \nOPTIMIZE YOUR MOST EXPENSIVE RESOURCE  \nYou are the most expensive resource  And if you work for a company as a software developer \nyou are the most expensive resource connected to their computer resources Optimizing your \nperformance as a developer is paramount and if you can transpose the big picture in your \nmind directly into pseudocode that very nearly runs you have be come invaluable This is where \nPython shines to borrow part of an old joke Python is executable pseudocode If you can \nexpress an idea into code and get it up and running faster and improve time to market that \nis a huge win  \nAll of this is not to say  I dont care about performance When I first got into programming \nI was obsessed with speed and would go to great lengths to shave CPU cycles from my code \nAlong the way I learned a lot about whats important and whats not  \nThe firs t thing you should do  before beginning any optimization effort is to determine if its \nnecessary at all Is there a speed requirement your application needs to meet If so does a \nmetric exist to measure your application defining when it is fast enough If the answer to these \nquestions determines that your application is already fast enough then you have struck upon \nthe ultimate in terms of time spent optimizing zero  \nOn the other hand if its determined your application does need to be faster then you need \nto take the seco nd step This second step is to profile the application to measure where it is \nspending time Python comes with a good profiler and the IDEs I mentioned above help you \nuse it  \nWith this measurement in hand you can apply the 9010 rule of code optimization The \nrule states that 90 of an applications execution time is spent in 10 of the code This rule \nis a generalization to be sure but it does provide a roadmap where you should pursue \noptimization Spending time in anything other than the 1 0 of code where the application \nspends its time is time poorly spent that wont improve the overall speed of your application  \nAny optimization work needs to be done iteratively and in tandem with profiling This tells \nyou if your optimization efforts ar e making improvements or not It will also help you decide if \nthe improvements youve made are incremental or orders of magnitude better Small gains in \nperformance need to be balanced against the complexity of the code Optimization efforts often \nlead to more complex implementations making code maintenance and feature improvement \nharder Incremental optimizations that bring more complexity should be looked at carefully \nConsider taking a broader view of the problem and think about changing the algorithm or  data \nstructure instead These kinds of changes can lead to more significant gains in performance  \nLastly know when to quit With a target of what performance metric your application has \nto meet youll know when to stop optimizing and ship Shipping is a  feature that cant be \noverstated  \n12Manning Publications Co  To comment go to  liveBook  15 Python Version to Use  \nThe code in this book is based on Python version 3103 If you are relatively new to Python \nyou might know there are two major versions of Python versions in existence 2 and 3 \nThe 3 version has been around for a long time since December of 2008  It took a while for \nthis version to gain traction with users because libraries and frameworks those users depended \non werent compatible with this version so they stayed with the 2 version The time when \nthat was true is well behind us and there is no legitimate reason to start new Python projects \nin anything other than the 3 version  \nFrom this point in time forward the Python 3 version will have newer features the latest \nsyntax and more developer support It also means important libraries and fr ameworks are \ndropping support for the 2 version This implies developing programs with Python 2 will \nhave to pin the use of those libraries and frameworks to older versions that will no longer get \nnew features or bug fixes This last item is particular ly important in relation to security \nconcerns  \nIn addition the Python 2 version reached EOL End Of Life on January 1 2020  This \nmeans the core Python development team has stopped supporting that branch completely \nThis clean break by the core d evelopers frees them from some compromises made to continue \nsupporting 2  \nLastly and I think this is very important the Python community at large has moved to the \n3 version This means documentation articles books questions and answers on forums  will \nleave the old version behind and focus more on the new versions As a developer this is an \nimportant issue First because everything you need to know as a developer is too big to have \nin mind all at once This makes finding relevant information o f paramount importance And \nsecond the pace of change is ongoing and rapid which makes trying to know it all an exercise \nin futility Its much more useful as a developer to understand what you need and want to do \nand then be able to find how to do it H ands down this beats being a catalog of facts that \nbecome outdated almost as fast as you learn them  \n16 Summary  \nThis chapter has introduced you to information about Python  \n Why youd want to use it on your journey to become a developer  \n Why Python is an excel lent choice of programming language to learn and work in as a \ndeveloper  \nI realize you might be feeling overwhelmed by the scope of becoming a developer In some \nways youre looking up at the night sky and trying to take it all in Trust me Ive been ther e  \nMy wish is that starting to read this book gives you a small telescope to view that endless \nsky narrow your field of view and show you more details about where were going I hope this \nwhets your appetite to take the next step in your development jour ney \n  \n13Manning Publications Co  To comment go to  liveBook  2 \nYour Development Environment  \nThis chapter covers  \nBuilding a development environment\nPython virtual environments\nSetting up Visual Studio Code\nAs a Python developer you need an environment on your PC in which to work This developer \nenvironment cove rs a lot of ground In general it includes a set of tools youre familiar with \nand some ideas about how you will structure project directories Depending on your computer \nit might also include environment variables youve set to help make things more auto matic \nand useful  \nYoull find what youre about to create and configure is a good starting point on the way to \nbuilding your own useful and powerful development environment For those of you who already \nhave a development environment youre comfortable wit h feel free to skim or move to the \nnext chapter  However be aware of any differences presented here youll need to account for \nthem in your environment  \n21 Installing Python  \nFirst youre going to need Python installed on your computer This might seem obvious but \nits a little more involved than it might first appear Not all operating systems come with Python \ninstalled and sometimes when Python is installed its older than  currently available versions \nEven if the version of Python installed on your computer is recent its still a good idea to install \nPython for your use while developing  \nIf Python is installed along with the operating system theres a good chance its b eing used \nfor system level functions by the operating system If thats the case theres a good chance \nyour operating system is dependent on the version of Python it came with and any modules \nthat were installed for that version to use  \n14Manning Publications Co  To comment go to  liveBook  The programming e xamples in this book will ask you to install additional third party \nlibraries using the Python package management tool pip Its a bad idea to install these \nadditional libraries in your system Python This is because a newly installed version of a library \nmight change the functionality of an existing system requirement and break it  \nYou also dont want updates to the operating system to change the Python functionality \nyou depend on for your development efforts  \nWith that in mind youll install version 310 3 of Python that will be distinct from any \noperating system installed version The newly installed version of Python is entirely under your \ncontrol and independent of the operating system This means you can add remove and update \nlibrary modules as you see fit and only your program code will be affected  \nYoull need to install the stable 3103 version of Python so youll have the same Python \nversion the example programs in this book were coded and tested against to minimize runtime \nproblems  \n211  Windows  \nDepending on when youre reading this book Python may or may not be installed by default \non Windows The Windows operating system isnt known to use Python so once Python is \ninstalled its available solely for your development work  \nRecent Windows version s make Python available in the Microsoft Store making installation \nvery easy The Microsoft Store version of Python at the time of this writing is being evaluated \nand not all features are guaranteed to be stable This doesnt mean you shouldnt use it j ust \nthat you should be aware of these issues  \nIf you prefer use the stable 3103 version of Python available for your version of Windows \nby navigating to httpwwwpythonorg  in your browser and following the Do wnloads links \nFor most users the right version to use is the executable installer suitable for your CPU and \nOS version  \nDuring the installation process the installer allows you to check a box that adds Python to \nyour PATH environment variable Check this  box and save yourself some trouble later If you \nmiss this and Python doesnt run from within PowerShell at the command prompt you can \nalways re run the installer and add Python to the path  \n212  Mac  \nOn the Mac there is currently an older version of Python i nstalled which you should avoid using \nfor your development Instead install the 3103 version of Python thats completely separate \nfrom the system To perform this installation use the pyenv  utility program This program lets \nyou install as many version s of Python as youd like and switch between them For the purposes \nof the examples in this book install Python version 3103  \nYoull need to have the Homebrew program  installed on your Mac to follow the next steps \nHomebrew is a package manager fo r Mac OS you can use to install many useful command line \ntools like pyenv  The Homebrew program and its installation instructions are available here \nhttpsbrewsh  After installing the brew program open your terminal pr ogram and follow \nthese command line steps to install pyenv  \n  \n15Manning Publications Co  To comment go to  liveBook  1 Run the command  brew install pyenv  \n2 Run command to add pyenv support to your  configuration file zshrc for me could be \nbashprofile for you  \na echo e if command v pyenv 1devnull 21 then n  eval pyenv \ninit nfi  zshrc  \n3 Run the command   exec SHELL  \n4 Run the command  pyenv install 3103  \n5 Run the command  pyenv versions  \nLine 1 installs the pyenv  utility program on your Mac  \nLine 2 adds useful setup information to your terminal configuration file to make using pyenv  \neasier  \nLine 3 re runs your shell initialization scripts making the commands in line 2 active  \nLine 4 installs Python version 3103 onto your Mac in your home folder in the pyenv folder  \nLine 5 shows the versions of Python installed and if this is the first time using pyenv  this \nwill show the system version and the 3103 version you just installed  \nIf you have a recent Mac with an M1 CPU be aware the above steps might be somewhat different for you  \n213  Linux  \nThere are so many versions of Linux in general use and it would be awkward and outside the \nscope of this book to present pyenv  installation instructions for all those versions However if \nyoure using Linu x as your development platform youre probably already familiar with how to \nfind what you need to install applications like pyenv  on the Linux system youre using  \nEven on Linux systems that have Python 3 installed its better to install and explicitly \ncontrol the version of Python youre going to use for development Once pyenv  is installed use \nit to install Python version 3103 with the following command lines  \n pyenv install 3103  \n pyenv versions  \nThe first command installed the version of Python y oure going to use for the examples in \nthis book in a directory controlled by pyenv That version is kept separate from any other \nPython versions installed with pyenv and the system version of Python The second will list \nthe versions installed which sho uld show the version you just installed  \n22 Python Virtual Environment  \nNow that you have Python 3103  installed on your computer completely separate from any \nsystem installed Python you might think youre ready to go Even with a version of Python \ninstalle d using the pyenv  utility youll want to use another level of decoupling from that version \nin your projects  \nPython 3103 provides the built in ability to create virtual environments Python virtual \nenvironments are not virtual machines you might be fami liar with like VMWare Parallels or \nVirtualBox These tools allow an entire OS to run as a guest inside a different OS A Python \n16Manning Publications Co  To comment go to  liveBook  virtual environment only creates a Python installation inside your project directory  This Python \ninstallation can have mod ules added to it with the pip command and these modules are only \ninstalled and available from the project specific Python  \nThis is useful so you can have many projects that use the same version of Python installed \nby pyenv  but each Python virtual enviro nment is separate from the other This means you can \nhave different versions of modules installed by the pip command without conflict in each virtual \nenvironment  \nThe pip command line tool that comes with Python is a fantastic utility It is the package \ninstaller for Python that allows you to add additional modules from the Python Package Index \nhttpspypiorg  The modules available from the Python Package Index provides \nfunctionality above and beyond what comes with th e Python standard library The code \nexamples in this book uses quite a few modules from that resource  \n221  Windows  \nIn a Windows system you installed Python directly rather than using pyenv  which works fine \nas Windows doesnt use Python as part of its operatio n Youll still want to use a project specific \nPython virtual environment to keep your system level Python installation separated from any \nmodules youre going to install with pip  \nTo run the Python virtual environment activation and deactivation scripts youll need to \nchange the Execution Policy of your computer To do that youll need to run the PowerShell \nprogram as an administrator To do this follow these steps  \n6 Click on the Windows Start icon  \n7 Scroll down to the PowerShell menu selection and drop down the sub menu  \n8 Rightclick on the PowerShell sub menu item  \n9 From that context menu select Run as Administrator  \na Once youre in PowerShell running as administrator run this command  \nb SetExecutionPolicy Unrestricted  \nThe system will prompt you with a questi on which you answer with y and then hit the \nreturn key At this point exit PowerShell so youre no longer in Administrator mode You only \nneed to do this once as its a system wide setting  \nOpen the PowerShell program again not as an administrator to  get to a command line \nprompt and follow these steps to create a new Python virtual environment specific to the \nproject directory  \n10 Run the command mkdir project directory name  \n11 Run the command cd project directory name  \n12 Run the command python m venv ve nv \n13 Run the command  venvScriptsactivate  \n14 Run the command  python m pip install upgrade pip  \nLine 1 creates a new project directory with whatever name you want to give it  \nLine 2 changes your current working context into the newly created directory  \nLine 3 uses the pyenv  installed Python to create the Python virtual environment This might \ntake a few moments to complete  \n17Manning Publications Co  To comment go to  liveBook  Line 4 activates the virtual environment prepending  the command prompt with venv  \nindicating the environment is active Once the environment is active any additional libraries \ninstalled will be installed in the venv  directory and wont affect the Python version you \npreviously installed To deactivate the virtual environment just enter deactivate  at the \ncommand prompt  \nLine 5 is optional and upgrades the version of the pip command that exists within the \nPython virtual environment youve just set up If pip detects you are running an older version \nit will print out a message informing you that youre running an older version and you should \nupdate that version You can ignore the information and skip line 5 if you like I included it \nbecause I ran the command to stop seeing that message  \n222  Mac and Linux  \nSetting up a Python virtual environment on the Mac is straightforward if youve installed the \nPython 3103 version using pyenv  as described previously Open your terminal program and \nfollow these steps to create a new Python virtual environment specific t o the project directory  \n15 Run the command mkdir project directory name  \n16 Run the command cd project directory name  \n17 Run the command pyenv local 3103  \n18 Run the command python m venv venv  \n19 Run the command source venvbinactivate  \n20 Run the command  pip install upgrade pip optional  \nLine 1 creates a new project directory with whatever name you want to give it  \nLine 2 changes your current working context into the newly created directory  \nLine 3 creates the local file python version which pyenv us es to control what version of \nPython to run when youre working in this directory in this case the 3103 version  \nLine 4 uses the local Python version to create the Python virtual environment in the venv  \ndirectory  \nLine 5 activates the virtual environm ent prepending the command prompt with venv  \nindicating the environment is active Once the environment is active any additional libraries \ninstalled will be installed in the venv  directory and wont affect the pyenv  Python version \npreviously installe d To deactivate the virtual environment enter deactivate  at the command \nprompt  \nLine 6 is optional and upgrades the version of the pip command that exists within the \nPython virtual environment youve set up previously If pip detects you are running an o lder \nversion it will print out a message informing you that youre running an older version and \nyou should update that version You can ignore the information and skip line 6 if you like I \nincluded it because I ran the command it to stop seeing that mes sage  \n23 Setting up Visual Studio Code  \nIts possible to write Python code using just a text editor application Within the context of \nwriting Python program code a text editor is precisely that  an editor that adds no more or \n18Manning Publications Co  To comment go to  liveBook  less than what you type at the  keyboard The notepad application on Windows and the Textedit \napplication on Mac are both examples of simple capable text editors  \nMicrosoft Word while a powerful editor is not a good choice to create plain text as its \ndefault is to save what you type  with a great deal of additional information about formatting \nfont choices etc that has nothing to do with program code Any word processor application \nmakes writing plain Python code more complicated than using a text editor  \nPython programs are just plain text files having the py file extension Many text editors \nunderstand that a file with the py extension is a Python file These editors will provide \nwhitespace indenting automatically when you hit the enter key at the end of a line of code that  \nincludes the block indicator character   They will also syntax highlight your code which \nmeans changing the color of the text to highlight Python keywords strings variables and \nother visual cues about the program youre creating  \nMicrosoft provides  a free code editor called Visual Studio Code VSCode for short and it \nis a great choice to use as a Python program editor Besides being an excellent editor it has \nmany extensions available to make it an even better system to work with when developing \nPython applications Youll install one of those extensions for Python that turns Visual Studio \nCode into a complete Integrated Development Environment IDE This extension provides \nPython syntax highlighting and other language specific features The most  powerful feature is \nthe ability to run and debug your code interactively from within the editor  \n231  Installing Visual Studio Code  \nAt the time of this books publication you can download Visual Studio Code by navigating to \nthis URL httpscodevisualstudiocom  This link takes you to the Microsoft web page that has \nlinks to download VSCode for Windows Mac and Linux  Visual Studio Code is a separate \napplication from Visual Studio which is Microsofts much  larger and commercial application \ndevelopment system  \nFor Windows and Mac installation the process is relatively simple click on the link to \ndownload the installation program then double click on the downloaded file to install the \napplication For Linu x installations click on the link and depending on your Linux version \nchoose the package manager that will run the installation process  \nAfter installation add the VSCode application icon to the Windows taskbar Mac dock or \nthe Linux desktopapplicatio n menu to make it more readily accessible  \n232  Installing Python Extension  \nOnce VSCode is installed youll need to add the Python extension from Microsoft This \nextension is what provides the syntax highlighting IntelliSense debugging capabilities and \nmany  other features To do this follow these steps  \n1 Open the VSCode application  \n2 Within VSCode open the Extensions  \na Click on the extensions icon  \nb Select View  Extensions  \n19Manning Publications Co  To comment go to  liveBook  3 In the Search Extensions in Marketplace labeled text box enter python  and hit the \nreturn key  \n4 The first item in the returned list will be the Python extension from Microsoft  \n5 On that first item click the install button  \nCreate a new Python code file with the py file extension and enter some Python code \nDoes VSCode syn tax highlight the code Are you able to save and run the code from within \nVSCode  \nAt this point VSCode is configured to work with Python files Take some time and read the \ndocumentation about the Python extension in the right hand windowpane of the appli cation  \n233  Other Useful Extensions  \nBesides the Python extension provided by Microsoft there are other useful extensions \navailable  \nPYTHON DOCSTRING GENERATOR  \nThis extension automatically generates Python docstring comments when you enter triple \nquotes   immediately after a function or method definition and hit the enter key The \ndocstring is a template containing all the parameters and return value in an easy to navigate \nmanner making documenting your code much easier  \nCODE RUNNER  \nThe extension makes it  easier to run Python code files from a right click context menus within \nVSCode  \nDOTENV \nThis extension adds syntax highlighting for env files which are local environment files useful \nto initialize environment variables outside of code files  \nBETTER JINJA \nThis extension adds syntax highlighting to the Jinja templating language which is the default \nfor Flask web applications  \nAREPL  FOR PYTHON  \nThis extension provides a window alongside the editing window that will evaluate the code \nyoure writing as you wri te it This can sometimes be useful  \n234  Starting From the Command Line  \nVSCode  is a powerful GUI application which can be started by double clicking on its icon from \nyour computer or by clicking on its nameicon from a visual menu This is a common use case \nfor visual tools on the desktop but isnt the most helpful way to start the  application for your \npurposes Because all of this books example code will use a Python virtual environment its \nuseful to create a virtual environment before starting VSCode Its also helpful to be able to \nstart VSCode from the command line from withi n the project directory containing the virtual \nenvironment Starting VSCode this way will help it see and use the virtual environment in the \n20Manning Publications Co  To comment go to  liveBook  directory To configure VSCode to start from the command line in the directory youre in do \nthe following  \n1 Windo ws \na After installing VSCode the system is already configured to open the current \ndirectory by typing  code   from a PowerShell command prompt  \n2 Mac \na Start VSCode  \nb Navigate to the Command Palette View  Command Palette  \nc Enter shell command to find the S hell Command Install code command in \nPATH command  \nd Click on the above  \n3 Linux  \na After installing VSCode the system is already configured to open the current \ndirectory by typing  code   from a terminal  \n235  Starting a Project  \nWith VSCode installed and configur ed to start from the command line you can go through the \nsteps of creating a project directory and starting VSCode to use it Starting VSCode this way \nis used for all the example projects in this book and in general is an excellent way to create \nproject s of your own Follow these steps to create a new project  \n1 Open a terminal or PowerShell and get to a command prompt  \n2 Change your directory to where youd like to create your project  \n3 In that directory create a new directory  mkdir project name  \n4 Change you r directory to the newly created project name directory  \n5 For Mac and Linux enter this command pyenv local 3103  \n6 Enter this command python m venv venv  \nAt this point the project is set up to use the Python version 3103 virtual environment \ninstalled i n the venv directory The name venv is commonly used as the directory name for \na locally installed virtual environment  \nYou can activate your local Python environment and see its working by following these \nsteps  \n1 Activate your Python virtual environment  \na Mac and Linux enter this command source venvbinactivate  \nb Windows enter this command venvScriptsactivate  \n2 Your command prompt will be prepended with venv  \n3 Enter this command python version  \n4 The system will respond with Python 3103  \nNow that your Python virtual environment is created in your project directory VSCode will \ndiscover this when you start it from the command line Entering code  from the command \n21Manning Publications Co  To comment go to  liveBook  line will open VSCode in the project directory Since you created a Python virtual environment \nin the directory VSCode will be aware of this and prompt you if you want to use that \nenvironment to which you should respond yes Follow these steps to continue configuring \nVSCode to work with any Python code you create within your pr oject  \n1 Open the Command Palette View  Command Palette  \n2 Type Select Interpreter in the text box and click Python Select Interpreter  \n3 In the popup menu that appears select the virtual environment you created  \na Windows  venv Scripts pythonexe  \nb Mac and  Linux  venvbinpython  \n4 Create a new file File  New File  \n5 In the file editor window thats created and enter the following code  \n printhello world  \n6 Save the file as a Python file File  Save  testpy  \na VSCode will pop up a prompt informing you  Linter pylint is not installed Click \nthe Install button VSCode will use the pip command from your virtual \nenvironment to install PyLinter A linter is a pre runtime tool that checks your \ncode for syntax errors bugs unusual constructs and more a nd is a useful tool \nto have installed for every project  \n7 Rightclick on the testpy editor window and select Run Python File in Terminal  \nAfter the last step you should see hello world printed in a terminal window opened within \nVSCode Congratulation s youve just run your first Python program within your powerful \nproject environment  \n24 Some Advice  \nTheres one more thing to emphasize as the most useful tool available to you yourself Invest \ntime to optimize how you work as a developer Having a suitable development environment \nyoure familiar with is powerful but setting up a productive personal wor king environment is \ntime well spent If youre going to develop software for yourself professionally or both youre \ngoing to spend a considerable amount of time doing so A reasonable desk a comfortable \nchair a good monitor and a suitable keyboard ar e all part of that environment  \nThis last piece of advice is my opinion based on years of working as a developer both \nsingly and in teams  It may not apply to you so please disregard it if it doesnt Spend time \nmaking the interface between you and yo ur code as fast and seamless as possible  Learn to \ntouch type  and make use of keyboard shortcuts in lieu of using the mouse  My mom made me \ntake typing classes in junior high back in the days of the IBM Selectric typewriter I can tell \nyou I was none too h appy about it and didnt appreciate it for many years Now it is one of the \nmany gifts she gave me I am thankful for every day  \nThere are many things youll write as a developer besides code documents wiki pages \nweb pages presentations notes emails  the list is long and only getting longer Being able \n22Manning Publications Co  To comment go to  liveBook  to get your thoughts through your fingers and onto the screen quickly and accurately gets the \nmechanics out of the way and lets your thoughts and ideas flow  \n25 Summary  \nIn this chapter youve accomplish ed quite a lot  \n Youve got Python installed in a way that wont interfere with any system python on \nyour computer  \n Youve learned how to create Python virtual environments and installed and configured \na powerful editor for creating and running Python code  \nKnowing how to do these things will help you now and in the future to configure a development \nenvironment on a computer and start developing  \nIn subsequent chapters youll use this development environment to build and run example \nprograms to begin the p rocess of learning new skills how and where to apply them and \nultimately use what youve learned to create more complex and professional applications  \nThis chapter has given you a better telescope to view the development night sky and \nrevealed more detai l about what youve seen before Its also revealed more things to see It \nmight still feel overwhelming but this book and whats to come will keep adding detail and \nbring the field of view in to a manageable level  \n  \n23Manning Publications Co  To comment go to  liveBook  3 \nThats a Good Name  \nThis chapter c overs  \nNames\nNaming Conventions\nNamespaces\nThe names we give things and concepts help us navigate the world and communicate with \neveryone else who shares it with us The idea that names matter is even more important in \nthe world of software development Pro gramming languages have keywords grammar and \nsyntax that is generally a subset of a common in use language In the case of Python that \nlanguage is English  \nFor programming languages this means we have keywords grammar and syntax to create \nprograms  that will eventually run Naming things in those programs however is entirely within \nyour control You can use anything from the rich set of English words and phrases to name the \nthings you create in a program You can even use strings of nonsense characters if that suits \nyou But should you  \nThere are only two hard things in Computer Science cache invalidation and naming things  \nThe quote is attributed to Phil Karlton a programmer with Netscape the developers of the \nfirst widely used web browser Putting aside cache invalidation you might be thinking whats \nso hard about naming things Lets find out  \n31 Names  \nBack when I first started out writing code I worked on a system based on Pascal It was the \nfirst language I worked on allowi ng almost unlimited choice when it came to naming variables \nin the programs One of the other young guys on the team created two global variables he \nused to test for True and False He named them cool and uncool At the time we both \n24Manning Publications Co  To comment go to  liveBook  thought this was p retty funny and made for some laughs when writing conditional statements \nand testing function return values  \nOver time those variable names were all over the code losing their humorous quality and \njust became more challenging to think about and maintain  What was the meaning of cool \nand uncool If you didnt know the actual value behind the symbol was the meaning distinct \nor could it be more of the English use of the words which in many ways implied a range of \nmeaning  \nGiving a name to something is  a way for you and Python to identify it Usually this means \nyou want to identify something uniquely so its distinct from all the other named things in a \nprogram For example Social Security numbers in the United States are given to people so \nthey can uniquely identify themselves within usage context in the country This unique string \nof numbers helps people get employment do their taxes get insurance all kinds of activities \nthat require a nationally unique identifier  \nDoes this mean a Social Securit y number is a good name for a unique thing Not really \nUnless you have access to the systems that use the number its entirely opaque It conveys \nno information about the thing its identifying  \nLets take this idea of unique names to anothe r level There are identifiers called Universally \nUnique Identifier UUID and Globally Unique Identifiers GUID  GUIDs are a variation of \nUUIDs used mostly in the Microsoft world If youve ever installed Microsoft Windows youre \nfamiliar with the in stallation key which is a GUID Both are mechanisms to generate a \nsequence of characters that for all practical purposes are unique across the entire world A \nsample UUID looks like this  \nf566d4a9 6c93 4ee6 b3b3 3a1ffa95d2ae  \nIf you ensure the leading character isnt a number and you convert the dash   characters \nto underbars  this would be a valid Python variable name You could generate UUID values \nand use them as variable names to uniquely identify everything in your programs These \nvariable names would be unique within your entire application and across the known world \nNaming variables this way would also be a completely unusable naming convention The UUID \nconveys absolutely no information about the thing it identif ies thats part of its purpose They \nare often used to identify something and keep any other information about the identified thing \nopaque like any sequencing information or hints about the set of information containing the \nUUID Theyre also very long t o type impossible to remember and unwieldy to use  \n311  Naming Things  \nNaming things is not only about uniqueness but also about attaching information to named \nthings Trying to provide the name you assign meaning or an indication of how the thing is \nused  adds meta information thats very useful when developing Python programs For \nexample naming a variable t versus total  Youd have to examine the context of the \nsurrounding code to know what t is whereas total  has meaning in English that gives \nunders tanding how a variable named this way is used  \n25Manning Publications Co  To comment go to  liveBook  Based on the UUID example above the length of the name you give to something is also \nrelevant to the effort of writing code Programming does involve a lot of typing which means \nthe balance between meanin g and brevity matters  \nYoure suddenly in a position where an entire language is your hunting ground for words \nand phrases to name things Your goal is to find words that attach meta information and yet \nare short enough to not get in the way of writing or reading a line of program code This \nconstrains what you could or should do when naming things Like a painter working from a \nlimited palette of colors you can choose to be frustrated or get imaginative within that \nconstraint and build somet hing with artfulness and creativity  \nMany of the programs youll write will include looping over a collection of things  counting \nthings and adding things together Heres an example of code iterating through a 2 \ndimensional table  \ntable  12 11  4 3 22 105 0 47 31  \nfor i row in enumeratetable  \n    for j item in enumeraterow  \n            processitemi j item  \nThis code is perfectly functional The table  variable consists of a Python list of lists which \nrepresents a 2 dimension al table The processitem  function needs to know the row and \ncolumn position of the item within the table to correctly process it The variables i and j are \nentirely serviceable but give the reader no information about their intent  \nYou might be incline d to think its not a big deal for this example code but imagine if there \nwere many more lines of code between each invocation of the for loop In that case the \ndeclaration of the i and j variables are visually separated from their use The reader would \nprobably have to go back and find the declaration to understand the intent of the variable \nKeep in mind the reader might well be you six months after writing this code when the meaning \nand intent is not so fresh in your mind Heres a better implementation of the above code  \ntable  12 11 4 3 22 105 0 47 31  \nfor rowindex row in enumeratetable  \n    for columnindex item in enumeraterow  \n        processitemrowindex columnindex item  \nThe code has changed so i is now rowindex  and j is now columnindex  The variable \nnames indicate what they contain and the meaning of their intended use If the variable \ndeclarations in the for loops are separated from their use by many lines of code the reader \ncould still quickly deduce what the var iables mean and how to use them  \nAnother common operation in development is counting things and creating totals Here are \nsome simple examples  \ntotalemployees  lenemployees  \ntotalparttimeemployees  len \n    employee for employee in employees if empl oyeeparttime  \n \ntotalmanagers  sum  \n    employee for employee in employees if employeemanager  \n \n26Manning Publications Co  To comment go to  liveBook  You can see a couple of pretty good naming conventions in the above example The name \nemployees  give the variable meaning The use of the plural employees  indicates its an iterable \ncollection It also shows the collection has one or more things inside it that would represent \nan employee  \nThe variable employee  inside the list comprehension indicates it is a single item from within \nthe employees  collection  \nThe variables totalemployees  totalparttimeemployees  and totalmanagers  \nindicate what they refer to by the use of total as part of their names Each of them is a total \ncount of something The second part of each variable name indicates the thing being count  \nBesides numerical calculations youll often deal with things that have names already like \npeople within a company community or group When youre gathering user input or searching \nfor someone by name having a useful variable name ma kes it much easier to think about the \nthing youre representing in code  \nfullname  John George Smith  \nDepending on the purpose of the code youre writing this might be a perfectly acceptable \nvariable name to represent a person by name Often when working with peoples names youll \nneed more granularity and will want to represent a persons name in parts  \nfirstname  John  \nmiddlename  George  \nlastname  Smith  \nThe variable names above also work well and like fullname  give the variable nam es \nmeaning about what they represent Heres another variation  \nfname  John  \nmname  George  \nlname  Smith  \nThis version adopts a convention for how the variables are named A convention like this \nmeans youre choosing a pattern to create the variable names of people Using a convention \nmeans the reader has to know and understand the convention in use The trade off in the \nexample above is less typing but still clear variable name meaning It also might be more \nvisually appealing to you as the variable  names line up vertically in a monospaced editing font  \nAdopting conventions is one technique to be more creative and productive within the \nconstraints of variable naming If the above shorthand naming convention is more visually \nappealing to you  this lends itself to recognizing patterns and identifying typos when visually \nparsing code  \n312  Naming Experiment  \nYou may not remember but in the early days of personal computers they had tiny hard drives \nEarly operating systems also had no concept of direct ories or sub directories all the files on \nthe hard drive existed in one global directory Additionally file names were limited to eight \ncharacters plus a three character extension which was generally used to indicate what the \nfile contained Because of  this bizarre and complex file naming conventions were invented to \n27Manning Publications Co  To comment go to  liveBook  maintain uniqueness and prevent file name collisions These naming conventions came at the \ncost of logically meaningful filenames  \nThe solution to this problem was adding support to the o perating system for named sub \ndirectories and removing the filename character length limit Everyone is familiar with this now \nas youre able to create almost infinitely deep structures of directories and sub directories  \nEXPERIMENT  \nHeres a specification  youve been asked to meet The accounting department where you work \nrequires all expense reports to have the same filename expensesxlsx You need to create \na directory structure where all your expensesxlsx files can exist and not collide or overwri te \neach other to save and track these expense files  \nThe constraint is the requirement all expense report files have a fixed filename The implied \nconstraint is that whatever directory structure you devise has to work for as many expense \nreports as your w ork generates The ability to create sub directories is the tool you have to \nwork with to solve this problem  and keep the expense report files separated  \nPOSSIBLE SOLUTIONS  \nAny solution depends on how many expense reports you create to do your jo b If youre \nworking as a junior software developer you might only travel a few times a year In this case \nyou would only have to provide coarse granularity to keep your expensesxlsx files separated \nSomething like this would be suitable  \n \nThis simple structure gathers all the expense reports under a single root directory named \nexpenses  Each expense report exists in  a directory named with the fully qualified date when \nthe expense report was created Using a date format of YYYY MMDD cause s the directories to \nsort in a useful chronological  order on many operating systems when displayed  \nHowever if youre  a sales engineer  youre  most likely traveling all the time and possibly \nmeeting multiple clients per day This changes how you handle the constraint and  require s \nyour directory structure to support much more granularity to keep all the expensesxlsx  files \nseparate Heres  a possible solution for a sales engineer using the year month  and day values \nas sub directories  \n28Manning Publications Co  To comment go to  liveBook   \nThe directory structure above breaks the dates into separate subdirectories based on year \nmonth day and client name Doing this allows you to keep the expe nsesxlsx files distinct \neven when visiting multiple clients per day This creates a convention that each part of the \npath to a particular expensesxlsx file has meaning as well as a value  \nIt might not be evident based on the experiment above but what  youve created are \nvariable names having meaning and convention Look at the path to a particular expense \nreport  \n \nWhat youve done is to create namespaces each one narrowing the scope of what it \ncontains Reading the path from left to right each segmen t of the path separated by the  \ncharacter creates a new narrower namespace within the context of the previous one  \nSuppose you are the accountant who has mandated the file naming convention for expense \nreports As the accountant youll have to save all the expense reports employees submit \nYoud be under the same constraint as the employees who are generating the expense reports \nbut with the added complexity of keeping all the employee expense reports distinct and \nseparated from each other  \n29Manning Publications Co  To comment go to  liveBook  Creating a directory structure to handle the added complexity could include higher level \nabstractions of department and employee Creating a directory structure providing this level \nof granularity to track and save all the employee expense reports is possible  \nThinki ng about how to create the structure makes it clear its time for the accounting \ndepartment to rethink the requirement and constraints and design a better system  \n32 Namespaces  \nA namespace creates an abstraction contain ing other named things includ ing other \nnamespaces The name of the city or town where you live is an example  The city  name \nprovides a namespace containing all the people who live in that city  The city name may not \nbe unique on its own but within the context of the hierarchy its in county s tate etc it would \nbe \nGoing further the streets and roads where people live all have names The street and road \nnames become a namespace within the city namespace For example there are many streets \nnamed Main Street throughout the United States Ho wever there is usually only one Main \nStreet in each city  \nThis hierarchy of namespaces creates the convention that is a United States mailing \naddress The full address for John Smith working at the Empire State Building might be \nsomething like this  \nJanet Smith  \nEmpire State Building Suite 87A  \n20 W 34th Street  \nNew York New York 10001  \nBy convention the mailing address namespace scope gets narrower reading from bottom \nto top A software developer might remove redundant information and represent this add ress \nlike the directory experiments above in a left to right form  \n1000120 W 34th StreetEmpire State BuildingSuite 87AJanet Smith  \nHere the city and state have been removed because the zip code contains that information \nThe namespace fields have been d elimited with the  character because it doesnt appear in \nthe addresses text Continuing from left to right you come to the final leaf node the person \nthe address applies too  \nLike the directory structure experiment reading from left to right the sc ope of information \ncontained within each distinct namespace gets narrower Also like the directory structure \nhierarchy the position of each namespace follows a convention that gives each meaning  \n33  Python Namespaces  \nThe Python programming language provides the ability to create namespaces Namespaces \ngive you a great deal of power and control when handling the constraints of naming variables \ngiving them meaning keeping them relatively short and avoiding collisions You do thi s by \nplacing variable names in namespaces  \nBefore you get to the point of creating namespaces of your own lets look at the one \nprovided by the language  \n30Manning Publications Co  To comment go to  liveBook  331  Builtins Level  \nWhen Python starts running an application it creates a builtins namespace builtins is  the \noutermost namespace in Python and contains all of the functions you can access at any time \nFor example the print  and open  functions exist in the builtins namespace  \nYou can see whats in the builtins namespace by entering this command at a Pytho n \ninteractive prompt  \n dirbuiltins  \nThis command runs the dir directory command on the builtins  object Youll see \nall of the exceptions and functions listed that are available everywhere in Python  \nYou might not have thought about functions like print  open  and others as existing \nin a namespace and you dont have to use them The idea that they are in a namespace is \nuseful as you learn more about creating your own namespaces and the scope of the objects \nwithin them  \nThere is something to keep in mind when working with the builtins namespace its entirely \npossible to overwrite an object in a namespace with something of  your own For example you \ncould define a function like this  \ndef open  \n     run some code here  \nCreating a function like this would be perfectly fine however the side effect of doing this \nis shadowing the open  function already defined in the built ins namespace It might make \nperfect sense for the program youre writing to name your function open  but shadowing \nPythons open  function and making it inaccessible is probably not what you intended  \nYou can handle this by creating your function lik e this  \ndef myownopen  \n     run some code here  \nThe code works but youve sacrificed brevity and simple meaning for uniqueness to avoid \nyour functions name colliding with Pythons open  function Using a namespace provides a \nbetter solution  \n332  Module  Level  \nThe Python program file you create that starts your program running is considered the entry \npoint for your program as a whole When it starts the objects in the builtins namespace are \ncreated and available anywhere in your Python programs In Pytho n everything is an object \nvariables functions lists dictionaries classes everything Anything you create and give a \nname to is also an object in the main program file and has the potential to collide with and \noverwrite the objects in builtins and ot her things you create and name You can and should \navoid this  \nBreaking up your program code into multiple files containing logically grouped functionality \nis a useful convention to adopt Doing so has the following benefits  \n  \n31Manning Publications Co  To comment go to  liveBook   Keeps similar functionalit y together where its easier to reason about it  \n Prevents program files from becoming too long to edit and manage reasonably  \n Creating namespaces  \nEach Python code file creates a namespaces for your use If you wanted to create two \nfunctions named add  havin g different behavior and you created a mainpy  file that looked \nlike this  \ndef adda b  \n    return a  b  \n \ndef adda b  \n    return fa b  \n \nprintadd12 12  \nprintadd12 12  \nWhen you run this program  it wont function the way you might think Theres no way to \nindicate ing the code above which add  function is being called in the printadd12 12 \nstatement When Python executes this code it defines the first add  function then \nimmediately redefi nes it with the second shadowing it and losing the first definition  \nThe behavior of the two functions is different the first performs a mathematical addition \non the two parameters and the second performs a specialized string addition concatenation  \non the two parameters However as far as Python is concerned the name of the function is \nthe distinguishing feature And since they are both defined in the same namespace the second \nshadows the first and takes precedence  \nTo get both add  functions to  exist you need to create a namespace into which you can \nput one of the add  functions To do this create a utilitypy file that looks like this  \ndef adda b  \n    return fa b  \nThen change your mainpy file to this  \nimport utility  \n \ndef adda b  \n    return a  b  \n \nprintadd12 12  \nprintutilityadd12 12  \nWhen you run the  mainpy  file you get the intended output of  \n24 \n12 12 \nCreating the utilitypy file separates the two add  function definitions so they both can \nexist In the mainpy  file the import utility statement tells Python to pull all the objects in \nthe utilitypy file to a new namespace called utility  \n32Manning Publications Co  To comment go to  liveBook  Be aware the namespace created by importing a file creates a namespace based on the \nbasename of the file which is the def ault behavior You can override this default behavior in \nthis way  \nimport utility as utils  \nThis statement tells Python to pull all the objects in the  utilitypy  file into a namespace \ncalled utils  Being able to alias the namespace specifically can be a u seful feature if you want \nto replace a namespace with other objects that provide different functionality  \nIts also possible to mask a namespace when importing functionality Using your current \nmainpy  example this is done like this  \nfrom utility import   \n \ndef adda b  \n    return a  b  \n \nprintadd12 12  \nprintutilityadd12 12  \nThe code tells Python to pull all the objects in the  utilitypy  file into the current \nnamespace This program now ha s an error in it because the utility namespace no longer \nexists so the printutilityadd12 12  statement doesnt work Removing utility from \nthe print statement makes the program work but youre back to a variation of the original \nproblem The add  function defined in the  utilitypy  file is shadowed by the add  \nfunction defined in the  mainpy  file For this reason its usually not a good idea to use the \nfrom filename import  form when importing files  \nBeing able to create namespaces based on files is useful but Pythons support goes further \nBy capitalizing on the file system directory structure you can create namespace hierarchies \nJust like the previous directory structure naming experiment this gives you more tools to \ncreate meaning and scope for the hierarchies you create  \nIf you take your example a little further you might decide to get more specific with the \nfunctionality youre creating The utilityadd  function is specific to string handling why \nnot make that clearer  \nCreate a n ew directory called utilities in the same folder as your  mainpy  file Move the \nutilitypy  file to the utilities directory and rename it  stringspy  You now have a \ndirectory hierarchy that looks like this  \nutilitiesstringspy  \nThis adds meaning just as the directory structure experiment does utilities indicates that \neverything under the directory is considered a utility  \nOne thing to keep in mind when creating directory hierarchies to contain functionality is \nthe need to cre ate an initpy  file This file has to exist in each directory to let Python \nknow the directory contains functionality or the path to it When the initpy  file exists in \na directory that directory is a Python package  \nOften the initpy  file is empty but it doesnt have to be Any code inside the file is \nexecuted whenever the path containing it is part of an import statement   \n33Manning Publications Co  To comment go to  liveBook  Based on this create an initpy  file in your utilities directory Once thats done \nmodify your mainpy file l ike this  \nfrom utilities import strings  \n \ndef adda b  \n    return a  b  \n \nprintadd12 12  \nprintstringsadd12 12  \nThe from utilities import strings  statement tells Python to navigate to the utilities \npackage and pull all the objects from the strings py file into the strings  namespace The \nprintstringsadd12 12  line has been changed to use the strings  namespace to access \nthe add  functionality Now the namespace plus function name combine to increase the clarity \nand intention of the add functio n \nWhen you create a Python file that you intend to import into other parts of your program \nits common to think of the file as a module The module contains functionality thats useful to \nyour program This idea is very much like the Batteries Included  statement thats often \nassociated with Python Python comes with a large selection of standard modules you can \nimport and use in your programs  \nIf youve used any of Pythons standard modules like  sys you might notice those \nstandard modules dont exis t in the working directory of your program like the  stringspy  \nmodule youve created above Python searches for modules you want to import through a list \nof paths the working directory being first   \nIf you start a Python interpreter and enter these sta tements at the prompt  \n import sys  \n syspath  \nYoull see output that looks something like this  \n Usersdfarrellpyenvversions3 80libpython37zip \nUsersdfarrellpyenvversions3 80libpython3 8 \nUsersdfarrellpyenvversions3 80libpython3 8libdynload \nUsersdfarrelltmpsyspathtestvenvlibpython3 8sitepackages  \nThe output is the list of paths Python will search through when it runs across an  import  \nor from statement in your  code The above list is specific to my Mac the listing you see will \nmost likely be different depending on whether youre using a Windows or Mac computer and if \nyoure running Python in a virtual environment  \nThe first element in the above list is an empt y string Python will look in the current working \ndirectory for modules This is how it found the  utilities  package and the strings module in \nthat package  \nIt also means that if you create a module and name it identically to a Python system \nmodule Py thon will find your package first and use it ignoring the system package When \nnaming your packages and modules keep this in mind  \n34Manning Publications Co  To comment go to  liveBook  In our short example the  import sys  statement causes Python to search the above list \nof paths Since a  sys module does nt exist in your working directory it looks in the other \npaths where it does find the standard modules  \nThe list of paths above is used when you install a package or module with the pip command \nThe pip command will install the package in one of the pat hs from the list As mentioned \nbefore its recommended to use Python virtual environments to prevent pip from installing \ninto your computer systems version of Python  \n333  Function Level  \nThere is another level of namespace control available to you When you cr eate a Python \nfunction you are creating a namespace for variable name creation Another word used for this \nis scope The functions you create exist in a module either the main Python file of your \nprogram or separate module files  \nThe module file creates  a namespace and any functions you create in the module exist \nwithin that namespace What does this mean Take your  stringspy  module and make the \nfollowing changes to it  \nprefix  added \n \ndef adda b  \n    return f prefix a b  \nThe changes abov e create a variable named preface  at the module level namespace and \ninitialize it with the string added   \nIf you run your main program youll see the output of the stringsadd12 12  now \noutputs added 12 12 When the add  function is executed Py thon looks for the prefix  \nvariable inside the function namespace and not finding one looks at the module level \nnamespace It finds the prefix  variable in the module and uses it in the string formatting \nreturned by the function  \nChange the stringspy code  again and make it look like this  \nprefix  added \n \ndef adda b  \n    prefix  inside add function  \n    return f prefix a b  \nInside the add  function youve created a variable named prefix  and initialized it to a \ndifferent string If you rerun your code youll see the output of the stringsadd12 12  \nfunction outputs inside added 12 12  \nWhats happening here is Python now finds the prefix  variable in the add  functions local \nnamespac e and uses it Not only is the prefix  variable defined inside the add  functions \nnamespace its created in the functions scope Well talk about scope more in the next section  \n35Manning Publications Co  To comment go to  liveBook  334  Namespace Scope  \nNames and namespaces are essential in your Python tool box and are related to another tool \nas hinted at in the previous section The scope of a variable is an important consideration when \ncreating and using variables  \nThe scope of a variable relates to it s accessibility and lifetime in a module a Python file In \nPython a variable is created when a value is assigned to it  \nprefix  prefix \nThe statement above creates the variable prefix  and assigns it the string value prefix \n The variable prefix  also has a type of string which Python determines at the time of \nassignment from the object being assigned in this case  prefix  \nIf the prefix  variable were created in a function  \ndef printprefix  \n    prefix  prefix \n    printprefix  \nThe prefix  variable would be within the scope of the printprefix  function and would \nexist only when that function is running Any code surrounding the function that tried to access \nthe prefix  variable would generate an exception  \nIf you were to create a new module fi le named  messagepy  that looked like this  \nprefix  prefix \n \ndef mymessagetext  \n    newmessage  fprefix  text \n    return newmessage  \nYou have created things having different scopes and lifetimes The prefix  variable is in \nthe global module sc ope It is accessible anywhere within the  messagepy  module It also \nhas the same lifetime as the module If you import message  into your code the prefix  \nvariable and mymessage  function are around for as long as the message module is It is still \nwithin the message namespace and would be accessible to programs that import it like this  \nimport message  \nprintmessageprefix  \nprintmessagemymessageHello World  \nThe variables defined inside the mymessagetext  function have function level scope This \nmeans they are only accessible within the function and their lifetime is from the point of their \ncreation to the end of the function statements  \nBecause the mymessagetext  function is contained within the modul e level scope the \ncode within the function can access the prefix  variable  \nAt the module scope whats declared at that level is accessible prefix  and mymessage  \nThe mymessage  function is part of the module level global scope but all the variables  \ndeclared inside the function are not  \n36Manning Publications Co  To comment go to  liveBook  Inside the mymessage  function the two variables text and newmessage  are accessible as \nthey are in the local scope but arent accessible outside the function The module variable \nprefix  is in the global scope and is also accessible inside the function  \nThe program above shows that scope is nested Inner scopes have access to scopes that \nenclose them as demonstrated by the mymessage  function having access to the prefix  \nvariable Outer scopes do not have access to  the scopes they enclose  \nFigure 1  below illustrates this nesting relationship  \n \n335  Namespace Experiment  \nUsing what youve learned about names and namespaces try this experiment using the \ninformation to solve a problem This problem is about using meaningful names and \nnamespaces to solve an otherwise awkward development issue  \nEXPERIMENT  \nYoure the developer in charge of maintaining the software for an online community of users \ninterested in similar things The community wants the software to email them about upcoming \nevents and to include non community members who register to receive event emails This \nlatter group consists of potential new members who are interested but not yet committed to \njoining  \nThe software can send personalized emails t o the mailing list of registered users both \nmembers and non members When creating the personalized email the current software calls \na function getnameperson  to get the name to render into the email based on the  person \nobject passed to it  \nThe c ommunity wants to change how personalized email is rendered by creating a concept \nof formal informal and casual for the name Email sent to non members would always \nuse the formal version Email sent to members would base the name on the users a ccount \nsettings and could use any of the three name versions  \n37Manning Publications Co  To comment go to  liveBook  This becomes your requirement how can the logically named getnameperson  function \nreturn three different values for three different use cases  \nPOSSIBLE SOLUTION  \nOne possible solution is to cr eate three new versions of the getnameperson  function like \nthis \ndef getnameformalperson  \n \ndef getnameinformalperson  \n \ndef getnamecasualperson  \nThe code above is understandable and direct but is awkward to make use of in the rest of \nthe appl ication currently calling getname  Using this approach requires you to modify every \ninstance of a call to getname  to be an ifelifelse  conditional to call the correct function \nabove Youd also have to make the conditional information that selects  the right function \navailable for those ifelifelse  condition tests  \nAnother approach would be to change the getnameperson  function to take an additional \nparameter that indicates how to format the response Something like this would work  \ndef getname person tone str  \nIn the example above the variable tone is a string theoretically set to formal informal \nor casual The value of tone would be used to format the name in an expected manner  \nThe example above would also work but is only a marginal improvement over the \nindividually named functions Choosing this method requires you to find and edit every instance \nwhere the getname  function is called in the entire program and update it to include the \nnew tone parameter If there are many places where the function is used this could become \na maintenance headache  \nThe use of namespaces could provide a workable solution that doesnt disru pt the other \nparts of the software Rather than change the name signature of the getnameperson  \nfunction or changes its parameter list you could use namespaces to create a solution  \nAs a contrived example here is a mainpy program that simulates send ing out an email \nto the community before accounting for the required changes  \nfrom utilitiesnames import getname  \n \n generate a community list of three of the same people  \ncommunity    \n        title Mr  \n        fname John  \n        lname Smith  \n     for x in range3  \n \n iterate through the community sending emails  \nfor person in community  \n     other code that calls getname many times  \n    printgetnameperson  \nThe getnameperson  function fr om the namespy module might look like this  \n38Manning Publications Co  To comment go to  liveBook  def getnameperson  \n    title  persongettitle   \n    fname  persongetfname   \n    lname  persongetlname   \n    if title  \n        name  ftitle fname lname  \n    else \n        name  ffname lname  \n    return name  \nThis function looks at the person  information and depending on if the person has a title \nvalue or not formats the name accordingly and returns it The getnameperson  function is \nthe formal version and can be used as is  \nThe change requirements are to create a formal informal and casual greeting for the \nemails based on the tone determined by the account You already have a formal version of the \ngetnameperson  function and just need to create the informal an d casual versions Create \na module file called informalpy in the utilities package directory that looks like this  \ndef getnameperson  \n    fname  persongetfname   \n    lname  persongetlname   \n    name  ffname lname  \n    return nam e \nThis function concatenates the first and last name and leaves out the title Create another \nmodule called casualpy in the utilities package directory that looks like this  \ndef getnameperson  \n    fname  persongetfname   \n    name  ffname  \n    return name  \nThis function returns the persons first name and nothing more  \nBased on the change requirements you also need to create a way to define the tone to use \nin the email based on the com munity members account information The information to \nexamine is whether or not they are a member and if they are a member what is the greeting \nsetting in the account  \nFor this experiment you can create an accountpy module in the utilities package \ndirectory The accountpy module contains this code  \nfrom random import choice  \n \ndef gettoneperson  \n    return choiceformal informal casual  \nThis code returns a randomly selected value from the list of tone strings formal \ninformal and  casual In a real application the tone would probably be retrieved from a \ndatabase table containing information about the users  \nNow you have everything you need to meet the requirements and change how the mailing \nlist is processed Heres an updated li sting of the mainpy program showing how the \nnamespaces youve created are used  \n  \n39Manning Publications Co  To comment go to  liveBook  from utilities import names  \nfrom utilities import informal  \nfrom utilities import casual  \nfrom utilities import account  \n \ncommunity    \n        title Mr \n        fname John  \n        lname Smith  \n     for x in range3  \n \n \nfor person in community  \n    tone  accountgettoneperson  \n    if tone  formal  \n        getname  namesgetname  \n    elif tone  informal  \n        getname  informalgetname  \n    elif tone  casual  \n        getname  casualgetname  \n    else \n        getname  namesgetname  \n \n     other code that calls getname many times  \n    printgetnameperson  \nThis version of the mainpy progra m imports the three new modules informal  casual  \nand account  At the top of the community iteration the tone is retrieved based on the person \npassed to accountgettoneperson  function call The tone variable is used in an \nifelifelse  set of statement s to set the getname  variable  \nNotice the getname  variable is set to the getname  function from a specific module \ndepending on the value of tone The code sets the getname  variable to refer to a function \nnot call the function Now that getname  is a fu nction object it can be used just like a function \nin the printgetnameperson  statement  \nThe getnameperson  function call will do the right thing because it refers to the desired \nmodules getnameperson  function at each iteration when the tone varia ble is set  \nAll of this work upfront to create the modules and the code within them was done to avoid \nlosing a good logical name like the getname  function and allow it to be used unchanged \nanywhere else within the program The work also prevents name con flicts through the use of \nnamespaces  \n  \n40Manning Publications Co  To comment go to  liveBook  34 Summary  \nYouve learned a lot in this chapter about the names we give things and how namespaces can \nhelp you collect those things into meaningful groups There is no shortage of symbols you can \nuse to name things using good ones gives you benefits that pay off the larger and more \ncomplex the applications you build become  \nYouve delved deeper into the development world and gained more insight and details about \nhow to see and think about the applications you ll build Youll continue to look closer at the \nelements of software development with Python The chapters that follow in this book will build \non the concepts of logical names and namespaces to make the programs you develop easier \nto follow and manage  \n  \n41Manning Publications Co  To comment go to  liveBook  4 \nWhere Developers and Computers \nMeet  \nThis chapter covers  \nWhat Is An Application Programming Interface API\nWhat Is A Well Designed API\nHow To Create Good APIs\nCommunicating with people through the spoken and written word gestures expressions and \ninflection is one of the cornerstones of our advancement as a species Even across different \nlanguages and cultures we can communicate with each other perhaps with a bit more effort \nbut we can learn to convey meaning intent information  goals and more  \nThe evolution of computers has also created many and varied ways for us to communicate \nwith a computer and it with us Keyboards mice touchpads voice screens printers \nnetworks motion sensors and more are all devices that have diff erent uses providing \ncommunication between people and computers  \nAll of these devices are examples of interfaces designed to convey information to and from \na computer system Keyboards provide a mechanical way for us to enter the written word into \na system  A computer mouse provides one way to indicate gestures and events to a computer \nsystem A display screen provides the computer a way to represent digital information in a \nway we can receive it Speakers give a computer an interface to produce audio infor mation  \nAll the complexities of capturing a keystroke getting the mouse position into a computer \nor generating a sound from a computer is simplified hidden and provided by the interace  \nInterfaces exist to receive information act on it and send back r esults The interfaces weve \ntalked about so far are essential to computer users As developers of applications we also use \ninterfaces that exist at a deeper level of computer systems  \nThe operating system of a computer provides hundreds perhaps thousan ds of interfaces \nthat give access to all the services and functionality the computer is capable of Access to the \n42Manning Publications Co  To comment go to  liveBook  file system and ultimately the storage system of a computer is provided to applications \nthrough an interface If a computer is connected to  a network there are interfaces an \napplication uses to access those networks If an application renders visual information there \nare interfaces to get that information onto the connected displays  \nThese kinds of interfaces fall under the larger general c ategory called an Application \nProgramming Interface or API  \n41 Starting a Conversations  \nA computer screen provides a level of abstraction between how the users sees things and how \nthe computer represents things A mouse provides a level of abstraction betwee n our hand \nmovements and button clicks to the computer as selections and intentions  \nAn Application Programming Interface provides the same kinds of abstraction However it \ndoes so not between a person and a computer but between sections of programming c ode \nAll programs are composed of custom code modules and libraries of existing code Even the \nmost straightforward Python program performing a printHello World  is using standard \nlibrary code provided with the Python language  \nHaving library code is a huge advantage allowing you to focus on what youre trying to \naccomplish rather than coding everything yourself Imagine having to write a print  function \nevery time you started a new project or having to create something more complex like network \naccess  \nPython is well known as having batteries included meaning it comes with an extensive \nand powerful standard library of modules providing all kinds of functionality you can use and \nnot have to create yourself Theres also a large selection of modules yo u can install from the \nPython Package Index  httpspypiorg  that cover diverse and well supported areas of \ninterest  \nBecause of these numerous modules Python is sometimes called a glue language as it \ncreates a way to connect powerful libraries of co de in interesting ways Thinking of Python as \na glue language doesnt diminish its power but instead shows its versatility  \nPython as a glue language is possible because of the Application Programmers Interface \nAPI the modules support like calling printHello World  This calls the print  function \npassing the literal string argument Hello World  abstracting the complexities of outputting \ntext to a display The API a module supports makes it possible to use complex sophisticated \ncode in your programs  \n411  A Contract Between Pieces Of Code  \nAside from the rather abstract discussion about what an API is what is it in practice One way \nto think about it is to consider an API a contract between your code and another piece of code \nwhose functionality you want to use Like a contract between people it specifies if one party \ndoes this then the other party does that  \nIn programming terms this often means when calling a function or method in a particular \nway it performs some work and returns some information or both In Python when you create \na function to be used elsewhere in your code youve created an API The name you give the \nfunction expresses some meaning about what the API does The functions input parameters \n43Manning Publications Co  To comment go to  liveBook  pass information to the API to specify the work to perform and the data to perform it on If \nthe function returns information this is the output of the API  \nThis idea of passing some information into a piece of code and getting some information \nor action out of it has been around in computer sci ence for a long time and is known as the \nblack box model What a black box expects as input and the output it creates is well \nunderstood to the point that knowing what goes on inside isnt necessary Only the behavior \nneeds to be known not the implement ation The term black box comes from the internals of \nthe invoked functionality being opaque blocked from view  \nVisually the use of a black box function looks like this  \n \nAs a developer you dont have to know about the internal functionality of the print \nfunction  All you need to know is that passing the function a string invokes its default behavior \nprint that string to the screen  \nA local API is a function or class you  create or a module your code imports The API is \nwithin the context of your program code and is accessed directly by calling the functions and \nclass instance methods provided  \nIt is also possible to call an API thats hosted remotely An example would be  connecting \nto a database server and accessing data Here the API is accessed over a network connection \nproviding the transport mechanisms for your code to make calls to the remote API and for the \nAPI to respond Well get more into this in a later chapter  specifically about databases  \n412  Whats Passed as Input  \nWhen your code calls a function or method of an API its engaging in one part of the contract \nbetween your program and the functionality provided by the API The input arguments are the \ninformation pass ed from the context of your program code to the context of the API Python \nfunctions and methods support positional and keyword arguments The positional arguments \nordering and names of the keyword arguments are considerations when using and building \nan API \nFor example Pythons print function is most often used like this  \n msg  Hello World  \n printmsg  \nHello World  \nWhen this function executes it prints the string variable msg to the screen The API provided \nby the print function is simple enough to understand it takes the input argument and performs \nthe work necessary to output it to the screen  \n44Manning Publications Co  To comment go to  liveBook  The complete API of the print function shows it is a more versatile function Here is the \nprint function signature  \nprintobjects sep  end n filesysstdout flushFalse  \nThis signature indicates that the first parameter is a tuple of non keyword arguments \nfollowed by additional keyword arguments with default values  \nThe objects  parameter allows the caller to pass multiple comma separated value s to the \nprint function This means  \n printHello World  \nHello World  \nOutputs the same thing to the display as  \n printHello World  \nHello World  \nCalling the print function this way works because the function iterates through the objects  \ntuple pa rameter converting each to a string if need be and outputs each object to sysstdout  \nthe screen separated by the default separator string a space character  \nThe sep   named parameter provides the default space separation string and lets you \nchange i t to something else to separate the objects when output to the screen  \nThe endn parameter provides a carriage return as the default to end the output and \nlets you change how the output ends  \nThe filesysstdout  parameter defines the default destinati on called standard output \nwhich is usually the screen Changing this parameter lets you change that destination The \nobject you set the file parameter equal to must have a writestring  method for it to work \nas a file destination If the object doesnt h ave a writestring  method the AttributeError  \nexception is raised when the print  function is called  \nThe flushFalse  parameter provides a way to forcibly push whats sent to the stream to \nthe output destination rather than buffering it if set True \nAll of this tells us the print function API is well designed and surprisingly powerful The use \nof the initial non keyword objects  tuple followed by the keyword arguments with default \nvalues lets you use the print functions most common use case The re st of its functionality is \nthere if needed but can be ignored otherwise  \nImagine if the print function was handled differently A nave API implementation might \nremove all the keyword parameters with default values and look something like this  \nprintobjec t \nA print function like this would satisfy the common use case but would start to fall apart \nbeyond that Suppose not long after this version is in use its required to print more than one \nobject at a time One way to extend the simple implementation is to create additional print \nfunction variations  \nprinttwoobject object  \nprintthreeobject object object  \n45Manning Publications Co  To comment go to  liveBook  What if additional requirements were placed on this nave  expansion of the  API to have a \ndifferent separator character  perhaps the pipe  chara cter Following the established simple \nvariation pattern would lead to something like this  \nprintobject  \nprintpipesepobject  \nprinttwoobject object  \nprinttwopipesepobject object  \nprintthreeobject object object  \nprintthreepipesepobject o bject object  \nThis solution doesnt scale well and code that uses this would have to change to use a \ndifferent permutation of the API  \nThe goal of this example is not to show the progression down an ill conceived path of API \ndevelopment but to draw close r attention to the details of what makes Pythons default print \nfunction a good API There is work going on inside the print function to support the function \nsignature and the use cases where its applied  \nThis is one of the earmarks of a good API It prov ides useful functionality that can be \nexpanded on without exposing the work involved in doing so As a developer you dont have \nto worry too much about how the print function works You get to use it knowing its \nfunctionality is well defined and containe d \nWhen developing an API how you define the input can dramatically influence its utility and \nfuture use  \n413  Whats Expected as Output  \nThe other part of the contract provided by an API is its output The output of a function consists \nof three parts  \n1 Return value  \n2 Actions on the system sometimes thought of as side effects  \n3 Exceptions  \nRETURN VALUE  \nThe most commonly thought of output of a function is the return value For example this code  \n abs 10 \n10 \nThe code looks like a mathematical expression and thats very close to what its modeled \nafter The input to the abs function is a number and the output is the absolute value of that \nnumber  \nA great deal of programming is creating and using functions that accept parameters \nprocess those parameters and return the results Building up an application is a process of \norchestrating function calls and feeding the returned values into other functions until you arrive \nat the desired outcome  \nBecause everything in Python is an object a function return value is also an object This \nmeans you can build a function as part of your API that returns more than just a single scalar \nvalue like the abs function  \n46Manning Publications Co  To comment go to  liveBook  One example commonly seen in Python is to return a tuple Returning a tuple allows you \nto pass back more than one value to the calling function which can then unpack the tuple into \nvariables Heres some code from CH04example01py  \nfrom typing import Tuple  \n \ndef splitfullnamefullname str  Tuplestr str str  \n    fname  mname  lname    \n    parts  fullnamesplit  \n    if lenparts  1  \n        fname  parts0  \n    if lenparts  2  \n        mname  parts1  \n    if lenparts  3  \n        lname  parts2  \n    if not lname  \n        mname lname  lname mname  \n    return fname mn ame lname  \n \n use case  \nfname mname lname  splitfullnameJohn James Smith  \nThe splitfullname  function takes in a full name and returns the name parts fname  \nmname  and lname  Even if the fullname  parameter contains only one or two names the \nfunction behaves correctly If there are only two parameters it assumes the second is the last \nname and sets mname  to an empty string  \nThe use case shows how the tuple returned by the function can be unpacked into three \nvariables You can also assign the ret urn value from splitfullname  to a single tuple \nvariable but its often useful to unpack the returned tuple directly into waiting named \nvariables  \nACTIONS ON THE SYSTEM  \nMany API functions perform work to transform data passed to them create new data or \nperform calculations based on the data passed This new or transformed data is returned to \nthe caller of the API for further processing  \nAPI functions can also perform actions on the system its running on For example if you \nare using an API t hat is part of a robot and call a function to rotate a motor attached to that \nrobot youd expect the motor to start rotating  \nThe actions taken by API functions are what make applications useful The ability to open \ncreate read and write files interac ting with networks printing documents and controlling \nrealworld devices are all actions an application can execute provided by API functionality  \nAn API function performing an action doesnt necessarily have to return any data to the \ncaller if its prima ry purpose is to perform that action That doesnt mean it cant return output \ndata The API function for the robot motor example could return a True or False  value to \nindicate whether or not the motor is rotating  \nEXCEPTIONS  \nExceptions and how to handle t hem are a fact of life as a developer Disk drives fail networks \ncan be unreliable and any number of other unexpected behaviors can occur  \n47Manning Publications Co  To comment go to  liveBook  The API functionality you create can generate exceptions from operations such as divide \nby zero or raise exception s because the functionality created an unexpected or exceptional \nstate  \nWhen creating an API function one of your goals is to prevent exceptions when you can \nand handle them gracefully when you cant As an example if your functionality is performing \nnetwork IO and the network becomes unreliable what can you do  \nOne possibility is to retry the operation several times with a gradually longer timeout \nbetween retries If the network stabilizes within the retry attempts the function can continue \nand succeed  However if the retries all fail a network exception is raised and passed upward \nto the caller  \nOn the other hand if a divide by zero exception is raised because of an input parameter \ntheres nothing you can do but let the exception bubble upwards to so me higher level \nfunctionality that handles it  \nHandling an exception is knowing whether you can do something about it or not Never \nsilence an exception without having a specific reason for doing so this throws information \naway and makes an API untrustwor thy \nUsers of your API need to be aware of and prepared to handle the exceptions your API \ngenerates as they do with any other exceptional condition when developing Documenting \nyour API is an excellent way to inform the users of your API what exceptions t hey might expect  \nExceptions are covered in more detail in a later chapter  \n42 Function API  \nFunctions provide the mechanism to interface with an API In object oriented programming \nwhere you think about methods on an object they are functions tied to that ob ject instance  \nLets spend some time talking about ideas you can put in place to create useful functions \nand by extension good APIs  \n421  Naming  \nAs we talked about in a previous chapter names matter in development How you name the \nfunctions you create goes  a long way towards making the API youre creating make sense  \nFunction names should use full English words and use the snakecase format There is no \nreason to use abbreviations to shorten the name Every modern code editor has \nautocompletion abilities ma king typing the full name a one timeonly occurrence at the time \nof function definition  \nUsing domain specific acronyms is also discouraged as users who arent familiar with the \ndomain the API is working in would find the different naming conventions confu sing \nThe name indicates or hints at the use case of the function what it returns and what it \naccepts Additionally the documentation string docstring can elaborate further on the \nintended use In Python a function docstring is a tripled quoted strin g containing information \nabout a function and immediately follows the function definition  \nIn the case where function name collisions are possible because the logical name choice is \nsimilar or the same use namespaces and separate the functionality into mo dules  \n48Manning Publications Co  To comment go to  liveBook  422  Arguments  \nWhen creating a function to provide an API for some functionality you want to encapsulate \nyou can think about the Python print function presented earlier That seemingly simple function \noffers a surprising amount of functionality because  of the interface construction and the way \nthe encapsulated code is built  \nThere are four ways to pass arguments to the functions you create  \nPOSITIONAL ARGUMENTS  \nThese are the most common form of arguments used with functions and help define usability \nHere is an example function definition with positional arguments  \ndef fullnamefname mname lname  \n    return f fname mname lname  \nThe name of the function indicates what it returns and the positional arguments fname  \nmname  and lname  make clear what it expects as input Calling the function with string literals \nlooks like this  \nprintfullnameJohn James Smith  \nThe code assigns the string literals to the positional arguments in the same order created \nwhen the function wa s defined  \nIt is possible to call the function using argument names in this manner  \nprintfullnamefname John mname James lname Smith \nIts also possible to change the order of the arguments by calling the function and using \nkeyword arguments  \nprintfullnamemname James lname Smith fname John \nPositional arguments are mandatory and must have a value assigned to them when calling \nthe function Otherwise Python raises a TypeError  exception  \nKEYWORD ARGUMENTS  \nKeyword arguments arent mand atory as they have default values Often these are used for \noptional arguments allowing the function to operate with known default parameter values when \nthe caller doesnt supply one The fullname  function defined above can be altered to use \nkeyword argum ents like this  \nfullnamefname mnameNone lnameNone  \nNow the function has one positional argument fname  and two keyword arguments mname  \nand lname  each with a default value of None The function makes fname  the only mandatory \nargument implying the f unction operates correctly if mname  and lname  arent provided by the \ncaller  \nIts also possible to use the keyword arguments in a different order than defined by the \nfunction For instance calling the function in this manner  \n49Manning Publications Co  To comment go to  liveBook  fullnameJohn lnameSmit h \nThe code above indicates the function handles the case where fname  and lname  are \nsupplied but mname  is assigned the default value of None \nWhen defining a function once you create an argument with a default value keyword \nargument any arguments fol lowing it must also be keyword arguments and have default \nvalues  \nARGUMENT LIST \nIn the Python print function the first argument was of the form objects  The objects \nparameter is an example of passing a variable number of positional parameters to a funct ion \nInside the print function the objects  argument is a tuple containing all the remaining \npositional arguments in the function A variable number of positional parameters is commonly \nnamed args  but thats just a convention not a requirement  \nModifyin g the fullname  function to use an argument list looks like this  \ndef fullnamefname names  \n    return  joinfname names  \nIn this form the fullname  function creates a temporary list of the fname  parameter and \nthe elements in the names  to join them together separated by a space character This form is \nuseful to pass multiple similar arguments but can be confusing to the users of the function \nThe function will join any number of elements in the names  argument tuple which might not \nbe your intention  \nDefining the function in the original form where all the arguments have names is a better \nway to go in this case From the Zen of Python explicit is better than implicit  \nKEYWORD ARGUMENT DICTIONARY  \nThe keyword argument dictionary is akin to the argument list its a way of wrapping up all \nkeyword arguments into a single argument to a function Youll often see it defined as \nkwargs  but again this is only a convention Changing the fullname  function to use this \nform looks like this  \ndef fullname kwargs \n    return f kwargsgetfname  kwargsgetmname  kwargslname   \nInternally the fullname  function examines the names dictionary looking for the \nkeywords fname  mname  and lname  Without documentation the user of this function would \nnot know what to include as key value pairs in the names  dictionary parameter  \nThe caller can also add other key value pairs to the names  dictionary that would possibly \nhave no meaning to t he fullname  function The extra key value pairs are ignored by the \nfullname  function but could have meaning to functions it calls by passing the names  \nparameter along Take care when using this form and do so intentionally  \nARGUMENTS IN GENERAL  \nThe a bility to create proper function signatures includes being aware of patterns and \nconsistency Many APIs consist of multiple functions working together to accomplish \n50Manning Publications Co  To comment go to  liveBook  something This often means passing the same data into more than one function so each \nfunction is aware of the state of the working data If youre processing data contained in a \ndictionary thats passed to multiple functions its a good idea to make the argument position \nand name representing the common data the same for all or as many as po ssible functions \nthat work with it  \nFor example make the dictionary the first argument of the function and all the additional \narguments pass information about how to process the dictionary The first parameter dictionary \nis the common state data struct ure being passed between functions that act on that state \ndata  \nemailuseruserdata content from  \npopulateuseraddressuserdata address city state zipcode  \nThe emailuser function gets the email address from the userdate  structure then \ngenerates  an email with the content  and from parameters and sends the email  \nThe popuplateuseraddress  function adds address information to the existing userdata  \nstructure  \nThe same thing would apply to system resources passed to functions file handles databas e \nconnections and cursors If multiple functions need these resource objects it helps make the \nAPI more readily understandable if the functions have a consistent signature  \nA function that has many arguments starts to stretch our cognitive abilities and often \nindicates the function does too much and should be refactored into smaller functions each \nwith a single purpose  \nIts tempting to make a long list of function arguments into one using the keyword \nargument ability of Python Unless the dictionary pas sed as the kwargs  is documented it \njust obscures what the function is expecting Its also side steps the original issue that perhaps \nthe function needs to be refactored  \n423  Return Value  \nAs youve seen one half of the API contract is whats returned by a function In Python even \nif you dont have a return statement in your function code a value of None is returned \nautomatically  \nIf the function you create performs system actions file IO network activity system level \nchanges you can return a True or False to indicate the success or failure of the function  \n424  Single Responsibility  \nStrive to create functions that do only one thing this is the Single Responsibility Principle \nWriting a useful function is already considerable work especially if your goal is to make the \nfunction flexible through thoughtful  input arguments  and processing code  Trying to make it \ndo two things more than doubles the difficulty  \nHeres a contrived example function from CH04example02py  that illustrates this  \n  \n51Manning Publications Co  To comment go to  liveBook  def fullnameandprintfnamestr  mname str lname str  None \n    Concatenates the names together and prints them  \n     \n    Arguments  \n        fname str  first name  \n        mname str  middle name  \n        lname str  last name  \n     \n    fullname   join name for name in fname mname lname  if name \n    printfullname  \nThis function concatenates the arguments to create the fullname  variable and prints it to \nsysstdout  The list comprehen sion inside the  join is to ensure there is only a single \nspace between the names should mname  be left out when the function is called This function \nis not as useful as it could be because its trying to do too much  \nIts not useful to other functions  needing the full name because it isnt returned Even if \nthe full name was returned any function calling this has to expect the full name to be printed  \nAlso the function is difficult to test because it doesnt return anything To test this youd \nhave to redirect sysstdout in some way so a test could see the output  which could get \nmessy quickly  \nHere is a better version from CH04example02py  \ndef fullnamefnameNone mnameNone lnameNone  str \n    Concatenates the names together and return s the full name  \n     \n    Arguments  \n        fname str  first name  \n        mname str  middle name  \n        lname str  last name  \n     \n    Returns  \n        str  the full name with only a single space between names  \n     \n    fullname   join name for name in fname mname lname if name  \n    return fullname  \nThis version only does one thing it creates the full name and returns it to the caller Now \nthe return value of the function can be used with the print function included in a web page  \nadded to a data structure converted to a JSON document and more  \nThis function has also become easy to test because you can test the return value and the \nsame input arguments always produce the same output  \n425  Function Length  \nRelated to the Single Responsibility Principle is the length of the functions you write As people \nits difficult to keep too much context and detail in our heads at once The longer a function \ngets the more difficult it becomes to reason about and under stand its behavior  \nThere is no hard and fast rule to adhere to regarding the length of a function A good rule \nof thumb is around 25 lines but this is entirely dependent on your comfort level  \n52Manning Publications Co  To comment go to  liveBook  If you create a function thats too long to comprehend easil y it probably means the function \nis trying to do too much The solution is to refactor it and break some of the functionality out \nto other functions  \nAnother idea if refactoring a function leads to multiple functions that work together on the \nsame data or  processing is to create a class with the functions as the methods of that class  \nIf you follow good naming practice and make the new functions do only one thing well \nyoull create more readable code  \n426  Idempotentence  \nThough an ominous sounding word idempo tent in developer terms means a function that \nalways returns the same result given the same input argument values No matter how many \ntimes its called the same input yields the same output  \nThe output of the function isnt dependent on outside variables  events or IO activity For \nexample creating a function that uses the arguments along with the clock time to create the \nreturn value wouldnt be idempotent The return value is dependent on when the function is \ncalled  \nIdempotent functions are easy to te st because the behavior is predictable and can be \naccounted for in test code  \n427  Side Effects  \nFunctions can create side effects that change things outside the scope of the function itself \nThey can modify global variables print data to the screen send infor mation across a network \nand a whole host of other activities  \nIn your functions the side effects should be intended what was referred to as actions on \nthe system previously Unintended side effects need to be avoided Modifying a global variable \nis somet hing a function can do but should be thought about carefully as other possibly \nsurprising functionality could be affected by those modifications  \nWhen opening a file its good practice to close it when through with it to avoid the \npossibility of corrupt ing the file Database connections should be closed when unused so other \nparts of the system can access them In general its good programming practice to clean up \nand release system resources as soon as your function or application is finished with them  \nThere is another side effect to be aware of when working with Python Because all \narguments to functions are passed by reference the function has the potential of altering \nvariables outside of the functions scope Example program CH04example03py  \ndemonstrates this  \n  \n53Manning Publications Co  To comment go to  liveBook  from copy import copy  \n \ndef totalvalues list newvalue int  int \n    This function adds newvalue to the values list  \n    totals the contents and returns the total  \n     \n    Arguments  \n        values list  list of values to to tal \n        newvalue int  value to include in total  \n     \n    Returns  \n        int  total of values in list  \n     \n    valuesappendnewvalue  \n    return sumvalues  \n \n \ndef bettertotalvalues list newvalue int  int \n    This function adds newvalue to the values list  \n    totals the contents and returns the total  \n     \n    Arguments  \n        values list  list of values to total  \n        newvalue int  value to include in total  \n     \n    Returns  \n        int  total of values in list  \n     \n    templist  copyvalues  \n    templistappendnewvalue  \n    return sumtemplist  \n \n \nvalues1  1 2 3  \ntotal1  totalvalues1 4  \nprintfvalues1 has been modified values1  \nprintftotal1 is as expected to tal1  \nprint \nvalues2  1 2 3  \ntotal2  bettertotalvalues2 4  \nprintfvalues2 unchanged values2  \nprintftotal2 is as expected total2  \nWhen this program runs the following output is produced  \nvalues1 has been modified 1 2 3 4 \ntotal1 is as expected 10  \n \nvalues2 unchanged 1 2 3  \ntotal2 is as expected 10  \nBoth the total  and bettertotal  functions return the same value 10 but only \nbettertotal  is idempotent The code in the total  function is changing the values1 \nlist passed to it as a parameter and exists outside of its scope  \nThis happens because of the way the sum is calculated The total  function appends \nnewvalue  directly to the values  list argument passed to it Because arguments are passed \nby reference this means the list variable values1  outside the function and the variable \n54Manning Publications Co  To comment go to  liveBook  values  inside the function both reference the same list When newvalue  is appended to the \nlist its modifying the same list that values1  referenced  \nInside the bettertotal  function makes a copy of the values  argument creating a new \nlist variable templist  independent of the one referenced by the values2  list Then it \nappends newvalue  to templist  and returns the sum of templist  This leaves the values2  \nlist variable untou ched which is the intended behavior  \nThe bettertotal  function is idempotent because it returns the same results for a given \nset of inputs with no side effects  \n43 Documentation  \nDocumentation is a necessary process when building and defining an API Funct ions and the \nmodules they are part of should have documentation that briefly describes the functionality of \nthe module and the functions it contains  \nModules should have docstrings at the top of the file describing the functionality the module \nprovides and  possibly the exceptions that might be raised  \nFunctions and class methods should have docstrings that briefly describe what the function \ndoes what the parameters are for and the expected return value The functions in the example \nprograms shown previousl y include example docstrings  \nYou might hear people say documenting Python code is unnecessary because the code is \nso readable and therefore self documenting The readability part is genuine but the intent of \nany reasonably complex piece of code can only benefit from documentation helping the reader \nunderstand that intent  \nDocumenting code does take effort however modern code editors like VS Code make it \neasier to insert docstring templates A template for the docstrings in the example programs \nwas gener ated by hitting return at the end of the function definition typing triple double \nquotes  and hitting return again  \nMany tools extract and process Python docstrings as part of external documentation \nsystems Besides being a benefit to readers of the code including the original author there is \nanother win If youre at the Python prompt and type helpfunction name  the built in \nhelp system presents the docstring of the function for reference This includes not only the \nbuiltin functions but those you create The existence of a docstring makes this possible  \n  \n55Manning Publications Co  To comment go to  liveBook  44 Summary  \nThis chapter covered useful information about APIs  \n What an API is and what a good one looks like  \n How to create a good API  \n Specific things to think about  \n Steps to take while coding  \nCreating a good API is important because ease of use is important Users of your APIs \nwhich includes yourself want to make use of the functionality provided not struggle with how \nto get that functionality to work  \nCreating useful APIs is challenging there are a lot of moving parts and considerations Well \nnamed modules functions and classes with consistent logical pa rameters and documentation \nhelp give an API good affordance or discoverability  \nLike many things the work put in to create something now pays rewards later when using \nwhat youve created as a trusted tool  \n  \n56Manning Publications Co  To comment go to  liveBook  5 \nThe Object of Conversation  \nThis chapter covers  \nObject oriented APIs\nDesigning Objects with Classes\nWhat Inheritance Is\nWhat Polymorphism Is\nWhat Composition Is\nWhen having a conversation particularly one with any complexity its helpful if everyone in \nthe conversation has the same context It would be difficult to have conversations if every time \nsomeone began a new sentence they had to present all of the context about the object of the \nconversation that had passed before  \nFrom the standpoint of software functions the context is the current state of  the information \nthe functions are working with In the previous chapter we talked about creating function \nsignatures where the data state is passed around the function calls in consistent ways  \nThis is a useful and powerful way to conduct conversations b etween functions that work on \nstateful data It gets a little more complicated if the same functions are being passed multiple \ndistinct stateful data contexts The data and the functions that work on that data are separate \nfrom each other and its up to t he developer to keep them organized and connect them  \nPython provides another layer of abstraction to reduce complexity by using the object \noriented programming model  \n51 Object Oriented Programming  \nThe ability to place functions into modules provides many op portunities for structuring an API \nThe type and order of the parameters passed to the functions that make up an API offer \npossibilities to make your API more discoverable and useful  \n57Manning Publications Co  To comment go to  liveBook  Using the concept of single responsibility and keeping functions to mana geable lengths \nmakes it more likely your API will consist of multiple functions Users of the APIs functionality \nwhich may itself call other API functions further modifying the data or state produces the final \nresult returned to the user  \nOften the data  structures passed between functions are collection objects lists sets and \ndictionaries These objects are powerful and taking advantage of what they offer is important \nin Python development  \nBy themselves data structures dont do anything but the fun ctions they are passed to \nknow what to do with the data structures they receive as input  \nSince everything in Python is an object you can create interesting objects using object \noriented programming One of the goals of creating objects is to encapsulate data and the \nmethods that act on that data into one thing Conceptually youre making something with the \nfunctionality you designed and implemented Doing this creates something you can think about \nas an object or thing that has behavior Creating classe s is how you design these objects \nconnecting data and functionality to them  \n511  Class Definition  \nPython provides object oriented programming by defining classes that can be instantiated into \nactual objects when needed Instantiation is the act of taking something from a definition the \nclass to reality You could say the blueprint for a house is the class definition and building \nthe house instantiates it  \nHeres a simple class definition for a Person class from the CH05example01  application \ncode \nclass Person  \n    Defines a person by name  \n \n    def initself fname str mname str  None lname str  None  \n        selffname  fname  \n        selfmname  mname  \n        selflname  lname  \n \n    def fullnameself  str \n        This method returns the persons full name  \n        fullname  selffname  \n        if selfmname is not None  \n            fullname  ffullname selfmname  \n        if selflname is not None  \n            fullname  ffullname selflname  \n        return fullname  \nThis class definition creates a Person template containing a persons first middle and last \nnames It also provides the fullname  method to get the persons full name based on the \ninformation passed to the object by its constructor th e init  method A function \nassociated with a class is often referred to as a method This is a convention to make a \ndistinction between a regular function and one thats part of a class  \nCreating and using an instantiated person object from the Person  class looks like this  \n  \n58Manning Publications Co  To comment go to  liveBook   p1  PersonGeorge James Smith  \nprintp1fullname  \nThe self parameter passed as the first parameter of every method of the Person  class is \nthe reference to the person instance just created In this way your code ca n create as many \nPerson  instances as needed and each will be distinct because the self value of each will \nreference a particular instance and the state attributes data it contains  \nThis class can be represented visually in UML Unified Modeling Language  as well UML is \na standardized way to present the design of systems visually Its not necessary to use UML \ndiagrams when designing and building a system but it can be useful to introduce abstract \nconcepts difficult to present concisely with text alone  Here is the UML diagram for the Person \nclass  \n \nThe UML diagram for the Person class shows the name of the class the attributes it \ncontains and the methods it provides  \nThe plus sign character  in front of the attribute and method names indicates they are \npublic In Python attributes and methods of a class are always public and have no notion of \nprotected or private access  \nPythons class design originates with the idea were all adults here and the developers \nwho use your classes wil l behave accordingly Using plain attributes should be the default when \ndesigning your classes Youll see later how class properties can gain control of how attributes \nare accessed and used  \nA simple use case for the Person class is presented in the CH05example01  application  \ndef main  \n     Create some people  \n    people    \n        PersonJohn George Smith  \n        PersonBill lnameThompson  \n        PersonSam mnameWatson  \n        PersonTom  \n     \n \n     Print out the full names of the people  \n    for person in people  \n        printpersonfullname  \nThis code creates four instances of the Person class each representing a different person \nand exercising all the variations of the constructor The for loop iterates through t he list of \n59Manning Publications Co  To comment go to  liveBook  Person object instances and calls the fullname  method of each Notice the fullname  \nmethod is not passed any state data it uses the data attributes associated with the class \ninstance  \n512  Drawing With Class  \nThe rest of the examples youre going to build are object oriented applications that animate \nsome shapes on the screen Readers who hav e experience with object oriented programming \nwill probably recognize the analogy a generic shape from which specific shapes like rectangles \nand squares inherit This analogy has been used to present object oriented techniques for a \nlong time and has bec ome somewhat contrived I acknowledge that but am using it anyway \nbecause it has advantages  \nThe use of shapes is something familiar enough outside of programming that readers can \nrelate to them and the idea that new shapes can be derived from them Additi onally a program \nthat moves shapes around on a computer screen is also familiar to most readers The idea of \nmoving shapes having speed and direction staying within the boundaries of the program \nwindow are accepted behaviors for computer rendered graphi cs \nBecause of this familiarity with shapes the cognitive demand of learning about the object \noriented program can be focused on just that not on any abstract quality of the object itself \nFor this reason Id ask you to bear with any contrived nature of  the examples to see the larger \npicture  \nEach of the examples that follow expands on the previous one to present the following \nconcepts  \n Inheritance  parentchild relationships between classes  \n Polymorphism  using an object as if it had multiple forms  \n Composition  using composition instead of inheritance to give attributes and behavior \nto a class  \nTo create the drawing application youll be using the arcade module available in the Python \nPackage Index  httpspypiorgprojectarcade  This module provides the framework to \nbuild a drawing surface on the computer screen and draw and animate objects on that screen  \nThe first thing to do is to define a class f or a rectangle to draw on the screen Starting with \nthe UML diagram for the Rectangle class  \n60Manning Publications Co  To comment go to  liveBook   \nThe UML diagram shows the attributes encapsulated in the class necessary to render a \nrectangle on screen All of these attributes are initialized during the cons truction of a Rectangle \nobject  \n x y width height  define the position of the Rectangle on screen and the dimensions \nto use when drawing it  \n pencolor fillcolor  define the colors used to outline the Rectangle and fill it  \n dirx diry  the direction of movement relative to the screen x and y axes these are \neither 1 or 1 \n speedx speedy  the speed at which the Rectangle is moving in pixels per update  \nThe diagram also includes the definition of three methods the class supports  \n setpencolor  provides a mechanism to set the pen color used to draw the rectangle \ninstance object  \n setfillcolor  provides a mechanism to set the fill color used to fill a rectangle \ninstance object  \n draw  draws a Rectangle object instance on the screen  \nThis UML diagr am is converted to a Python class definition in code The example code in \nthe repository has docstring comments however here theyve been removed as I think they \nare a distraction in the book Heres the Rectangle class based on the above diagram from \nCH05example02 application  \n  \n61Manning Publications Co  To comment go to  liveBook  class Rectangle  \n    def init  \n        self \n        x int \n        y int \n        width int  \n        height int  \n        pencolor tuple  COLORPALETTE0  \n        fillcolor tuple  COLORPALETTE1  \n        dirx int  1  \n        diry int  1  \n        speedx int  1  \n        speedy int  1  \n     \n        selfx  x  \n        selfy  y  \n        selfwidth  width  \n        selfheight  height  \n        selfpencolor  pencolor  \n        selffillcolor  fillcolor  \n        selfdirx  1 if dirx  0 else 1 \n        selfdiry  1 if diry  0 else 1 \n        selfspeedx  speedx  \n        selfspeedy  speedy  \n \n    def setpencolorself color tuple  Rectangle  \n        selfpencolor  color  \n        return self  \n \n    def setfillcolorself color tuple  Rectangle  \n        selffillcolor  color  \n        return self  \n \n    def drawself  \n        arcadedrawxywhrectanglefilled  \n            selfx selfy selfwidth sel fheight selffillcolor  \n         \n        arcadedrawxywhrectangleoutline  \n            selfx selfy selfwidth selfheight selfpencolor 3  \n         \nThis class defines a simple Rectangle  object The object is initialized with the x and y \ncoordinates the width and height pen and fill colors the direction and speed of motion of the \nRectangle In the arcade module the screen origin is in the lower left corner which is how \nmost of us th ink about x and y axes on paper but is different from many other screen rendering \ntools  \nModifying the values of the x and y attributes moves the Rectangle around the screen \nmaintained by the arcade module and the instance of the Window class in the appli cation The \nWindow class has two methods used to animate the objects on the screen onupdate  and \nondraw  The first updates the position of all the objects to render on the screen and the \nsecond draws those updated objects on the screen The onupdat e method is called every \nrefresh iteration and is where the application modifies the position of the rectangles in the \nselfrectangles  collection The onupdate  method looks like this  \n  \n62Manning Publications Co  To comment go to  liveBook  def onupdateself deltatime  \n    for rectangle in selfrectan gles \n        rectanglex  rectanglespeedx  \n        rectangley  rectanglespeedy  \nThis code iterates through the collection of rectangles and updates the position of each one \nby its x and y speed values changing its position on the screen  \nThe updat ed rectangles are drawn on the screen by the Window instance method \nondraw  which looks like this  \ndef ondrawself  \n     Clear the screen and start drawing  \n    arcadestartrender  \n \n     Draw the rectangles  \n    for rectangle in selfrectangles  \n        rectangledraw  \nEvery time the ondraw  method gets called the screen clears and the selfrectangles  \ncollection is iterated through and each rectangle has its draw method called  \nThe Rectangle class has behavior defined by the methods setpenco lor  \nsetfillcolor and draw  These methods use and alter the state data encapsulated by \nthe class definition They provide the API you interact with when using the class Using the \nmethods abstracts away having to modify the state data directly  \nLook at the setpencolor  and setfillcolor  methods and youll see they return \nself Returning self can be useful to chain methods of the class together into a series of \noperations Heres an example from CH05example02py  using the Rectangle class Th is \ncode changes the pen and fill colors when the arcade schedule functionality code is called every \nsecond  \ndef changecolorsself interval  \n    for rectangle in selfrectangles  \n        rectanglesetpencolorchoiceCOLORPALETTEsetfillcolor  \n            choiceCOLORPALETTE  \n         \nThe changecolors  method of the Window instance is called by an arcade schedule \nfunction every second It iterates through the collection of rectangles and calls the \nsetpencolor  and setfillcolor  in a chained manner to set random colors picked \nfrom the globally defi ned COLORPALETTE  list \nWhen the CH05example02  application runs it creates a window on the screen and \nanimates a vertically aligned rectangle up and right at a 45 degree angle It also changes the \npen and fill colors of the Rectangle every second the ap plication runs Heres a screenshot of \nthe running application  \n63Manning Publications Co  To comment go to  liveBook   \nPROPERTIES  \nAs mentioned earlier direct access to the attributes of a class should often be the default The \nRectangle example above follows this practice However there are situations where youll want \nmore control over how the attributes of a class are used or changed  \nThe definition of the Rectangle class includes attributes for the x and y origin of the \nRectangle which helps draw it in the window That window has dimensio ns and if you run the \nCH05example02  application long enough youll see the Rectangle move off the screen  \nCurrently the origin of a Rectangle instance is set to any integer value No known screen \nhas a resolution as large as the range of integer value s and none at all deal with negative \nnumbers directly The window declared in the application has a width of 600 and a height of \n800 in pixels  \nThe boundaries of where rectangle objects can be drawn should be constrained to within \nthose window dimensions  Constraining the values of x and y means having code in place to \nlimit the values that can be assigned to them Your goal is to make the rectangle bounce \naround within the screen window  \nIf youve come from other languages supporting object oriented progr amming you might \nbe familiar with getters and setters These are methods provided by the developer to control \naccess to attributes of a class instance Those methods also give the developer a place to insert \nbehavior when the attributes are retrieved or m odified The behavior you want to insert into \nsetting or getting the x and y values is to limit the range of values those attributes can be set \nto \nAdding getter and setter methods to the Rectangle x and y attributes could be done by \ndefining methods like this \n64Manning Publications Co  To comment go to  liveBook  def getxself  \ndef setxself value  \ndef getyself  \ndef setyself value  \nUsing these getter and setter functions also means changing the example code from this  \nrectanglex  1  \nrectangley  1  \nto this  \nrectanglesetxrectanglegetx  1  \nrectanglesetyrectanglegety  1  \nIn my opinion using getters and setters works but sacrifices readability when compared \nto the direct attribute access versionsyntax  \nBy using Python property decorators you can control how class attributes are a ccessed \nand modified while still using the direct attribute access syntax The Rectangle class can be \nmodified to use property decorators offering this behavior The updated portion of the \nRectangle class from example program CH05example03 is shown belo w \n  \n65Manning Publications Co  To comment go to  liveBook  class Rectangle  \n    def init  \n        self \n        x int \n        y int \n        width int  \n        height int  \n        pencolor str  BLACK  \n        fillcolor str  BLUE  \n     \n        selfx  x  \n        selfy  y  \n        selfwidth  width  \n        selfheight  height  \n        selfpencolor  pencolor  \n        selffillcolor  fillcolor  \n \n    property  \n    def xself  \n        return selfx  \n \n    xsetter  \n    def xself value int  \n        if selfx  value  0  \n            selfx  0  \n        elif selfx  selfwidth  value  Screenmaxx  \n            selfx  Screenmaxx  selfwidth  \n        else \n            selfx  value  \n \n    property  \n    def yself  \n        return selfy  \n \n    ysetter  \n    def yself value  \n        if selfy  value  0  \n            selfy  0  \n        elif selfy  selfheight  value  Screenmaxy  \n            selfy  Screenmaxy  selfheight  \n        else \n            selfy  value  \nThe first thing to notice is the attributes x and y are prefixed with a single underscore  \ncharacter Using the underscore this way is a convention to indicate the attribute should be \nconsidered private and not accessed directly It doesnt enforce any notion of a private \nattribute however  \nThe second thing to notice is the new decorated methods in the class For example the two \nnew methods for accessing the selfx  attribute are  \n  \n66Manning Publications Co  To comment go to  liveBook      property  \n    def xself  \n        return selfx  \n \n    xsetter  \n    def xse lf value  \n        if not 0  value  SCREENWIDTH  selfwidth  \n            selfdirx  selfdirx  \n        selfx  absselfx  value  selfdirx  \nThe property  decorator over the first def xself  function defines the getter \nfunctionality in t his case just returning the value of selfx  \nThe xsetter  decorator over the second def xself value  function defines the setter \nfunctionality Inside the function selfx is constrained to within the screen x axis minimum \nand maximum dimensions If s etting the value of selfx  would place any part of the \nRectangle outside the screen area the direction of travel is negated to start it moving in the \nopposite direction  \nHaving the above decorated methods in the Rectangle  class means code like this works  \nagain  \nrectanglex  1  \nThe program statement appears to be setting the rectangle instance x attribute directly \nbut the decorated methods above are called instead The  operation calls the getter method \nto retrieve the current value of selfx  adds 1 to that value and uses the setter method to \nset selfx to that new value If the resulting change would place the Rectangle outside of \nthe screen dimensions the direction of travel along the x axis is reversed  \nThe beautiful part of this is you can defi ne your classes using direct attribute access initially \nIf it becomes necessary to constrain access to an attribute you can define getter and setter \nproperty methods Existing code using your class doesnt have to change at all From the point \nof view of  the caller the API of the class is the same  \nTake note of another feature of using setter and getter decorated methods You dont need \nto create both setter and getter decorated functions on attributes You can create only a getter \nwhich creates a readonly attribute Likewise you can create only a setter creating a write \nonly attribute  \nThere is also a deleter  decorator to delete an attribute but this feature is rarely used  \nDECORATORS  \nBefore moving on much further lets talk about decorators In Python a decorator is a way to \nextend or modify the behavior of a function without changing the function itself Decorating a \nfunction sounds confusing but an example will help make the intent clearer As has been \nstated before functions are objects in Python One thing this means is functions can be passed \nto and returned from other functions like any other object  \nThe function defined below is used to demonstrate the use of decorators  \n  \n67Manning Publications Co  To comment go to  liveBook  from time import sleep  \n \ndef complextask delay \n    sleepdelay  \n    return task done \nWhen the above function is called it uses the delay parameter to emulate some complex \ntask that takes time to perform It then returns the string task done when the function ends  \nSuppose its required to log infor mation before and after this function is called that includes \nhow long it took to execute That could be done by adding the logging information to the \nfunction itself but that creates code maintenance issues as every function to be timed would \nhave to be updated if the timing code changes You can instead create a decorator function to \nwrap complextask  with the desired new functionality The decorator function looks like this  \ndef timingdecoratorfunc  \n    def wrapperdelay  \n        starttime  time  \n        printstarting timing  \n        result  funcdelay  \n        printftask elapsed time time  starttime  \n        return result  \n    return wrapper  \nThis looks odd because the timingdecorator  function defines another function inside \nitself c alled wrapper  The timingdecorator  outer function also returns the wrapper  inner \nfunction This is perfectly fine Python syntax because functions are objects the wrapper  \nfunction is created and returned when the outer timingdecorator  function is execute d \nThe func parameter of the timingdecorator  is the function object being decorated The \ndelay  parameter of the wrapper  function is the parameter passed to the decorated function  \nThe code inside the wrapper  function will execute including calling the de corated func \nobject An example will help clarify whats going on  \nnewcomplextask  timingdecoratorcomplextask  \nprintcomplextask15  \nHere the complextask  function object is passed to the timingdecorator  function Notice \nthere are no parenthesis on complextask  the function object itself is being passed not the \nresults of calling the function The new variable newcomplextask  is assigned the return value \nof timingdecorator  and since it returns the wr apper function newcomplextask  is a \nfunction object  \nThe print statement calls newcomplextask  passing it a delay value and printing the \nfollowing information  \nstarting timing  \ntask elapsed time 16303961277008057  \ntask done  \nThe output above shows the fu nctionality added by timingdecorator  and the original \nfunctionality of complextask  that is executed  \n68Manning Publications Co  To comment go to  liveBook  The example is interesting but not that useful as every invocation of complextask  would \nhave to be passed as a parameter to timingdecorator  to get the additional timing \nfunctionality Python supports a syntactic shortcut making this easier By adding \ntimingdecorator  right before the definition of the complextask  function This has the \neffect of decorating complextask  and creating a callable instanc e of the now wrapped \nfunction This is shown below  \ntimingdecorator  \ndef complextaskdelay  \n    sleepdelay  \n    return task done  \n \nprintcomplextask15  \nThe CH05example04  program demonstrates wrapping the task directly and using the \ndecorator sy ntax and when run produces this output  \nstarting timing  \ntask elapsed time 15009040832519531  \ntask done  \n \nstarting timing  \ntask elapsed time 15003101825714111  \ntask done  \nThe output above shows complextask  running but it also indicates the \ntimingdecorated  has wrapped complextask  with additional functionality that is also \nrunning and generating log messages about the elapsed time The complextask  code hasnt \nchanged to provide this the wrapper  function  inside timingdecorator  does this work Also \nany function with the same signature as complextask  can be decorated with the \ntimingdecorator  to generate timing information  \n513  Inheritance  \nBeing able to merge data and behavior relevant to that data into cla sses gives you very \nexpressive ways to structure your programs When building classes there arise situations \nwhere functionality is common to more than one class As a developer it becomes part of our \nnature to follow the DRY Dont Repeat Yourself princi ple You can follow this principle when \ncreating objects in Python by using inheritance  \nLike parents and children a parents child inherits attributes and behavior from the parent \nbut arent exact duplicates When talking about object oriented programmin g class design the \nterms parent and child are used because the metaphor works well The terms base class \nand derived class can also be used to indicate the parentchild relationship  \nYoull also see the words like superclass used to refer to the  parent and subclass as the \nchild These are all terms applied to the relationship between objects when talking about \ninheritance  \nOne of the reasons to use inheritance is to add attributes and behavior unique to the child \npossibly modifying the ones inherited from the parent Its also useful to derive multiple \n69Manning Publications Co  To comment go to  liveBook  children from a parent class each with its own set of unique attributes  and behaviors but still \nimbued with characteristics from the parent  \nTo create an inheritance relationship between two classes in Python is performed like this  \nclass ParentClass  \n    pass \n \nclass ChildClassParentClass  \n    pass \nThe ParentClass  definiti on creates a root level class definition The definition of the \nChildClass  includes the class to inherit from inside the parenthesis in the example above it \ninherits from ParentClass  The pass statement in both the class definitions above is a nop \nno ope ration in Python and is necessary to make the class definitions syntactically correct \nbut having no functionality  \nIn the CH05example02 code a Rectangle  class was created with a position on the \nscreen a pen color to draw with and a color to fill the Rectangle What if you wanted to create \nother shapes like squares and circles Each shape would have a position and dimension on \nthe screen and a pen and fill color  \nThe direct approach would be to create complete Square  and Circle  class definitions and \ndraw instances of each on the screen Each class would have all of the attributes and methods \nof the Rectangle  class but with a different draw  method to draw that unique shape Creating \nseparate classes for Square  and Circle  would work for the relatively small number of shapes \ninvolved but wouldnt scale well if many more shapes were required  \nThis presents an opportunity to use inheritance to gather these attributes and their \nassociated behavior into a parent class you could call Shape This Shape parent class would be \nused to collect the common attributes and methods in one place Any shape to be drawn on \nscreen would be a child of the Shape parent  \nYoull start by reproducing the functionality of the CH05example03  application by making \nuse of inherita nce The examples below come from the CH05example04  application The \nShape  and Rectangle  inheritance is shown with the UML diagram below  \n70Manning Publications Co  To comment go to  liveBook   \nThe diagram shows the attributes and methods of the Rectangle  class definition have \nmoved to the Shape  class and  the Rectangle  now inherits from it The Shape  class name is in \nitalic to indicate its an abstract class and shouldnt  be instantiated directly The draw  method \nis also in italic because it exists in the Shape  definition but has no functionality of its  own The \nfunctionality must be provided by the child class in this case Rectangle  \nBecause the Shape  class is essentially what the Rectangle  was the code wont be shown \nhere Instead the updated Rectangle  class is shown below  \nclass RectangleShape  \n \n    def drawself  \n        arcadedrawxywhrectanglefilled  \n            selfx selfy selfwidth selfheight selffillcolor  \n         \n        arcadedrawxywhrectangleoutline  \n            selfx selfy selfwidth selfheight  selfpencolor 3  \n         \nThe first line of the Rectangle  class has been modified to include the Shape  within \nparenthesis This is how the Rectangle  class inherits from the Shape class  \nThe Rectangle has been refactored to have only a unique draw  method to draw itself on \nthe screen The draw  method overrides the empty one provided by the Shape  class \n71Manning Publications Co  To comment go to  liveBook  Everything else is managed and maintained by the Shape  class Even the init  \nconstructor has been removed because the constructor from the Shape  class is sufficient  \nIts reasonable to ask whats the advantage of splitting the original Rectangle into two new \nclasses Shape and Rectangle Youll see that in the next examples when Square and Circle \nshapes are added to the application For now gettin g the application running presents a screen \nexactly as seen before a single rectangle bouncing around the screen and changing colors  \n \nMULTIPLE SHAPES  \nNow that you have an inheritance structure defined you can use it to create multiple kinds of \nshapes with different attributes and behavior Adding a Square  and a Circle  class to the \ninheritance structure is straightforward Each additional class inherits  from a parent class \nproviding the most c ommon attributes and methods useful to the n ew child class A UML \ndiagram including Shape  Rectangle  Square  and Circle  classes is shown below  \n72Manning Publications Co  To comment go to  liveBook   \nThis diagram shows a few interesting things about the inheritance structure Notice the \nSquare  class inherits from Rectangle instead of Shape  This is because a square is a special \ncase of a rectangle with the height and width being equal to each other  \nThis brings up a concept about inheritance and the relationships between objects As just \nmentioned a Square  ISA Rectangle  and a Rectangle  ISA Shape  This also means a Square  \nISA Shape  as well Below is the class definition code for the Square  class  \n  \n73Manning Publications Co  To comment go to  liveBook  class SquareRectangle  \n \n    def init  \n        self \n        x int \n        y int \n        size int  \n        pencolor tuple  COLOR PALETTE0  \n        fillcolor tuple  COLORPALETTE1  \n        dirx int  1  \n        diry int  1  \n        speedx int  1  \n        speedy int  1  \n     \n        superinit  \n            x y size size pencolor fillcolor dirx dir y speedx                \nspeedy \n         \nThe Square  class has an init  constructor even though its parent class the \nRectangle doesnt The Square  provides this unique init  method because it only needs \nto get a single dimension value size and not height and width It then uses the parameters \nin the init  method when it makes a call to superinit  Because the \nRectangle  class doesnt have an init  method the superinit  calls the \nShape  class constructor passing th e size parameter for both height  and width  to set the \nattribute dimensions  \nThe Square  class doesnt need to provide a draw  method as the one inherited from the \nparent Rectangle  class works fine just with the height and width attributes having the same \nvalue  \nThe Circle  ISA Shape  because it inherits directly from the Shape  class The code that \ncreates the Circle  class is shown below  \n  \n74Manning Publications Co  To comment go to  liveBook  class CircleShape  \n \n    def init  \n        self \n        x int \n        y int \n        radius int  \n        pencolor tuple  COLORPALETTE0  \n        fillcolor tuple  COLORPALETTE1  \n        dirx int  1  \n        diry int  1  \n        speedx int  1  \n        speedy int  1  \n     \n        superinit  \n            x \n            y \n            radius  2  \n            radius  2  \n            pencolor  \n            fillcolor  \n            dirx \n            diry \n            speedx  \n            speedy  \n         \n \n    def drawself  \n        radius  selfwidth  2  \n        centerx  selfx  radius  \n        centery  selfy  radius  \n        arcadedrawcirclefilledcenterx centery radius selffillcolor  \n        arcadedrawcircleoutlinecenterx centery radius selfpencol or 3 \nLike the Square  class the Circle  provides its own init  constructor method so the \ncaller can provide a radius  for the circle The radius  parameter is used in the \nsuperinit  call to set the height and width dimensions of the area the Circle is \nwithin  \nUnlike the Square  class the Circle  does provide a unique draw  method because it calls \ndifferent drawing functions in the arcade module to draw itself on screen  \nWhen the CH05example05 application runs it creates a window with three d ifferent \nshapes bouncing around within the window and changing colors Initially it looks like this  \n75Manning Publications Co  To comment go to  liveBook   \nNOTE  \nInheritance in object oriented programming is a feature allowing you to create useful and \npowerful class hierarchies Keep in mind that just like human genealogies the descendants \nbecome less and less like the root parent class as you descend the tree Large hierarchies of \nclasses can become complex to use and understand and the root class functionality can \nbecome wholly obscured in distant child classes  \nIn my work Ive never gone beyond four levels in any parentchild relationships in class \nhierarchies Ive built  \n514  Polymorphism  \nThere is another feature of inheritance that can be useful when creating class hierarchies and \nits called polymorphism  The word polymorphism means many forms and in relation to \nprogramming it means calling a method of multiple objects by the same method name but \ngetting different behavior depending on which instance of an object is called  \nThe CH05example05  applic ation has already taken advantage of polymorphism when \nrendering the different shapes in the window Each of the shapes in the program supports a \ndraw  method The Rectangle  class provides a draw  method to render itself on the \napplication screen The Square class uses the inherited Rectangle  draw  method but with a \nconstraint on the height and width to create a Square  The Circle  class provides its own \ndraw  method to render itself The Shape  root parent class also provides a draw  method \nbut it has  no functionality  \nBecause the Rectangle  Square  and Circle  classes all have an IS A relationship with the \nShape  class they all can be considered instances of Shape  and use the methods provided by \nthe class  \n76Manning Publications Co  To comment go to  liveBook  This is what happens in the Display  class when the onupdate  ondraw  and \nchangecolors  methods are called The Display  class has a collection of shapes in the \nselfshapes    list created in the constructor For example here is the code in the \nondraw  method  \ndef ondrawself  \n \n     Clear the screen and start drawing  \n    arcadestartrender  \n \n     Draw the rectangles  \n    for shape in selfshapes  \n        shapedraw  \nThis code is called every time the system wants to draw the objects on the screen which \nis approximately 60 times a second when using the arcade module When the method is called \nthe first thing it does is clear the screen  \nThen the code takes advantage  of polymorphism to iterate through the list of shapes and \ncall the draw  method of each one It doesnt matter that each shape is different they all \nsupport a draw  method and all the shapes are rendered on screen  \nAny number of different shapes could  be defined in a class and so long as they support a \ndraw  method that renders the shape on the screen the above loop would work  \nNOTE \nIt is common to use real world objects or concepts when writing about inheritance The \nexamples above do exactly this  using the idea of shapes rectangles squares and circles \nUsing concepts already familiar to you is a useful metaphor because they are things you know \nalready There are plenty of other new concepts presented when talking about inheritance to \nthink abou t using familiar ideas reduces the cognitive load while learning  \nHowever the use of this metaphor can get in the way of creating useful hierarchies of \nclasses in your applications Because weve been talking about things that have behavior like \nactual o bjects in the real world this can color how you think about your class design The \nobjects you create from the classes you design dont have to model real world objects at all  \nMany of the objects which are useful to model with classes have no analog in t he real world \nand trying to adhere to the analogy too strictly can hinder the work youre trying to accomplish  \n515  Composition  \nIn the inheritance section you saw the relationships between the Rectangle  Square  Circle  \nand Shape  classes These relationships  allowed the child classes to inherit attributes and \nbehavior from their parent class This creates the idea that a Rectangle  ISA Shape  and a \nSquare  ISA Rectangle  which also means a Square  ISA Shape  as well  \nThese relationships also imply a certain si milarity between attributes and behaviors of the \nparent classes and the child classes that inherit from them But this isnt the only way to \ninclude attributes and behavior into classes  \nLook at the Shape  class it has two attributes for pen and fill color  These two attributes \nprovide color to the shape and are distinguished from each other by their names But they \n77Manning Publications Co  To comment go to  liveBook  offer the same thing a color most likely from a palette of colors the system can create This \nmeans the color is a common attribute within th e Shape  itself and expressed twice  \nIts possible with inheritance to handle this and add to the hierarchy in the examples by \ncreating a Color  class having pen and fill color attributes and having the Shape  class inherit \nfrom it  \nDoing this would work but  the inheritance feels awkward You can make a Shape  have an \nISA relationship to a Color  class in code but logically it doesnt make sense A shape is not \na color and it doesnt fit the IS A mental model of an inheritance structure  \nInstead of trying to  force inheritance to provide the desired behavior you can use \ncomposition Youve already been using composition when giving classes attributes that are \nintegers and strings You can take this further and create custom classes to be used as \nattributes c omposing behavior into your own classes  \nCreating a new class Color  provides a consistent abstraction for color in the application It \nhas a class level definition for the colors supported and has a mechanism to allow only defined \ncolors to be set  \nThe UM L diagram showing the addition of a Color class to the hierarchy structure looks like \nthis \n78Manning Publications Co  To comment go to  liveBook   \nThe Color class is connected to the Shape class as a composite indicated in the diagram \nabove by the connecting line with the filled black diamond symbol Here i s what the Color  \nclass looks like from the CH05example06  application program  \n  \n79Manning Publications Co  To comment go to  liveBook  dataclass  \nclass Color  \n \n    PALETTE    \n        arcadecolorBLACK  \n        arcadecolorLIGHTGRAY  \n        arcadecolorLIGHTCRIMSON  \n        arcadecolorLIGHTBLUE  \n        arcadecolorLIGHTCORAL  \n        arcadecolorLIGHTCYAN  \n        arcadecolorLIGHTGREEN  \n        arcadecolorLIGHTYELLOW  \n        arcadecolorLIGHTPASTELPURPLE  \n        arcadecolorLIGHTSALMON  \n        arcadecolorLIGHTTAUPE  \n        arcadecolorLIGHTSLATEGRAY  \n     \n    color tuple  PALETTE0  \n    color tuple  fieldinitFalse  \n \n    property  \n    def colorself  tuple  \n        return selfcolor  \n \n    colorsetter  \n    def colorself value t uple  None \n        if value in ColorPALETTE  \n            selfcolor  value  \nThe Color  class moves the allowable color list within the scope of the class and out of the \nglobal module namespace Its also a Python dataclass which can make defining sim ple classes \nthat are mostly data easier to implement The class provides getter and setter property \ndecorators to make using the color within the class more straightforward  \nIn order to use the Color  class the Shape  class is modified to use it for the pen  and fill \ncolor attributes The init  constructor for the class is shown below  \n  \n80Manning Publications Co  To comment go to  liveBook  class Shape  \n     \n    def init  \n        self \n        x int \n        y int \n        width int  \n        height int  \n        pen Color  Color  \n        fill Color  Color  \n        dirx int  1  \n        diry int  1  \n        speedx int  1  \n        speedy int  1  \n     \n        selfx  x  \n        selfy  y  \n        selfwidth  width  \n        selfheight   height \n        selfpen  ColorColorPALETTE0  \n        selffill  ColorColorPALETTE1  \n        selfdirx  1 if dirx  0 else 1 \n        selfdiry  1 if diry  0 else 1 \n        selfspeedx  speedx  \n        selfspeedy  speedy  \nThe attribu te names for pen and fill color have been simplified to just pen and fill because \nthey are both Color  class instances The initial default values have been set to black for the \npen and light gray for the fill colors Adding the Color class to the Shape  class this way creates \na HASA relationship a Shape  has Color  attributes but isnt a Color itself \nThe setpencolor  and setfillcolor  methods have also been modified to use the \nnew pen and fill attributes Setting a color for the pen now looks like thi s \ndef setpencolorself color tuple  Rectangle  \n    selfpencolor  color  \n    return self  \nRunning the CH05example06  application produces a screen exactly like youve seen \nbefore three shapes bouncing around the window and changing colors every second  \nThe use of composition gives you a way to add attributes and behavior to a class without \nhaving to create contrived hi erarchies of inheritance  \n52 Summary  \nCreating classes and class hierarchies gives you another way to create code thats clean and \nwellcontrolled in its usage Classes are another avenue to give your users an API into \napplication functionality  \nA class defin ition also provides another way to create namespaces and control scope A \nmodule provides a namespace and classes defined within that module creates more \nnamespaces within it The attributes and methods of a class are within the scope of instance \nobjects of the class  \n81Manning Publications Co  To comment go to  liveBook  In this chapter youve learned about classes inheritance and how to create class \nhierarchies Using classes is a powerful way to take advantage of code reuse and adhere to \nthe DRY principle  \nYouve also learned about polymorphism and how that can make using related classes more \nstraightforward by taking advantage of the relationships inherent in class hierarchies  \nLastly youve seen how using composition can be used to apply the single responsibility \nprinciple to class design to avoid con trived and disjointed class design  \nYouve moved closer to particular elements of the developer domain and are using \nbinoculars to get more detailed views of those domains Well continue to scan useful and \npowerful domains for insights on our journey  \n  \n82Manning Publications Co  To comment go to  liveBook  6 \nExceptional Events  \nThis chapter covers  \nWhat an exception is\nWhy they occur in programs\nHow to handle exceptions\nHow to raise an exception\nCreating custom exceptions\nDeveloping software can lead you to think in a binary way Things are either on or off the y \nwork or dont work something is either True or False However the real world is far from \nbinary it is a sea of variety The software you create for yourself and others lives in that \nworld  \nThe real world is not black or white it is an infinitely va riable field of grey Computer \nsystems that run software lose power and fail The networks connecting systems are slow \nintermittent or unreliable The storage systems software depends on to save information \nbecome full unreliable or fail outright The u sers of your software make incorrect assumptions \nand enter wrong or misleading data  \nIn addition to the sometimes problematic world where software runs you will create bugs \nin the code you write Software bugs are errors or failures causing an applicatio n to produce \nunexpected results Most software applications providing something useful are complex enough \nthat bugs will creep in These come from wrong assumptions on the part of the developer \noversights and just everyday mistakes  \nAll of this shouldnt discourage you as a developer but broaden the way you think about \ncreating software applications The problems outlined above can be managed and handled and \nare part of the challenge of becoming a developer How you handle these chall enges is \ndependent on the requirements of the application and its users If youre knocking together a \nquick program to solve an issue for yourself creating something that might crash if given \nincorrect input is probably acceptable On the other hand if youre creating something \n83Manning Publications Co  To comment go to  liveBook  hundreds or thousands of users will access it will take longer to develop and build in code to \nhandle conditions that might arise  \nMany of you might already be familiar with a Venn diagram like this  \n \nThis diagram shows the re lationship between three things related to the development of \nsoftware applications  \nGood in this context represents the software application quality is good it meets the \nrequirements and the users expectations with a low occurrence to bugs  \nFast and Che ap are a little harder to define as they relate to time and money as the adage \ngoes  \nThe intersection of Good and Cheap can represent the time to develop a software \napplication and indicates taking more time to create This can happen if an inexperienced \ndeveloper or small team of developers works for a period of time to create a good application  \nThe intersection of Good and Fast also represents time and indicates creating the \napplication quickly with good quality This almost always means more experien ced developers \nable to create an application in a shorter amount of time  \nThe intersection of Fast and Cheap means making tradeoffs in quality to create the \napplication quickly An application created this way might be acceptable for a one off utility \napplication but generally should be avoided  \nOnly the intersection of two of the circles can ever be achieved even though the diagram \nshows the intersection of all three circles The intersection of all three circles is where magical \nunicorns live Trying to  find a path to the land of the unicorns will keep you from actually \ncreating something useful  \nA software application with good quality meets the needs of its users in a couple of ways \nIt provides the functionality intended and the user expect and it do esnt behave in unexpected \nways if things go wrong  \nAs mentioned during the introduction to this chapter in the real world unexpected events \nhappen all the time Storage devices become full networks disconnect and users enter \nincorrect data unintentio nally or otherwise  \nUnexpected events can occur at any time and handled in Python by raising an exception  \n84Manning Publications Co  To comment go to  liveBook  61 Exceptions  \nPython handles unexpected events in running applications by raising exceptions You can think \nof these as exceptional conditions occurrin g while an application runs and theyre not all \nnecessarily errors  \nIf youve written any Python programs at all youve seen exceptions raised A simple math \nerror in a program statement will raise an exception as shown below  \n print100  \nTraceback most recent call last  \n  File stdin line 1 in module  \nZeroDivisionError division by zero  \nThe exception ZeroDivisionError  is raised by Python because the results of dividing 10 \nby 0 are undefined The exception ZeroDivisionErro r is a child or sub class of the base \nException  class The Exception  class is the base or parent of most other exceptions Python \ncan raise In this way the Exception  class is precisely like the Shape class is the parent of \nthe Rectangle  class in the previous chapter  \nWhen an exception occurs in a program Python will stop executing your program code and \nstart working its way back up the call stack looking for an exception handler  \nThe call stack is the series of function calls leading to the code that raised the exception \nPython is looking for a handler to intercept the exception and do something with it If no \nexception handler is found Python exits the application and prints a stack trace  \nThe stack trace is a chronological listing des cending from the root of the application down \nthe series of functions called to reach the point the exception was raised Each function listed \nin the stack trace also shows the line number in the module where the function in the stack \ntrace is called The stack trace continues until the last function called where the line number \nthat raised the exception is displayed  \nThe example program CH06example01py  demonstrates this  \ndef funca  \n    dividend  floatinputEnter a dividend value   \n    divisor  floatinputEnter a divisor value   \n    result  funcbdividend divisor  \n    printfdividing dividend by divisor  result  \n \ndef funcbdividend float divisor float  float \n    return funccdividend divisor  \n \ndef funccdividend float divisor float  float  \n    return dividend  divisor  \n \nfunca  \nThis program shows funca getting input from the user for the dividend  and divisor  \nand converting those input string s to floating point values It then calls funcb  which calls \nfuncc  which performs the division operation on the two passed parameters Running this \nprogram produces the following output for the values entered at the prompts  \n  \n85Manning Publications Co  To comment go to  liveBook  Enter a dividend value  122 \nEnter a divisor value 0  \nTraceback most recent call last  \n  File path to code codeprojectCH0 6example01py line 20 in module  \n    funca  \n  File path to code codeprojectCH0 6example01py line 8 in funca  \n    result  funcbd ividend divisor  \n  File path to code codeprojectCH0 6example01py line 13 in funcb  \n    return funccdividend divisor  \n  File path to code codeprojectCH0 6example01py line 17 in funcc  \n    return dividend  divisor  \nZeroDivisionError  float division by zero  \nThe code shows Python encountering an exception in funcc  when it tries to divide 122 \nby 0 then going back up the call stack to funcb  and then to funca  looking for a handler \nto intercept the exception Since there isnt a  handler Python exits the program prints the \nexception and stack trace that caused the application to crash  \nAnother possible exception the program can raise happens if the user enters a string at \neither of the two prompts that cant be converted to a floating point value Here is an example \nof running the program raising that exception  \nEnter a dividend value Python  \nTraceback most recent call last  \n  File path to code projectCH0 6example01py line 20 in module  \n    funca  \n  File path to code codeprojectCH0 6example01py line 6 in funca  \n    dividend  floatinputEnter a dividend value   \nValueError could not convert string to float Python  \nIn this example the stack trace only shows funca  because the ValueError  exception \nwas raised within that function when the program tried to convert the string Python to a \nfloating point value  \n62 Handling Exceptions  \nHandling exceptions in Python is done by using a try  except  block in your program code  \ntry \n     code that might raise an exception  \nexcept Exception as e  \n     code that executes if an exception occurs  \nelse \n     code that executes if no exception occurs optional  \nfinally  \n     code that executes whether an exception occurs or not optional  \nThe try statement begins a block of code that might raise an exception your program can \nhandle The except Exception as e  statement ends the block of code and is where an \nexception is intercepted and assigned to the e variable The use of e is not required syntax \nand the variable name e is just my convention  \nBecause of the except  Exception as e  in the handler part of the block the example \nabove will catch any exception raised by the code within the try  except  block  \n86Manning Publications Co  To comment go to  liveBook  The else and finally  clauses of the try  except  block are optional and used less often \nin practice  \n621  Handle An Exception If the Code Can Do Something About It  \nWhen thinking about exceptions its easy to get into a frame of mind to handle them \neverywhere they might occur Dep ending on where in the program the exception occurs this \nmight be a logical choice  \nOften exceptions happen within the context of a function where the code is acting on passed \nparameters At this point the scope of work the code is performing is narrow and the broader \ncontext of what the program is trying to accomplish is at a higher level  \nWhen an exception occurs in a function its possible the exception handler can make choices \nthat make sense within the context of the function The handler might be a ble to retry the \noperation for a fixed number of attempts before letting the exception flow upwards in the call \nstack to a higher context It could make assumptions based on the exception and correct or \nchange the state of data to make the code continue wi thout raising an exception  \n622  Allow Exceptions to Flow Upward In Your Programs  \nUnless the code where the exception occurs can do something useful about the exception its \nbetter to let the exception flow upwards through the call stack to a higher level of context  \nAt higher levels of context decisions can be made about how to handle the exception The \nhigher level context might be the point where choices about retrying operations are made At \nthe higher levels of context more information might be available about what the program is \ntrying to accomplish and what alternative paths can be taken At this point you can decide \nwhat information to present to the user so they can make choices about how to proceed  \nThe program should also log the exception and the s tack trace associated with it so the \napplication developers have information about the path taken that generated the exception \nThis is incredibly useful information to have when debugging an application and trying to \nresolve problems  \nWhere in the code t o log exceptions depends partially on whether the exception was \nhandled or not If the exception was handled it may not be necessary to log information about \nit However it might be useful to output a log message not as an error but at the information \nlevel to make it visible  \nIts also possible an exception is fatal to the program and nothing can be done other than \nlogging the exception stack trace and exiting the program Exiting an application is an entirely \nreasonable course of action for some appli cations like utility programs and command line \ntools  \n623  Informing the User  \nKeeping the application user informed about the status of an application and the events \noccurring in it is also useful An exception handler in the right context of the application flow \ncan inform the user to take steps towards corrective action allowing the application to retry an \naction and succeed  \n87Manning Publications Co  To comment go to  liveBook  The type of exception and the message attached to it can help generate the message to \npresent to the user  \n624  Never Silence an Exception  \nIts possible to handle an exception and silence it Silencing an exception is shown in the next \ntwo examples  \ntry \n     some code that might raise an exception  \nexcept \n    pass \nand this  \ntry \n     some code that might raise an exception  \nexcept Exceptio n \n    pass \nThe first example catches all exceptions including system and keyboard events like CTRL \nC to exit a program which generates the exception KeyboardInterrupt This is a system \nexception and not necessarily an error just an exceptional event   \nThe second catches a narrower scope of exceptions many of which can be considered error \nconditions but its still far too broad  \nWorse than catching to broad a scope of exceptions the above code lets the exception pass \nsilently It doesnt inform the user or log the exception stack trace The user is deprived of \ninformation about why the application is malfunctioning and the developer isnt given any \ninformation about what the exception is or where its occurring  \nThe presence of either of these block s of code is an indication of a low quality application \nTrying to find the source of a problem where this pattern of code exists in an application is \nfrustrating and time consuming  \nEXAMPLE 1 IMPROVED  \nThe following example code acts on the discussion abo ve to show when to let exceptions flow \nupward in the calls stack and when an exception handler to be used to try and correct the \nsituation that caused the exception  \nThe program CH06example01py  can be improved to handle exceptions and provide a \nbetter user experience The program CH06example02py  demonstrates this improvement  \n  \n88Manning Publications Co  To comment go to  liveBook  def funca  \n    dividend  floatinputEnter a dividend value   \n    divisor  floatinputEnter a divisor va lue   \n    result  funcbdividend divisor  \n    printfdividing dividend by divisor  result  \n \ndef funcbdividend float divisor float  float  \n    return funccdividend divisor  \n \ndef funccdividend float divisor float  float  \n    return dividend  divisor  \n \nsuccessful  False  \nwhile not successful  \n    try \n        funca  \n    except ZeroDivisionError as e  \n        printfThe divisor cant be a zero value error e  \n    except ValueError as e  \n        print \n            fThe di vidend and divisor must be a string that represents a number error  \n            e \n         \n    else \n        successful  True  \n    finally  \n        if successful  \n            printThanks for running the program  \n        else \n            printTry entering a dividend and divisor again  \nIn the example above the functions funca  funcb  and funcc  are unchanged and \ndont catch exceptions They follow the pa ttern of letting any exceptions flow upward through \nthe stack to a higher level context  \nThat higher level context is where funca  Now there is a while loop around the function \nthat will keep trying funca  until it can complete successfully  \nWithin th e while loop there is a handler catching two exceptions ZeroDivisionError  and \nValueError  Both of these handlers prompt the user with information about what went wrong \nand provide advice about how to proceed  \nThe else clause of the handler only executes i f funca  can run successfully without \nraising an exception When this happens it sets the successful  variable to True which signals \nthe enclosing while loop to exit  \nThe finally  clause takes advantage of the state of the successful  variable to either \nindicate the program is done or encourage the user to try again  \nRunning this program with possible input from the user looks like this  \n  \n89Manning Publications Co  To comment go to  liveBook  Enter a dividend value Python  \nThe dividend and divisor must be a string that represents a number error could not \nconvert string to float Python  \nTry entering a dividend and divisor again  \nEnter a dividend value 122  \nEnter a divisor value 0  \nThe divisor cant be a zero value error float division by zero  \nTry entering a dividend and divisor again  \nEnter a dividend value  122 \nEnter a divisor value 34  \ndividing 122 by 34  35882352941176467  \nThanks for running the program  \nThis program follows most of the recommendations to handle exceptions  \n Allow the exceptions to flow upward to a higher context  \n Handle an exception if  the code can do something useful about it  \n Inform the user about the problem and suggest a solution  \n Dont silence an exception  \nThe program doesnt log the exception and the stack trace as this would be distracting \ninformation for the user given the simplicity of this program This program handled the \nexception as part of is expected program flow which makes logging the exception information \nunnecessary  \nThats not to say the  information couldnt be added to the handlers for ZeroDivisionError  \nand ValueError if it were deemed useful  \nLogging an exception can be handled by using Pythons logging module in this manner  \nimport logging  \nlogger  logginggetLoggername  \nloggersetLevelloggingDEBUG  \nch  loggingStreamHandler  \nchsetLevelloggingDEBUG  \nformatter  loggingFormatterasctimes  names  levelnames  messages  \nchsetFormatterformatter  \nloggeraddHandlerch  \n \ntry \n    x  10  0  \nexcept Exception as e  \n    loggererrorsomething bad happened  \nThe cod e above imports the logging  module and creates a simple logger  instance named \nafter the module name the instance is created in It then sets the terminal as the output of log \nmessages creates a formatter for what messages should look like and adds the han dler to the \nlogger instance Configuring a logger more fully will be part of later examples when we start \nbuilding the MyBlog web application  \nCalling loggererror  inside the exception handler will print the message That message \nwill be formatted and lo ok like this  \n20220723 185029803  main  ERROR  something bad happened  \n90Manning Publications Co  To comment go to  liveBook  The output includes a timestamp when the exception occurred the module name the error \nlevel and the message In the example above the main  name exists because this exam ple \nwas run as a standalone application  \nIf the above code was imported into a larger application as a module main  would be \nreplaced with the name of the module In a larger application this information is useful to \nnarrow down the area where the exce ption occurred  \nIn this simple example the output of the logger is directed to stdout  which is the console \nor screen for most users Most use cases of loggers are directed to log files to keep logging \ninformation from interfering with any output the prog ram is producing for the user  \nThe introduction to this section states an exception should never be silenced and that is \npredominantly the right way to think about handling exceptions There are situations where \nthe developers knowledge about the code wo uld make silencing an exception acceptable if \ntaken with forethought The recommendations above still hold however  \nThis kind of code  \ntry \n     some code that might raise an exception  \nexcept \n    pass \nand this  \ntry \n     some code that might raise an exception  \nexcept Exception  \n    pass \nIs still far too broad as it will catch all exceptions Something that catches a specific Python \nexception or a custom exception narrows the scope of what will be handled to somethi ng \nintentional That is the real goal to make exception handling intentional rather than accidental  \n63 Raising An Exception  \nIn Python you can raise exceptions programmatically in your code Raising an exception might \nseem like an odd thing to do since most of the time an exception equates to errors However \nraising an exception is a useful way to handle conditions within your programs that you decide \nare exceptional and not necessarily programmatic errors  \nAs an example suppose youre writing a quiz applic ation providing calculations based on \nuser input One of the calculation functions only works if a user entered parameter is greater \nthan 0 and less than or equal to 100 The code should define a range of values acceptable to \nthe function  \nSince integers i n Python have a much larger range your program code will need to limit the \nuser input to within the range 0  parameter  100 Restricting the range is easy enough to \ndo at the point of use in the function but what should the function do about it if the range is \nviolated  \nMost likely the function should do nothing as it doesnt have the context to do anything \nuseful if the range restriction is violated Keeping in mind the idea of letting exceptions flow \nupwards to where they can be handled raising an ex ception can be useful  \n91Manning Publications Co  To comment go to  liveBook  Here is one way to handle the range restriction in the function  \ndef rangecheckuserinputparameter  \n    if not 0  parameter  100  \n        raise ValueErrorparameter range exceeded parameter  \n     additional functionality  \nAt the very top of the function a conditional statement checks if the parameter is not within \nthe acceptable range and if not a ValueError  exception is raised If the parameter is within \nrange the function continues normally  \nThe code passed the responsibi lity for handling the out of range ValueError  exception up \nthe call stack to the calling function The calling function most likely does have the context \nnecessary to handle the exception perhaps by prompting the user to enter the parameter \nvalue again  \nHandling the ValueError  exception in the calling function might look like this  \ndef getdatafromuser  \n     initialization and gather user input  \n    try \n        rangecheckuserinputparameter  \n    except ValueError as e  \n        printe  \n         restart code to get user input  \nThe getdatafromuser  function calls the rangecheckuserinput  function inside \na try  except  block that handles a ValueError  exception prints the error out for the user \nand restarts the pro cess to get data from the user  \n64 Creating Your Own Exceptions  \nPython allows you to create custom exception classes your code can raise Creating a custom \nexception might seem unnecessary since Python has a rich set of exception classes already \ndefined Ther e are a couple of good reasons to create custom exceptions  \n Exception namespace creation  \n Exception filtering  \nIn the previous section the ValueError  was raised by the rangecheckuserinput  \nfunction so an exception handler at a higher level in the getdatafromuser  function can \nintercept and do something about it  \nBut suppose the rangecheckuserinput  function raised an unrelated ValueError  \nlater in the function The exception would flow upwards through the stack to the calling \nfunction and be caug ht by the exception handler in getdatafromuser  \nAt that point what should the getdatafromuser  function do The code cant assume \nthe correct behavior is to show the error to the user and restart the process of gathering data \nbecause the range che ck isnt the only possible source of the exception  \nOne option is to examine the exception arguments by looking at the eargs  attribute tuple \nThen the code can make choices within the exception handler to determine the source of the \nexception  \n92Manning Publications Co  To comment go to  liveBook  This soluti on is brittle since it depends on the arguments passed at the point where \nValueError  was raised and those might change sometime later  \nA better design is to create an exception specific to the needs of the program narrowing \nthe scope of the exceptions to  handle You create a custom exception handler in the module \nthat defines the rangecheckuserinput  function like this  \nclass OutsideRangeExceptionException  \n    pass \n \ndef rangecheckuserinput parameter  \n    if not 0  parameter  100  \n        raise OutsideRangeExceptionparameter range exceeded parameter  \n     additional functionality  \nThe code above creates a new exception class named OutsideRangeException  that inherits \nfrom the parent Exception  class This new exception class is used in the \nrangecheckuserinput  function and raised if the parameter  value is outside the defined \nrange of acceptable values  \nNow the abbreviated program code looks like this  \nclass OutsideRangeExceptionException  \n    pass \n \ndef getdatafromuser  \n     initialization and gather user input  \n    try \n        calculatedresult  calculateparameter  \n    except OutsideRangeException as e  \n        printe  \n         restart code to gather user input  \n \ndef rangecheckuserinput  parameter  \n    if not 0   parameter  100  \n        raise OutsideRangeExceptionparameter range exceeded parameter  \n     additional functionality  \nIf the parameter value is outside the acceptable range the getdatafromuser  \nfunction can catch that specific exception and han dle it If any other exception is raised by the \nrangecheckuserinput  function that exception will flow upward to a handler catching \nthat specific exception or just the base class Exception  \nA complete example program using the logging module that demonstrates this is shown \nhere with comments removed for brevity  \n  \n93Manning Publications Co  To comment go to  liveBook  import math  \nimport logging  \n \nlogger  logginggetLoggerfile  \n \nclass OutsideRangeExceptionException  \n    pass \n \ndef rangeche ckuserinputparameter int  float  \n    if not 0  parameter  100  \n        raise OutsideRangeExceptionrange exceeded parameter  \n \n    return parameter  \n \ndef getdatafromuser  \n    successful  False  \n    while not successful  \n        parameter  input  \n            Please enter a integer greater than 0 and less than or equal to 100   \n \n        try \n            parameter  intparameter  \n        except ValueError as e  \n            loggerexceptionSom ething happened e  \n            printe  \n            continue  \n \n        try \n            result  rangecheckuserinputparameter  \n        except OutsideRangeException as e  \n            loggerexceptionParameter outside of range e  \n            print \n                Entered value outside of acceptable range  \n                 please re enter a valid number  \n             \n            continue  \n \n        printfParameter within range  result  \n        successful  True  \n \ndef main  \n    getdatafrom user \n \nif name  main  \n    main \n  \n94Manning Publications Co  To comment go to  liveBook  65 Summary  \nIn this chapter youve learned these things about exceptions  \n What exceptions are  \n Why they occur  \n How to handle exceptions  \n How to raise your own exceptions  \n How to create custom exceptions  \nUnderstanding how to handle and use exceptions is essential to a developer They are \nevents our programs receive from the real world about the things happening to our programs \nand the result of the actions our programs take  \nA goal of development is to cr eate something useful in the world Exceptions and how we \nhandle them are tools allowing you to develop successful programs that will be used and well \nreceived in that world  \nExceptions and exception handling are another slice of the developers world Loo king at \nthem closely and gaining understanding about their details allows you to use exceptions well \nas we examine other aspects of developing applications  \n  \n95Manning Publications Co  To comment go to  liveBook  7 \nSharing With the World  \nThis chapter covers  \nThe Project Application\nWhat a Web Server Does\nThe Fl ask Microframework\nRunning the Server\nYouve covered a lot of material in the previous chapters about being a developer Now youre \ngoing to put that knowledge to work Choosing an application to create is tricky because the \ndomain of possibilities is so large The project youll be creating i s a small but well featured \nblogging platform well be referring to as MyBlog The MyBlog application will be available as \na web based Python application  \nThe MyBlog web application will provide tools so users can join the blogging community \nand create blo g posts Registered users can post content using markdown for styling All users \nwill be able to view the posted content and registered users will be able to comment on it \nAdministration users will be able to mark any content or comments inactive as they  see fit \nRegistered users will be able to mark any content theyve created as inactive  \n71 Sharing Your Work  \nThe MyBlog web application is a way to not only share your thoughts and the thoughts of the \napplications users but to share your work The applicat ion serves a particular purpose with a \nhost of features The work involved to pull together the technologies to create the MyBlog \nfeatures is a skill worth showing off  \n711  Web Application Advantages  \nThe project choice to create a web application is bas ed on a few considerations First and \nforemost creating a useful web application builds on the topics covered in previous chapters \n96Manning Publications Co  To comment go to  liveBook  quite well Pulling together the topics of development tools naming and namespaces API use \nand creation and class design will play into the big picture of the application  \nOther types of applications also offer some of these opportunities to express what youve \nlearned but can be challenging to share with others For example creating a desktop GUI \napplication offers interes ting challenges to a developer However distributing a GUI application \nfor widespread use can be difficult Its certainly possible to do so with Python but the steps \nnecessary are outside of the scope of this book  \nA web server has some advantages in te rms of distributing an application The web server \nitself and the features and services are centrally located and are not running on the many and \nvaried computer environments that users have Having the server centralized like this means \nchanges and update s to the application happen in one place Restarting the server or pushing \nchanges out interactively makes the changes and updates available immediately to all users  \nAnother advantage of a web server based application is making a user interface availabl e \nA web application takes advantage of something installed on just about every computer in \nexistence a web browser Modern web browsers provide a powerful platform on which to build \nuser interfaces Data can be formatted and presented in almost infinite ways Images and \nmultimedia are also well supported Users can interact with applications hosted on browsers \nusing interface elements like buttons lists drop down lists and forms  \n712  Web Application Challenges  \nThis isnt to say using a web browser as an app lication platform isnt without challenges \nCreating a web application means youll be working in multiple technical domains Along with \nPython youll be creating HTML CSS and JavaScript code files Additionally desktop based \napplications offer m ore direct access to the computer hardware and the tremendous computing \npower personal computers bring to bear  \nHowever with continuing advancements in browsers new and expanding web \ntechnologies and ever increasing Internet speed thats widely availab le the performance gap \nbetween desktop and web based applications is narrowing In addition web based systems \nhave grown to have widespread acceptance as a method of delivering applications This \nacceptance makes creating them a valid path for both perso nal and professional development  \nThere are existing blogging platforms available to use or download and run yourself The \nMyBlog application wont be in competition with them What the application offers isnt \ngroundbreaking features or technology bloggi ng software is well understood This is one of \nthe MyBlogs advantages already knowing what a blog application is intended to supply  \nThe goal isnt to create a groundbreaking blog but to see the big picture of the applications \nintent and think like a de veloper to pull the necessary parts together to paint that picture into \nexistence  \n72 Servers  \nThe MyBlog web application is a subset of what a server application in general provides One \ndefinition of a server is an application running on a computer or comp uters providing \nfunctionality to other applications across a network This arrangement of multiple applications \naccessing the functionality of a central server is known as the client server model  \n97Manning Publications Co  To comment go to  liveBook  As you build out the MyBlog application youll be running it on your local computer which \nwill essentially turn it into a server The software running on a computer is what makes it a \nserver not the computer hardware configuration Commercial server hardware are built to \noptimize the access that server software  needs to run well but otherwise are just computers  \nWe all use social networks and work with the programs that run on our desktop or mobile \ndevices Those tools are client applications using the functionality of many servers If you play \nany multiplayer games the game application uses a servers functionality to coordinate all the \nplayers actions in the game  A diagram of a server connected to several clients is shown \nbelow  \n \n721  Request  Response Model  \nOne common server implementation is the request response model The client application \nmakes a request to the server which processes the request and returns a response In this \nkind of application the server takes no action unless requested to do so  \nIn a web application the client browser mak es an HTTP request to the server for a response \nThe response is very often a stream of text representing an HTML page When the client \nbrowser receives the response it will render the HTML to the browser window Depending on \nthe HTML code that creates th e page it might also make additional requests to the server for \ninformation like CSS Cascading Style Sheet and JavaScript files  \nThe diagram below represents a simplified view of the requestresponse communication \noccurring between a client and server ov er time Initially the client makes a request to the \nserver which might need to retrieve data from a database in order to compose the response \nWhen the response is created it is transmitted back to the client  \nIn this example the response is an HTML page  the client application will render in the \nbrowser window Part of the HTML code includes links to CSS and JavaScript files which \n98Manning Publications Co  To comment go to  liveBook  generates additional requests to the server The server retrieves the requested files from the \nservers hard disk and sends th em as a response to the client  \n \nThe requestresponse model is the primary means the MyBlog  web application will use to \nget data from the server and build and present the application information to the users  \n73 Web Servers  \nA web server is an application responding to HTTP requests from a client application  A web \nbrowser is a client appli cation that makes requests to the web server and interprets the \nresponses and displays them on the screen Often whats sent to the clients web browser are \nHTML documents the browser interprets and renders as web pages HTML documents are the \ncontent the client requested  \nThere are many other interactions between a clients browser and a web server The \nbrowser can request the server to send pictures audio and video content even downloading \nother applications to the client computer  \nHTML documents can co ntain links to CSS and JavaScript files When the HTML received is \nrendered by the web browser the embedded links to those files generate additional HTTP \nrequests to the web server The web server responds by sending the requested content  \nCSS files contai n styling information applied to the content in the HTML document displayed \non the screen The CSS code modifies a web pages look and feel and is the presentation layer \nto the HTMLs content  \nJavaScript files contain code that runs in the clients browser  Once downloaded the web \nbrowser will start to execute the JavaScript code This code can be connected to on screen \nbutton clicks updates to the display and just about any action the user can make on a web \npage can be handled by JavaScript code  \n99Manning Publications Co  To comment go to  liveBook  JavaScr ipt code can also make HTTP requests to web servers for text and data These \nrequests can be initiated by user actions or programmatically and can change and update web \npages dynamically  \nHTTP  REQUESTS  \nThe HTTP protocol definition is not the intent of this  book and is beyond its scope but some \nbasic information is useful Here is an example HTTP request to a web server  \nGET pathpart indexhtml HTTP11  \nHost fictionalwebsitecom80  \nAccept imagegif imagejpeg   \nCRLF \nThe line numbers in the examp le above are not part of the request but were added to \nreference the lines in the explanation of the protocol  \n1 GET pathpartindexhtml HTTP11  This is the start of the request  to the web \nserver The word GET indicates the HTTP method to use in this case to retrieve the \ndocument located at pathpartindexhtml  using HTTP protocol version 11  \n2 Host fictionalwebsitecom80   Indicates the domain  suffix and  port number \nwhere the request is sent The port number 80 is optional and if absent defaults to \n80 \na The domain suffix is the text name of the server hosting the website This name is \ntranslated by a DNS Domain Name Server to an IP address so the net work \nprotocol can direct the request to the right server on the Internet  \nb The suffix is a list of suffixes that help manage and differentiate domains on the \nInternet Youre probably already familiar with suffixes like com and net but \nthere are many  others This makes myservercom and myservernet two \ndistinct names  \nc Ethernet network cards can support 65353 logical ports with those from 0 to 1023 \nreserved for well known ports used by common applications For example web \nservers commonly use port  80 which is why its the default if not specified in the \nURL However a server including web servers can run on any port in the range \nthats not already in use  \n3 Accept texthtml    Is header information  which is optional In this example \nit indi cates to the server the kinds of responses the client can accept There can be \nmany headers each containing additional information from the client that can be \nuseful to the web server  \n4 CRLF  Indicates carriage returnline feed characters or a blank li ne which is a \nrequired part of the HTTP protocol and ends the list of headers and tells the server to \nstart processing the request  \nWhen I was first getting into web development it surprised me that small amount of text \nwas literally what was sent across the network to the server  \nThe first two lines of the request create a URL or Uniform Resource Locator which uniquely \nidentifies what the client is requesting In the example above  the U RL is \n100Manning Publications Co  To comment go to  liveBook   \nThe server receives this request and takes one of the following steps  \n Maps the request to a file in the servers control and returns it to the client  \n Maps the request to a handler program code and returns the output of the handler to \nthe client  \n Determines the request cant be answered and returns an erro r message  \nThe use of the  slash character is very much like that used as the path separator for \ndirectories and files on a file system This pattern is a useful way to present a logical path \nhierarchy of the resources and content originating at the root  domain \nfictionalwebsitecom  \nBy allowing for multi part paths a logical hierarchy is created The hierarchy can be \nnavigated by a browser application to access different parts of the web server The end point \nof a URL can be an actual file resource the web server provides but it doesnt have to be The \nlogical path created can have no relation to the actual file path to a resource on the servers \nfile system  \n74 Flask  \nYoure going to build the MyBlog application using Flask a lightweight web applica tion \nframework for Python Flask provides the mechanisms and plumbing necessary for Python to \nbe used as a web application server to create useful applications that perform and scale well \nFlask includes the ability to answer HTTP requests for URL resource s and connect those \nrequests to Python code that dynamically builds the response  \nFlask httpsflaskpalletsprojectscomen21x  is not part of the standard library modules \nthat come with Python but is available as a third party module hosted by the Pyt hon Package \nIndex  httpspypiorg  Like other modules available to Python this makes it installable \nusing the pip utility  \n741  Why Flask  \nPython is in the fortunate position of being popular as a language to build web applications \nBecause of this there are many tools and frameworks Python can use to create web \napplications Flask being one of them Theres Django Bottle Pyramid Turbogear s CherryPy \nand more All of the frameworks are useful some have a more particular use case than others \nsome are faster than others and some are more specialized for creating certain kinds of web \napplications and services  \n101Manning Publications Co  To comment go to  liveBook  Flask lives in the middle gro und and is popular because its small and has a minimal initial \nlearning curve and is more than capable as your skills and needs grow There are many \nmodules available that integrate with Flask that youll use as the MyBlog application grows \nThese modules  will give the MyBlog application access to databases authentication \nauthorization and form creation Part of the beauty of Flask is not having to learn or use these \nexpanded capabilities until theyre needed and youre ready to create new features with  them  \nAs a developer myself Ive worked with some of the other web application frameworks \navailable to Python Flask is the one Ive used the most and am most familiar with That \ninfluences the choice to use it because I can write about it with confidenc e that I can present \nFlask to your best advantage and not miss details I might otherwise if I were to choose a \nframework Im not as familiar with  \n742  Your First Web Server  \nNow that you know where youre  headed lets get started The first server comes right f rom \nthe Flask website quick start example and is as good as anywhere to begin getting familiar \nwith Flask This is the Hello World example programmed expressed as a web application The \ncode for the server is available in the repository as examplesCH07 examples01apppy  \nfrom flask import Flask     A \n \napp  Flaskname     B \n \napproute     C \ndef home    D \n    return Hello World  \nA Import the Flask system into the application  \nB Create a Flask instance object passing it the name of the c urrent file  \nC This decorator connects the home function to the  application route  \nD The home function will run when the user navigates to the  route  \nAfter running the install steps for the chapter examples and starting your Python virtual \nenviro nment the application is run by opening a terminal window and navigating to the \nexamplesCH7examples01  directory Enter the following command for Mac and Linux  \nexport FLASKENVdevelopment  \nexport FLASKAPPapppy  \nFor Windows users enter the command  \nset FLASKENVdevelopment  \nset FLASKAPPapppy  \nOnce done enter the command flask run  and the application will output the following \ntext to the terminal window  \n  \n102Manning Publications Co  To comment go to  liveBook    Serving Flask app apppy lazy loading  \n  Environment development  \n  Debug mode on  \n  Running on http1270015000 Press CTRLC to quit  \n  Restarting with stat  \n  Debugger is active  \n  Debugger PIN 325 409845 \nThe messages above might look  ominous but its just informing you the web server is \nrunning in development mode which isnt suitable for production Production in this context \nmeans running the web server so its publicly available The Flask built in development server \nisnt optimi zed or secure enough to be used out in the wild  \nYoull also notice the last line informs you that to stop the application youll need to press \nthe CTRL C keys Notice also the terminal cursor doesnt return This is because the flask run  \ncommand is runnin g the app instance in an infinite loop waiting to receive and process \nrequests  \nA server is intended to run long term and in fact would never stop unless instructed to do \nso The server youve just started is in an idle state waiting to receive and process  HTTP \nrequests The Flask development server defaults to running at IP address 127001 on port \n5000  \nThe IP address 127001 is known as localhost and is the loopback interface of your \ncomputer network interface This means you can create servers on th is address and access \nthem even if you dont have a network card installed on your computer The port value of 5000 \nis just an unused port number out of the 65535 available on network interfaces  Both of these \nvalues can be configured but the defaults ar e fine for now  \nTo interact with the server you need to open a web browser on your computer and navigate \nto http1270015000  as the URL and click enter The browser will respond by printing \nHello World in th e content window Youll also see a log message in the terminal window \nwhere the server is running indicating the request was received and processed correctly \nindicated by the 200 at the end of the log message The 200 value is the HTTP status code for \nOk which means the requested was handled successfully  \nCONNECTING ROUTES  \nOne of the important things to notice about the application is how Python code is connected to \na valid URL route the server will respond to The approute  line of code is a dec orator \nprovided by the Flask app instance and applied to the home  Python function The decorator \nis how the home  function is registered with Flask and connected to the URL  route and \nwill be called when a user browses to http1270015000  Becaus e the route is defined the \nserver will respond with the results of running the home  function returning the Hello World \nstring  \nSERVING FOREVER  \nOnce the server is running it will continue responding to requests until its stopped essentially \nrunning f orever waiting for HTTP requests to respond to There is no explicit loop in the \napplication code so how is the server running forever The loop is part of the functionality in \n103Manning Publications Co  To comment go to  liveBook  the Flask app instance When the flask run  command is invoked at the terminal command \nline it looks for an object named app and if found starts the server event loop  \nThe event loop is where the server waits for events to process The events are data showing \nup on the network socket at port 5000 Unlike what you might think of as an  infinite loop in \napplication code the server is idle while waiting for events and using very little CPU time  \nUNDEFINED ROUTES  \nIf you go back to the browser and modify the URL to be http1270015000so mething  and \nhit the enter key the browser will respond with a Not Found error Looking at the log \nmessages in the terminal window youll see a message the request was received but the server \nresponded with a 404 status code The HTTP protocol status cod e 404 essentially equates to \nPage Not Found  \nThis makes sense if you look at your web server application code At the moment the only \nURL supported is the home route  there is nothing defined to handle the something  \nroute  The server didnt crash because it didnt have the route defined instead the server \nhandled it as an error and informed the browser about the error  \nThe ability to handle errors and continue to function is an important part of the servers \ndesign and implementation As you devel op the MyBlog application youll use the errors \nhandled and returned by the Flask server to help determine where problems exist in the \napplication and where to go to resolve them  \n743  Serving Content  \nGetting your first web server coded and running is a big step Theres a remarkable amount of \nfunctionality implemented and executed by the very small amount of code in apppy  The \nhome  function shows how you can map Python code to a URL the web serve r will support \nYou can add new functions and map them to additional routes and the web server would \nprovide additional pages the browser could navigate to  \nTo create a proper web page you could replace the Hello World string returned by the \nhome  function with a string containing HTML code By doing this the browser would receive \nthe HTML and render it in the browser window However useful and well designed web pages \nare created with HTML code that can run to hundreds even thousands of lines of code  \nEmbedding strings of HTML code directly into your web server would make it difficult to \nmaintain and wouldnt take advantage of features available to you through Flask  \nIts better to keep HTML content and Python code separated and build HTML pages as fi les \nwhich is what well do next  \nDYNAMIC CONTENT  \nThe content served to the browser by the home  function is the string Hello World  which \nis returned to the browser every time the page is accessed or refreshed Because home  is a \nPython function it c ould have returned anything including information and data that is \ngenerated dynamically The function could have returned the result of the random  function \nand the browser would have rendered a random value every time the page was accessed The \nhome  function could have returned the results of a calculation data retrieved from a database \nor the return value of some other HTTP web based service  \n104Manning Publications Co  To comment go to  liveBook  Creating and returning dynamic information is one of the cornerstones of creating useful \nweb applications  the MyBlog project being one of them How do you merge dynamic \ninformation with HTML content that can be meaningfully rendered by browsers Flask includes \naccess to a template language called Jinja2 A template can be thought of as a document that \nwill b e combined with data to produce a completed end result document Heres an example \nusing Python f string formatting to illustrate the idea  \nname  Joe  \nresult  f My name is name  \nprintresult  \nMy name is Joe  \nHere the variable name is set to the string Joe  and the Python format string fMy name \nis name  acts as the template The result  variable is created and then printed and My \nname is Joe  is output Pythons f string formatting is like a small templating language it \ntakes in data in the form o f the name variable and creates the resulting string output Jinja2 \nworks much like this as well as having many other features  \nBy using a templating language you can place your HTML code in a template file and then \nhave Jinja2 substitute your dynamic in formation and data into the right places in that template  \nUSING A TEMPLATE LANGUAGE  \nLets modify the previous web server code to use Jinj2 templates and pass dynamic data to \nthe template to render in the browser window The modified code is found in \nexamplesCH07examples02apppy  \nfrom flask import Flask rendertemplate     A \nfrom datetime import datetime     B \n \napp  Flaskname  \n \napproute  \ndef home  \n    return rendertemplateindexhtml nowdatetimenow     C \nA Import the Flask func tion rendertemplate in order to use Jinja2  \nB Import the datetime functionality to generate dynamic data  \nC Use the rendertemplate function to connect the indexhtml template file with the now data element  \nThe first parameter to the rendertemplate  function is the string indexhtml  This is the \nfilename of a template file containing Jinja2 instructions Everything else passed to \nrendertemplate  is a named parameter In the example above the named parameter  is now \nand it is the value returned by the code datetimenow  the current timestamp  \nBy default Flask initially searches for template files in a directory called templates The \ntemplate directory should exist in the same directory as the apppy  file so create that now  \nInside the templates directory youll need to create a file named indexhtml  In the \nexample application the indexhtml  file looks like this  \n  \n105Manning Publications Co  To comment go to  liveBook  DOCTYPE html    A  \nhtml    A  \n \nhead    A  \n     Required meta tags     A \n    meta charsetutf 8    A  \n    meta nameviewport contentwidthdevice width initial scale1 shrink tofitno    \nA \n    titleYour First Web Servertitle    A  \nhead    A  \n \nbody \n    h1Current tim e nowh1    B  \nbody \n \nhtml \nA HTML 5 boilerplate code  \nB Insert the current datetime in the now Jinja output expression  \nThe HTML 5 code above presents a complete web page the browser can render in its window \nThe interesting thing in the fi le is the h1 tag inside the body of the document  \nh1Current time nowh1  \nThe now  part of the line is Jinja2 template syntax and will be replaced by the value of \nthe rendertemplate  parameter now  that has a value of the current timestamp  \nThe rendertemplate  function uses the Jinja2 templating engine to parse the template file \nand substitute elements that follow the Jinja2 syntax rules with data Jinja2 also has the \ncapability to do much more processing than just substitution and youll ge t to that shortly  \nOnce youve created the indexhtml  file the directory structure should look something \nlike this  \n apppy  \n templates  \n     indexhtml  \nIf you run the apppy  file and browse to the URL you should get a browser page that looks \nsome thing like this  \n106Manning Publications Co  To comment go to  liveBook   \nEvery time the page is refreshed the timestamp will update This demonstrates the home  \nfunction is running and the indexhtml  template is being rendered with a new \ndatetimenow  value every time the page is refreshed  \n744  More Jinja2 Fe atures  \nThe previous example is a functioning web application but it only shows off a small portion of \nwhat Jinja2 can do Lets expand on the example web application to demonstrate more \ncapabilities of Flask and Jinja2 that youll make use of in the MyBlo g project  \nThe updated web application will have a banner and a sticky footer It will include the \ncurrent time as it does now It will also include a page visits counter that will increment every \ntime the page is refreshed There will also be a list of co lors the banner can be changed to \nand a button that will change the banner background color randomly  \nThe updated application will look like this  \n107Manning Publications Co  To comment go to  liveBook The application gets extra functionality to provide the random list of colors and the page \nvisits counter The server also provides styling information to the browser in the form of CSS \nfiles and client side browser interactivity as a J \navaScript file \nThe page counts ability is provided by a Python class using a class level variable By using \na class variable the state of the page count is accessible by any instance of the class Any \nchange to the variable is visible to any instance that uses it The PageVisit  class has a simple \npurpose and interface \nclass PageVisit\nCOUNT 0\ndef countsself\nPageVisitCOUNT 1\nreturn PageVisitCOUNT\nThe PageVisit  class maintains the class variable COUNT  available to all instance of the \nclass It also provides the counts method to increment the value of COUNT  and return it to \nthe caller Every invocation of the counts  method will increment the COUNT  value by one \nThe PageVisit  class exists because the web server can be handling many users at once \nwho might be making requests for the page and a consistent value of COUNT  has to be \nmaintained across all of them \nThe list of banner background colors is used by both the template file that renders the \nHTML of the page and the JavaScript functionality that changes the banner background colors \non button clicks This means the colors list has to be made available to the template and the \nJavaScript engine running on the browser \nTo manage the list of colors the class BannerColors  is created This class encapsulates the \nprimary list of colors as a class level variable and provides a method generating a random \nsubset of those colors as a list to use Like PageVisit  the class BannerColors  has a simple \npurpose and interface \n108Manning Publications Co  To comment go to  liveBook class BannerColors \n    COLORS   \n        lightcoral salmon red firebrick pink \n        gold yellow khaki darkkhaki violet \n        blue purple indigo greenyellow lime \n        green olive darkcyan aqua skyblue \n        tan sienna gray silver \n     \n    def getcolorsself \n        return sampleBannerColorsCOLORS 5 \nThe BannerColors  class maintains the class variable COLORS  as a list of valid CSS color \nname strings This creates the palette of banner colors that can be displayed on the page The \ngetcolors  method returns a random subset of five of those colors as a list using the \nRandom module and its sample function from the Python standard library Every time \ngetcolors  is invoked it returns a random subset of colors as a list from the COLORS  class \nvariable list \nThe PageVisit  and BannerColors  classes are added to the apppy  file in the \nexamplesCH07examples03  directory and integrated into the home  function that renders \nthe web page  \napproute \ndef home \n    bannercolors  BannerColorsgetcolors    A \n    return rendertemplateindexhtml data    B \n        now datetimenow    B \n        pagevisit PageVisit    B \n        bannercolors     B \n            display bannercolors    B \n            js jsondumpsbannercolors    B \n            B \n     \nA Gets a random list of five colors and assigns it to the variable bannercolors \nB Creates a dictionary of information to pass to the template as the data named variable \nThe BannerColors  class is instantiated right away and its getcolors  method is called \nstoring the results in the variable bannercolors  This variable is used later to create the data \npassed to the template for rendering \nThe rendertemplate  function is called with the name of the template to render \nindexhtml  and the data variable The data variable is a dictionary containing keyvalue \npairs to pass information used in the template \nnow  is the value returned by datetimenow  \npagevisit   is an instance of the PageVisit class \nbannercolors   is another dictionary \no display   is the previously create bannercolors  list variable \no js  is the result of JSON stringifying the bannercolors  list \n109Manning Publications Co  To comment go to  liveBook  The bannercolors  dictionary inside the data dictionary contains two variations of the \nbannercolors  list variable Youll see how this is used when we get to the updated \nindexhtml  template  \nAll of the work to this point adds functionality to the hom e function thats run when a user \nbrowses to the home page of the application This new functionality passes new data to the \nindexhtml  template and is rendered as a complete HTML page by Jinja2  \nTEMPLATE INHERITANCE  \nBefore you get into the updated indexhtml  template take a look at the screenshot of the \nweb application presented earlier The page has a banner and a footer section Ve ry often \nthese kinds of visual and informative features are common to every page of a web application \nHTML boilerplate code is also common to every page  \nBased on the Dont Repeat Yourself principle DRY it would be useful to pull the common \nelements of an HTML page together rather than copying those pieces to every page Even \nworse would be maintaining all those copies of the common elements as the web application \nchanges and evolves over time The Jinja2 templating engine provides for this through th e use \nof template inheritance which is conceptually like class inheritance in Python  \nBefore getting started using template inheritance youll need to expand the directory \nstructure of the web application Because youre going to be serving static CSS and  JavaScript \nfiles to the application those files need to live somewhere the web server can access them \nBy default Flask looks for static files in a directory named static which is a sibling of the \ntemplates directory  \nCreate the static directory at the  same level as the templates directory To help keep \nthings organized in the static directory create CSS and JS subdirectories as well to place \nthe CSS and JavaScript files into These files will give the web application its presentation and \nintera ctivity Your directory structure should look like this  \n apppy  \n static  \n    css  \n    js  \n templates  \n     indexhtml  \nPARENT TEMPLATE  \nYou can copy the indexhtml  file to create a new file named basehtml  in the templates \ndirectory Thi s is the parent template containing all the common features presented on the \nweb pages of the application Modify the new basehtml  template file to look like this  \n  \n110Manning Publications Co  To comment go to  liveBook  DOCTYPE html  \nhtml \nhead \n     block head      A \n     Required meta tags  \n    meta charsetutf 8 \n    meta nameviewport contentwidthdevice width initial scale1 shrink tofitno  \n    titleYour Second Web Servertitle  \n     block styles      B \n    link relstylesheet typete xtcss href urlforstatic \nfilenamecssmyblogcss      B \n     endblock      B \n     endblock      A \nhead \n \nbody \n    div idheader  \n        h1MyBlog Home Pageh1  \n    div \n    div idcontent  \n         block content   endblock      C \n    div \n    div idfooter  \n         block footer      D \n        h4copy Copyright 2020 by MyBlogh4     D \n         endblock      D \n    div \nbody \n \n block scripts  endblock      E \n \nhtml \nA Creates a template section named head which will be referred to by child templates  \nB Creates an inner template section named styles which will be referred to by child templates to insert CSS file \nreferences  \nC Creates an empty template section named  content which contain the content of the page and is provided by the \nchild templates  \nD Creates a template section named footer which can be referred to by child templates  \nE Creates an empty template section named scripts which child templates c an use to insert JavaScript file \nreferences  \nIn this template there is HTML code youve seen before and mixed with Jinja2 template code \nThe template code that begins with  block head   and ends with  endblock  creates \na template section named head that can be referenced by a child template by referring to the \nblock name Blocks like this can be referenced even from other files  \nThe block named styles  contains a stylesheet link Inside the href portion of the link is \nanother Jinja2 template construct  urlforstatic filenamecssblogcss  \nThis is an expression substitution in this case executing the Python urlfor  function  \nIts generally a bad idea to hard code URL paths within a web application and the urlfor  \nfunction helps avoid this B y passing a known URL endpoint as the first parameter and the \nrelative filepath as the second the function can create a URL to the desired file thats valid for \nthe Flask application When the template is rendered a valid URL to the blogcss  file will exist \nin the stylesheet link rendered by the browser  \n111Manning Publications Co  To comment go to  liveBook  The empty block sections named content  and scripts  respectively create references that \nwill be used by the indexhtml  file inheriting from the basehtml template  The \nindexhtml  file w ill use the references to inject content into the page and include a page \nspecific JavaScript file named indexjs  containing interactivity code  \nCHILD TEMPLATE  \nNow that you have a base template its time to inherit from it by modifying the indexhtml \ntemplate  \n extends basehtml      A \n \n block content      B \nh2Current time  datanow h2     B \npPage visits  datapagevisitcounts p     B \npList of available banner colorsp     B \nul    B \n     for bannercolor in databannercolorsdisplay      B \n    li bannercolor li     B \n     endfor      B \nul    B \ndiv idcolor change     B \n    button classchange bannercolor    B \n        Change Banner Color     B \n    button     B \ndiv    B \n endblock      B \n \n block styles      C \n super      C \nlink relstylesheet typetextcss href urlforstatic filenamecssindexcss \n    C \n endblock      C \n \n block scripts      D \n super      D \nscript    D \n    const bannercolors   databannercolorsjs safe     D \nscript     D \nscript src urlforstatic filenamejsindexjs script     D \n endblock      D \nA Makes this child template inherit from the basehtml parent template  \nB Creates the content to render to the page which will replace the empty content block in the parent template  \nC Adds specific CSS style information for this child template to the styles block The  super  expression calls  the \nparent styles block first and then adds the content of this block  \nD  Adds specific JavaScript file references for this child template to the scripts block The  super  expression calls  \nthe parent styles block first and then adds the content of this block  \nLike Python classes the child template references the parent template to inherit from by \nreferring to it in the template code at the first line The  extends basehtml   template \ncode informs Jinja2 that indexhtml  is inheriting from basehtml  The template engine \nknows how to find the basehtml  template file in the same way that it found the \nindexhtml  template by looking in the templates directory  \n112Manning Publications Co  To comment go to  liveBook  The content provided by the indexhtml  file begins with the  block content   start \nmarker and ends with an  endblock   marker When the complete page is rendered by \nJinja2 the content will be placed on the HTML page at the position of the content block reference \nin the basehtml  parent template file  \nInside the content section  is where the data passed to the template by the \nrendertemplate  function is used The datanow  Jinja2 expression gets the current \ntimestamp The datapagevisitcounts  expression gets the PageVisit  instance \nand call its counts  method to get the current page visit counts  \nThe Jinja2 language provides a mechanism to create repeating data in the rendered \ntemplate by using a for loop Mimicking Python the loop construct is a For In loop iterating \nover the contents of the iterable databanne rcolorsdisplay  list Each item in the \nlist is used to create an html list element with the code libannercolorli  The for \nloop ends with the  endfor   marker  \nThe block named styles  references the same block in the basehtml  template Recall \nthat the stylesheet block in the parent template wasnt empty it had a stylesheet link to pull \nin presentation information common to all web pages The super  expression  renders \nthe parent stylesheet block before including the information def ined in the child indexhtml  \ntemplate  \nThe scripts  named block does a couple things It uses the super  expression to \nrender anything defined by the parent template which is nothing currently It then builds some \nJavaScript code directly to define a variable called bannercolors  which is initialized with the \nJSON formatted string of banner colors supplied by databannercolorsjs  \nsafe  The  safe  part of the syntax prevents Jinja2 from translating symbols that could \nbe dangerous Its not necessary here because the data is coming from the application itself \nbut is a good habit to keep in mind If the data had been supplied by a user in a form its \npossible the data could contain information that might be a XSS attack A XSS attack coul d be \nhaving JavaScript inserted in the data entered by a user that could cause your site to take \nunintentional actions  \nLastly a script tag referencing an external JavaScript file using the same urlfor  \nmechanism to create a valid relative URL for the we b application is included  \nPRESENTATION  \nThe presentation of the web page is controlled by the indexcss  file which contains CSS \ncode applying style information to the HTML elements created by the Flask rendertemplate \nfunction that is presented by the browser There are two CSS files connected to the application \nmyblogcss  and indexcss  \nThe myblogc ss file applies to the parent template file basehtml  \n  \n113Manning Publications Co  To comment go to  liveBook  html body   \n    height 100  \n \n \nbody  \n    display flex  \n    flexdirection column  \n    margin 0px  \n    fontfamily Arial Helvetica sans serif \n \n \nheader h1   \n    margin 0px  \n    backgroundcolor darkcyan  \n    height 75px  \n    textalign center  \n    lineheight 75px  \n \n \ncontent   \n    flex 1 0 auto  \n    margin 20px  \n \n \ncontent h2   \n    border 3px solid lightgray  \n    borderradius 5px  \n    padding 20px  \n    textalign center  \n    background color bisque  \n \n \nfooter   \n    flexshrink 0  \n \n \nfooter h4   \n    margin 0px  \n    background color lightgrey  \n    height 50px  \n    textalign center  \n    lineheight 50px  \n \nThough this book isnt about Cascadi ng Stylesheets its worthwhile going over some of the \nabove code to get a feel for how CSS code affects the presentation of a web page Keep in \nmind the spacing and indentation of the CSS code is a convention for readability and is not \npart of the require d syntax  \nCSS code is about using and creating selectors to attach specific style information so the \nbrowser can render the HTML elements with the intended look and feel For example the code \ncontent h2   attaches style rules to the HTML header h2 element contained in the \ndiv idcontent  element This narrows where the style will be applied on the page in \nthis case only the h2 tag within the div idcontent  will have a rounded border with \nan int ernal padding of 20 pixels The header text will be centered and have a background color \nof bisque  The rest of the selectors apply style rules to other parts of the basehtml  page  \n114Manning Publications Co  To comment go to  liveBook  The indexcss  file applies rules to the indexhtml  child template page  \ncolorchange button   \n    background color lightgrey  \n    borderradius 5px  \n    border 1px solid grey  \n    display inline block \n    cursor pointer  \n    color black  \n    fontfamily Arial  \n    fontsize 16px  \n    fontweight bold  \n    padding 13px 69px  \n    textdecoration none  \n    textshadow 0px 0px 0px lightskyblue  \n \n \ncolorchange buttonhover   \n    background color darkgrey  \n \n \ncolorchange buttonactive   \n    position relative  \n    top 1px  \n \nThe selectors in the code above apply styles to HTML elements that are created by the \nindexhtml  page essentially giving some style and CSS interactivity to the color change \nbutton  \nINTERACTIVITY  \nThis book isnt about JavaScript and its use will be kept to a minimum but most interesting \nweb applications will include some JavaScript code Once the HTML of page is rendered it is \nsent to the browser as a response The browser will then render the HTML visually in the \nbrowser window It will also parse and c ompile the JavaScript sent in the response and pulled \nin from the external file  \nwindowaddEventListenerload function event     A  \n    let banner  documentquerySelectorheader h1    B  \n    windowaddEventListenerclick function event     C \n         is this the click event were looking for    C  \n        if eventtargetmatcheschange bannercolor     D  \n            let color  bannercolorsMathfloorMathrandom  bannercolorslength    \nE \n            bannerstylebackgroundColor  color    F  \n         \n     \n \nA Wait for the page to be loaded before executing the nested code  \nB Get a referenc e to the banner element  \nC Add a click event handler for the banner color changing button  \nD Check to see if the click event originated from the button  \nE Select a random color from the bannercolors list  \nF Change the banner background color  \n115Manning Publications Co  To comment go to  liveBook  The code abov e is vanilla JavaScript code no frameworks like jQuery involved to add an \naction if the displayed button is clicked The code creates an anonymous function to run when \nthe page is finished loading The anonymous function creates a reference to the banner  \nelement and then adds another anonymous function to listen for the click event  \nInside the click event handler a conditional statement checks if the event was generated \nby the change banner color button If so a random color is selected from the bannercolors  \nlist and is used to change the background color of the banner  \n75 Running the Web Server  \nThe updated app exists in the examplesCH07examples03  \n apppy  \n static  \n    css  \n       indexcss  \n       myblogcss  \n    js  \n        indexjs  \n templates  \n     basehtml  \n     indexhtml  \nIn the terminal move to the directory and set the environment variable FLASKAPP  to point \nto your application by entering this at your command line for Mac and Linux  \nexport FLASKENVdevelopment  \nexport FLASKAPPapppy  \nAnd this for Windows users  \nset FLASKENVdevelopment  \nset FLASKAPPapppy  \nThen run the web server by entering flask run at the terminal command line You should \nsee the server start up and be able to navigate to http1270015000 to see the application  \nWhen you run the web application with the flask run  command the server starts and runs \nwith the Flask built in web  server The built in web server is suitable for development and \ntrying things out but it is not suitable for production use  \nFor production use youll need to use a production ready WSGI server WSGI stands for \nWeb Server Gateway Interface and a WSGI se rver is an application that provides a simple \ncalling convention to forward requests from a web server to a Python web application The web \nserver built into Flask is a WSGI server that provides this calling convention for development \npurposes  \nThe WSGI st andard exists to abstract away the complexities of interfacing your Python web \napplication to a web server and the world So long as youre building your application to the \nWSGI interface standard which Flask and just about all other Python web frameworks  do your \napplication can provide requestresponse handling accessible through the Internet  \nTwo of the most common production grade WSGI servers are uWSGI and Gunicorn The \nuWSGI application is a high performance application written in CC Gunicorn sh ort for \n116Manning Publications Co  To comment go to  liveBook  Green Unicorn is also a high performance WSGI compliant web server application Both are \nproduction ready  \n751  Gunicorn  \nTo run your application using Gunicorn you need to install it using this command from your \nPython virtual environment  \npip install  gunicorn  \nIn one of the example application directories while in the terminal enter this command  \ngunicorn w 4 appapp  \nThis tells Gunicorn to start four worker instances of your application which it finds with the \nappapp  part of the command The first  part is the name of the Python file apppy  and \nthe second part app  refers to the application instance created within the application by the \napp  Flaskname  part of the code  \nRunning multiple instances of the application with Gunicorn workers al lows your application \nto scale up to handle hundreds even thousands of requests per second How many request \npers second the application can handle is dependent on the workload each request makes on \nthe application and how much time it takes before a resp onse is generated  \nAccording to the Gunicorn documentation the recommended number of workers for an \napplication running on a single production server is 2 x numberofcores  1 The formula \nis loosely based on the idea that for any given core one worker will be performing IO \nInputOutput operations and the other worker will be performing CPU operations  \n752  Commercial Hosting  \nWhen you want to make your web application available for public use you need to do so using \na hosting service There are many servic es available to host your application They will offer \noptions like Apache or Nginx for web serving and uWSGI and Gunicorn for WSGI interfacing \nwith your Python based web application Its also possible to deploy your application using \nDocker containers  \nIm sure there are more options and configurations than Ive listed here Which to choose \ndepends on you your goals for the application and costs  \nBecause of the wide array of choices available and combinations afforded by those choices \nIm not going to spend time defining how to deploy a Flask based Python application to specific \nexamples My reasons for doing so are twofold  \n Its unlikely I would hit upon a combination of choices that would suit your deployment \nuse case perfectly  \n Deploying an applicatio n is a big topic worthy of a book of its own and doesnt directly \ncorrelate to becoming a well grounded Python developer  \n  \n117Manning Publications Co  To comment go to  liveBook  76 Summary  \nYouve learned a great deal in this chapter  \n Youve been introduced to the main project application MyBlog and how youre going \nto implement it as a web application  \n Youve seen in general what a server does and what a web server in particular does  \n Youve also created your first three web applic ations with Flask with steadily growing \ncomplexity and abilities  \nThe next chapter will begin to build the groundwork for the MyBlog application that will \ngrow through the rest of the book to become full featured Along the way youll learn how to \nhandle t he development of a larger application how to integrate it with a persistent database \nand the ways in which what youve learned so far can make the project manageable to build \nand enjoyable to achieve  \nYouve brought things from your field of view into f ocus and can now see the direction to \ntake and some of the things well learn along the way Well continue along this path to see \ndevelopment items in detail as we look at them more closely  \n  \n118Manning Publications Co  To comment go to  liveBook  8 \nDoing it With Style  \nThis chapter covers  \nApplication Stylin g\nIntegrating Bootstrap Styling\nCreating a Scalable MyBlog\nUsing Blueprint Namespaces\nApplication Configuration\nIntegrating the Flask DebugToolbar\nConfiguring Logging Information\nCreating a web application pulls together many concepts and technologies To create an \nengaging application its necessary to think about the look and feel or style For a web \napplication this is largely provided by using CSS styling applied to the HTML content  \nIntegrating good styling practice raises the bar of  complexity an application encapsulates \nTo help maintain growing complexity its necessary to think about project structure and the \nuse of namespaces Project structure and namespaces helps the project grow and scale in a \nway that keeps the complexity man ageable  \nThis chapter lays the foundation for the MyBlog application so that it can grow and evolve \nin a way that will help you maintain clarity about the goals of the application and stay ahead \nof the complexity curve  \n81 Application Styling  \nCreating an appl ication with interesting and useful features is necessary to keep users actively \nengaged in any application you create The feature set is essential but its not the only thing \nneeded to capture and keep users attention The way your application looks is  a critical factor \nyour users will expect in a modern computer system  \n119Manning Publications Co  To comment go to  liveBook  Look at any popular cell phone app and youll know this is true The best apps have both \nuseful feature sets and an engaging visual experience for their users Even apps with \ncompellin g features will be hard pressed to find users willing to accept and use them if the app \nlooks clunky and unpolished  \nThe browsers CSS styling code controls a web applications visual look to determine how \nto render the HTML code to the screen The first w eb application from Chapter 7 used simple \nhandcrafted CSS code to apply a distinct look and feel  \nContinuing to hand code CSS styles for the MyBlog application is possible but has \ndrawbacks  \n1 It takes effort to create appealing CSS styles  \n2 As an applica tion grows it becomes challenging to maintain styling consistency across \nan entire application  \n3 Normalizing styles for consistent rendering across multiple browsers is tricky  \n4 Phones and tablets are becoming the primary interface between an application and \nyour users making a web application responsive  to those devices is vital  \n811  Creating Appealing Styles  \nThe first web application from Chapter 7 had a single page with relatively simple styles applied \nto it that consist of two files myblogcss  and indexcss each of which was about a page of \ntext long Continuing to create custom styles leads to many CSS files containing hundreds \npossibly thousands of lines of code It becomes apparent very quickly that doing this is \nadditional hard work  \n812  Styling Consis tency  \nA web application with even moderate complexity will have multiple pages associated with it \nthat users will navigate around Making sure the buttons lists panels and other visual \nelements look the same across all those pages is important to the co hesive picture youre \ntrying to paint across the entire application  \nMaking those visual elements have the same style even in different use cases within the \napplication is challenging Maintaining that consistent style as your application scales upward \nwith more features and pages compounds that challenge  \n813  Normalizing Styles  \nLike myself you probably use a single web browser most of the time Even if you use one at \nhome and another  at work  you might be unaware of point 3 above the need to normalize \nstyles across browsers When youre  building an application and generating HTML code without \nany styles applied to it  the browser will render the HTML using its default styles  \nEach browser applies its default style to headers paragraphs fonts and spacing between \nelements If you could suppress the CSS style when navigating to web applications youre \nfamiliar with youd see how the pages are rendered with the browsers default style If you \nwere to do the same thing using multiple browsers like Chrome Fir efox Safari Edge and \nothers across multiple operating systems youd see the pages rendered differently between \nthose browsers Sometimes subtlety sometimes dramatically  \n120Manning Publications Co  To comment go to  liveBook  Giving any web application you create a consistent look across the different brow sers and \noperating systems means creating CSS code to override those browsers default styling  \n814  Responsive Design  \nWeve already talked about the advantages of providing application features using web \nbrowsers as the platform to deliver the experience One of the implications is that web browsers \nare everywhere on mobile phones tablets laptops and desktops They are even integrated \ninto cars and household appliances These devices can and do have varied presentation \ncapabilities includin g screen size screen resolution speed and accessibility  \nBecause the internet is widely available this means your web application can run on any \nof these devices that can access the URL where your application is available Attempting to \nstyle your appl ication for all of these devices is impossible there are just too many of them \nAlso new ones with new capabilities are continually being introduced  \nSince it is impossible to code for so many devices its necessary to use responsive design \nprinciples Responsive design means using fluid proportion based grids media queries and \nflexible images Using these tools creates a design layout that automatically adjusts to the \nscreen size of the device The Bootstrap framework provides much of whats needed t o create \na web application that uses responsive design ideas and implementations  \n82 Integrating Bootstrap  \nI wouldnt  present the styling speedbumps involved in developing the MyBlog web application \nwithout  also proposing a solution The solution Ive chosen  is the Bootstrap CSS framework \ncreated  by Twitter and located here httpsgetbootstrapcom  The Bootstrap framework \naddresses  the problems  raised above and frees you from solving  many styling  issues  and \ninstead lets you focus  on the application design and implementation  \nAdopting Bootstrap relieves you from having to create the CSS style code that creates the \nMyBlog presentation Using Bootstrap gives the MyBlog application an attractive consistent \nuser interface normalizes that interface across browsers and operating systems and resolves \nmany responsive design issues  \nThe use of Bootstrap means youll still need to add CSS class names to the MyBlog web \napplications HTML elements but the reducti on in the amount of custom CSS code required is \nwell worth it  \nTo use it well youll need to learn its conventions and use cases Using Bootstrap presents \na learning curve in addition to what youre already learning about Python and web \ndevelopment The e ffort to climb that learning curve is worth it for what Bootstrap brings to \nthe process  \nUsing Bootstrap to style your web based applications also means your applications will \nhave a Bootstrap look to them This look can be advantageous because the vis ual \npresentation is attractive well known and understood The choice to use Bootstrap is a good \none because this book focuses on becoming an accomplished Python developer with some \nweb page design skills  \n121Manning Publications Co  To comment go to  liveBook Using Bootstrap doesnt exclude you from completely customizing your design and it \nprovides an excellent jumpingoff point if you want to pursue the possibilities offered by \ncustomizing your application design \n821  Bootstrap Version \nThere are two Flask extensions that integrate Bootstrap into Flask applications Flask\nBootstrap4 402 last updated in 2018 FlaskBootstrap 3371 last updated in 2017 The \nMyBlog application will integrate Bootstrap directly rather than using either of these \nextensions Youll be using the Bootstrap 5 version for a couple of reasons Version 5 focuses \nmore on modern browsers making the CSS code more futurefriendly more straightforward \nto implement and possibly faster to render \nThe framework drops any dependency on the jQuery JavaScript library and instead uses \nstraight JavaScript There is absolutely nothing wrong with jQuery its a powerful library to \naccess and manipulate HTML elements However since its creation browser support for \nJavaScript has become much more consistent and powerful making dependence on jQuery a \nchoice rather than a necessity Using Bootstrap version 5 reduces dependencies in the MyBlog \napplication and makes developing the app less opinionated \n822  Previous Example Now With Bootstrap \nYouve read quite a bit about using the Bootstrap framework and why youd want to do so \nlets get to using it The last example web application in Chapter 7 used handcoded CSS for \nstyling As a refresher that version of the MyBlog application looks like this \n122Manning Publications Co  To comment go to  liveBook Your initial goal is to replace all of the handcoded CSS style information with that supplied \nby Bootstrap It will be the same application with the same content and functionality but styled \nentirely with Bootstrap CSS style classes to look like this \n \nThe first step on your way to replacing the handcoded CSS styles with Bootstrap is making \nthe Bootstrap framework available to the MyBlog web application  \nRather than download the Bootstrap framework and copy the necessary files into your \nstaticcss  and staticjs  directories youre going to access the files directly from a CDN \nContent Delivery Network Using a CDN to access Bootstrap relieves you from having to copy \nfiles around for this chapter and the chapters to come It also relieves Flask from having to \nserve the files as the CDN will do that The MyBlog application will use the \nhttpswwwjsdelivrcom  CDN and is the delivery mechanism recommended on the Bootstrap \nhome page \nBASEHTML  \nYoure changing just the style of the application so the apppy  file doesnt need to change \nBecause Bootstrap will be used for all of the MyBlog application youll add it to the basehtml  \ntemplate making it available to any template that inherits from it Youll also need to update \nthe handcoded style information in the template file with Bootstrap style classes The \nbasehtml  template file is updated as follows \n123Manning Publications Co  To comment go to  liveBook DOCTYPE html \nhtml langen \nhead \n  meta charsetUTF8 \n  meta nameviewport contentwidthdevicewidth initialscale10 \n  titleMyBlogtitle \n   block styles  \n  style    A \n    root     A \n        backgroundurl urlurlforstatic filename \nimagesmyblogbanner50png    A \n        A \n  style    A \n  link relstylesheet \nhrefhttpscdnjsdelivrnetnpmbootstrap502distcssbootstrapmincss \nintegritysha384EVSTQN3azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC \ncrossoriginanonymous    B \n  link relstylesheet hrefhttpscdnjsdelivrnetnpmbootstrap\nicons181fontbootstrapiconscss    B \n  link relstylesheet typetextcss href urlforstatic \nfilenamecssbasecss  \n   endblock styles  \nhead \nbody classdflex flexcolumn h100    C \n  div classbanner card    C \n    div classcardbody    C \n      div classcolmd4 offsetmd1    C \n        h2 classcardtitle fwboldMyBlog Home Pageh2    C \n        p classcardtextJust a blog to call my ownp    C \n      div    C \n    div    C \n  div    C \n  main classflexshrink0    D \n     block content  endblock  \n  main \n  footer classfooter fixedbottom py1 bglight    E \n    div classcontainer textcenter \n        span classtextmutedcopy Copyright 2021  MyBlogspan \n    div \n  footer \n   block scripts  \n  script src urlforstatic filenamejsbootstrapbundleminjs script    \nF \n   endblock  \nbody \nhtml \nA Creates the CSS variable backgoundurl referencing the banner image done here because it uses urlfor in a \ntemplate processed by Jinja2 \nB Includes the Bootstrap minimized CSS files from the CDN \nC Creates the banner section content and its styles \nD Creates the content section enclosing style which is provided by child templates \nE Creates the Bootstrap footer that sticks to the bottom of the page \nF Includes the Bootstrap bundled minimized JavaScript code \nThe template code creates the content and style basis of the MyBlog application Every \ntemplate that inherits from the basehtml  template will have these content and style elements \n124Manning Publications Co  To comment go to  liveBook  The basehtml  template gives a foundation for the look and feel of the entire application as \nwell as easing the work of doing so  \nBASECSS \nThe basehtml  template has its own basecss  file that overrides some of the Bootstrap styling \nfor the banner It also has a CSS media  query that makes the application responsive in a \nspecific way for smaller devices Well go over the basecss  file after presenting it  \nbannercard      A \n    border 0     A \n    borderradius 0     A \n    background clip none     A \n      A \n   \nbanner      B \n  display none     B \n    B \n \nmedia min width 768px      C \n  banner      C \n    display block     C \n    background var background url norepeat center center  cover     C \n      C \n    C \nA Modifies the Bootstrap card style to remove the border make the radius 0 and removes the background image \nclipping  \nB Sets the default visibility of the banner to none or invisible  \nC Uses a CSS media query to override the banner setting t o be visible if the screen size is greater than 768 pixels  \nThe interesting part of the above basecss  file is the banner  and media  sections The first \nsets the banner  display  value to none preventing it from being rendered to the display The \nmedia  section takes advantage of the cascading nature of CSS to affect how the banner is \ndisplayed In CSS the last defined style overrides any previously defined style The media  \nsection acts as a conditional statement in the CSS If the screen size is great er than 768 pixels \nthen set the display value to block  meaning it will be rendered to the display The background \nportion defines how to display the background image and gets that image from the CSS \nvariable background url defined in the basehtml  templa te \nIf the screen size is less than 768 pixels the initial banner  definition of none stands and \nthe banner image isnt rendered to the display The media  query gives MyBlog control over \ndisplaying the banner image giving small screen devices more disp lay real estate to show \nMyBlog content Youll see an example of how the media query affects the display after going \nover the changes to the indexhtml  file \nINDEX HTML  \nAs before the indexhtml  holds the content of the home page The content is the same but \nlike the basehtml  file the styling information is updated to use Bootstrap Heres the updated \nindexhtml  file \n  \n125Manning Publications Co  To comment go to  liveBook   extends basehtml   \n \n block content     A  \n    div classcontainer fluid    A  \n        div classcard bg warning mb 3 fontweightbold stylemargin top 10px    A  \n            div classcard body    A  \n                Current time  datanow     A  \n            div    A  \n        div    A  \n        pPage visits   datapagevisitcounts p    A  \n        div classcard stylewidth 18rem    A  \n            div classcard header    A  \n                List of available banner colors    A  \n            div    A  \n            ul classlist group listgroupflush    A  \n                 for bannercolor in databannercolors     A  \n                li classlist groupitem bannercolor li    A  \n                 endfor     A  \n            ul    A  \n        div    A  \n        br     A  \n        button idchange bannercolor typebutton classbtn btn primary    A  \n            Change Banner Color    A  \n        button    A  \n    div \n endblock     A  \n \n block scripts   \n     super   \n    script  \n        const bannercolors   databannercolors  tojson  safe   \n    script    B  \n    script src urlforstatic filenamejsindexjs script  \n endblock   \nA Create the home page content styled using a Bootstrap responsive c ontainer and card  \nB Convert the template parameter databannercolors template parameter to JSON so it can be used by the \npages JavaScript  \nThe home page content changes are all about styling the content presentation and not about \nthe content itself  \nWhen the changes are complete the directory structure should look like \nexamplesCH08examples01  \n \n apppy  \n static  \n    css  \n       basecss  \n    images  \n       myblogbannerpng  \n       myblogbanner50png  \n    js  \n         indexjs  \n templates  \n     basehtml  \n     indexhtml  \n126Manning Publications Co  To comment go to  liveBook  From that directory if you execute the following commands from a Mac or Linux terminal  \nexport FLASKENVdevelopment  \nexport FLASKAPPapppy  \nflask run  \nOr for a Windows system terminal  \nset FLASKENVdevelopment  \nset FLASKAPPapppy  \nflask run  \nThe MyBlog web server will run and you can navigate with your browser to 1270015000 \nand see the application  \n \nThe application shows the modified banner containing the image at the top of the display \nIt also shows the Bootstrap sticky footer at the bottom of the page These elements come from \nthe basehtml  template and will be present on every page that inherits f rom it  \nThe current timestamp is displayed in a Bootstrap card and the list of available colors is \ncontained in another card Additionally the button that changes the color of the banner \nbackground is styled as a Bootstrap button  \n127Manning Publications Co  To comment go to  liveBook  The above display is re ndered if the browser screen size is greater than 768 pixels most \nlikely correct for a desktop or laptop computer If you resize the browser window to be \nnarrower eventually youll cross the 768 pixel boundary and the web application display will \nchange  to this  \n \nThe absence of the banner text and image demonstrates the conditional implied by the \nmedia  query in the basecss  file The conditional becomes false and the initial definition of \nthe banner  CSS class became active setting the display value to none Using the media query \ngives the web application more vertical screen real estate for smaller devices like tablets and \nmobile phones  \n83 Helping MyBlog Grow  \nAt this point in the development the MyBlog app has expanded on the basic Flask example \napplic ation often found in Flask documentation  \nEverything weve added extends what this basic example can do with the addition of \nfunctionality styling and the use of Jinja2 templates Continuing to extend capabilities of the \n128Manning Publications Co  To comment go to  liveBook  code weve written so far is poss ible but doing so would hinder developing a fully featured and \nextensible application  \nAll new functionality would have to be included in the apppy  file as a long list of functions \ndecorated with approute  to connect that functionality to the Flask  application Doing \nso breaks the concept of single responsibility and makes naming the web application URL \nendpoint function handlers awkward  \nHarder would be the mental demand of working in many technical domains in a single large \nfile The apppy  file would contain all of the parts necessary for a full featured blogging \napplication authentication authorization database access user management and creating \nand presenting the blogging content  \nYouve seen how to break up functionality along logi cal or complex boundaries by using \nmodules to create namespaces and create namespaced containers for functionality The same \napproach will be used in the MyBlog application However one thing that needs attention to \nmake that possible as you move forward is the Flask app instance  \n831  The Flask app Instance  \nIn the current version of the apppy  program file the Flask module is imported and the Flask \napplication instance variable app is created directly Creating the Flask app instance in the root \napplication fi le works fine for a sample application whose purpose is to build a working example \nwebserver quickly  \nWhy is this structure a problem when you want to use modules to namespace functionality \nin the web application  Its the app instance variable Any feature or functionality youd want \nto add to the web application with a URL endpoint function like helloworld  will need access \nto the app instance variable  \nWith the current MyBlog application setup creating modules to contain features and \nfunctionali ty becomes difficult because those modules will need access to the app instance \nThat presents a problem the apppy  code could import modules to access additional \nfunctionality but those same modules would need access to the app instance If those module s \nimport the app instance from apppy  to gain access it creates a circular reference problem \nPython wont allow  \nAdding features and functionality to the current implementation of MyBlog leads to a \nstructure something like this  \n129Manning Publications Co  To comment go to  liveBook   \nRESOLVING THE APP INSTANCE PROBLEM  \nTo resolve the problem of modules accessing the Flask app instance youll need to change the \napplications structure The Flask app instance is the central hub around which the features of \na Flask based application revolve Besides the approute  functionality seen so far there \nis more utilized in later chapters  \nGiven its central role how do you gain access to it when needed Youll be following a two \nstep process to resolve the problem putting the bulk of the application code into a Python \npackage  and creating a factory function to instantiate the Flask app instance  \nThe use and creation of packages were presented in earlier chapters and used to create \nmodule namespaces As a refresher creating a package means creating a directory and adding \nan initpy  file to the directory The existence of this file lets Python import modules from \nthe package Adding packages can continue to any reasonable depth by creating packages \nwithin packages to create meaningful namespace hierarchies  \nIn earlier chapt ers the initpy  file need only exist to make a directory a Python \npackage Part of the activity of importing a module from a package also includes executing any \nPython code in the initpy  file The initpy  file in many packages doesnt contain \nany code but Python code can be added to it  \nAny module in the package automatically has access to the code and variables in the \npackage initpy  file and the initpy  file has access to the packages sibling \nmodules Packages will be useful when c reating the application factory function to create the \nFlask app instance  \n130Manning Publications Co  To comment go to  liveBook  MYBLOG RESTRUCTURING  \nYoure at an excellent point to restructure the file layout of the MyBlog application to create a \nmeaningful hierarchy Having an intentional file structure hel ps keep use of the files contained \nin the directory structure related and useful to your projects  \nThe first thing to do is rename the apppy  file to myblogpy  Then create a directory named \napp which is the root package directory for the MyBlog applicati on Move the static  and \ntemplates  directories into the app directory  \nInside the app directory create an initpy  file which turns the app directory into a \nPython package The directory structure should now look like this  \n     app \n        i nitpy  \n        static  \n           css  \n              basecss  \n           images  \n              myblogbannerpng  \n              myblogbanner50png  \n           js  \n               indexjs  \n        templates  \n            basehtml  \n            indexhtml  \n     myblogpy  \nAPPLICATION FACTORY  \nThe renamed myblogpy  file creates the Flask app instance directly and then uses it to connect \nURL endpoints to functionality Our goal is to get more control over creating  the app instance \nand make using it with external modules easier To do this youre going to implement an \napplication factory function called createapp inside the app package  initpy  file \nEdit the appinitpy  file and add this code  \n  \n131Manning Publications Co  To comment go to  liveBook  from flask import Flask rendertemplate  \nfrom datetime import datetime  \nfrom random import sample  \n \nclass PageVisit     A \n    COUNT  0  \n    def countsself  \n        PageVisitCOUNT  1  \n        return PageVisitCOUNT  \n \nclass BannerColors     A \n    COLORS    \n        lightcoral salmon red firebrick pink  \n        gold yellow khaki darkkhaki violet  \n        blue purple indigo greenyellow lime  \n        green olive darkcyan aqua skyblue  \n        tan sienna  gray silver  \n     \n    def getcolorsself  \n        return sampleBannerColorsCOLORS 5  \n \ndef createapp  \n    app  Flaskname     B \n \n    with appappcontext     C \n \n        approute  \n        def home  \n            return rendertemplateindexhtml data  \n                now datetimenow  \n                pagevisit PageVisit  \n                bannercolors BannerColorsgetcolors  \n             \n \n        return app     D \nA The support c lasses used by the home function  \nB Creates the Flask app instance inside the application factory createapp function  \nC Begin a context manager to initialize the rest of the app  \nD Return the app instance to the caller  \nThe code above is basically ever ything currently in the myblogpy  file placed inside the app \npackage initpy  file Because this replicates almost all of the code in myblogpy  that \nfile needs to be updated to this  \nfrom app import createapp  \n \napp  createapp  \nAll that myblogpy  does now is import the application factory createapp  and then calls it \nto create the Flask app instance Change your working directory to \nexamplesCH08examples02  and execute the commands to run the application from a Mac \nor Linux terminal  \nexport FLASKEN Vdevelopment  \nexport FLASKAPPapppy  \nflask run  \n132Manning Publications Co  To comment go to  liveBook  Or for a Windows system terminal  \nset FLASKENVdevelopment  \nset FLASKAPPapppy  \nflask run  \nNavigating to 127005000 in your browser will show the same application view as before \nbut using the new MyBlog a pplication structure  \n \nThe next step is to move the home  function to an external module where other features \ncan be added To do this youll make use of the Flask Blueprints capability  \n84 Namespaces  \nAny interesting application will have many features that necessitate interaction between those \nfeatures which add s complexity The MyBlog web application is no different and will acquire \nfunctionality focused on particular application parts Rather than roll all the other functional \nareas of code into one big Python file its better to break the work into modules so  you can \nwork in one technical domain at a time  \n133Manning Publications Co  To comment go to  liveBook  Just like youve seen in previous chapters where Python packages and modules contain \nhighlevel namespaces the same idea will be applied here In a web application this separation \nof concerns includes creat ing modules to manage and namespace functionality to create and  \nalso creates namespaces for the URL endpoints they intend to handle  \nThis is very much an application of concept of namespaces talked about in earlier chapters \nThe Flask framework implement s this idea though Blueprints  \n841  Flask Blueprints  \nIn the MyBlog application when the approute  decorator is applied to a function the \nfunction is registered with the server so it will be called when the URL endpoint path  is \naccessed by a browser  As the decorators name implies the  URL path parameter passed \nin is an application route being defined  \nThe approute  decorator lets you connect a URL route to the Flask application so it can \nprocess a request for the route with the decorated functi on All of the URL routes could be \nhandled this way but in a larger application this become unwieldly The Flask web framework \nprovides a feature called Blueprints to implement separate modules that service URL endpoints \nor routes  \nFlask Blueprints lets yo u separate specific functionality into modules A Blueprint is useful \nwhen creating logically distinct features like authentication authorization and other parts of \na web application In chapter 9 youll be adding user authentication to the MyBlog applic ation \nAuthentication secures access to almost all other pages and features MyBlog provides to users  \nGetting authentication working and contained in one place is valuable but this functionality \ncould be used in an entirely different web application with little trouble once complete  You \ncould make almost functionality youve created available to other projects by placing the \nblueprint  in a shared library for all your application projects to use You could also put it in a \nrepository like GitHub wh ere a team of developers could access it  \n842  Add Blueprints To MyBlog  \nThe MyBlog application creates the app instance inside the application factory createapp  \nfunction in the app package The home page is also contained with the createapp  function \nA little further in this chapter youre going to add an about page to the application Lets create \na namespace for the home page and future about page where they both can live Well call \nthat namespace intro as the home and about page will be introductory to the MyBlog \napplication  \nTo do that youll create an intro package within the app package As a first step create an \nintro  subdirectory within the app directory In that subdirectory create an empty initpy  \nfile which makes the intro  directory a Python package  \nTHE CONTENT  \nTheres a bit of a chicken and egg problem presenting how a Blueprint is created and used \nbut lets start with the intro namespaces functionality In the intro  subdirectory create an \nintropy  file with this content  \n  \n134Manning Publications Co  To comment go to  liveBook  from flask import rendertemplate  \nfrom datetime import datetime  \nfrom random import sample  \nfrom  import introbp    A  \n \nclass PageVisit  \n    COUNT  0  \n \n    def countsself  \n        PageVisitCOUNT  1  \n        return PageVisitCOUNT  \n \nclass BannerColors  \n    COLORS    \n        lightcoral salmon red firebrick pink  \n        gold yellow khaki darkkhaki violet  \n        blue purple indigo greenyellow lime  \n        green olive darkcyan aqua skyblue  \n        tan sienna gray silver  \n     \n \n    def getcolorsself  \n        return sampleBannerColorsCOLORS 5  \n \nintrobproute    B  \ndef home  \n    return rendertemplateindexhtml data  \n        now datetimenow  \n        pagevisit PageVisit  \n        bannercolors BannerColorsgetcolors  \n     \nA Import the as yet undefined intro blueprint instance introbp  \nB Notice how the home function is decorated with the introbp blue print instance route function rather than \napproute  \nTHE INTRO PACKAGE  \nThe intropy  file contains Blueprint functionality and uses the as yet undefined introbp  \nBlueprint instance The introbp  instance naming is a convention adding bp to the end of \nthe instance name indicates a Flask Blueprint The next thing to do is edit the empty \nappintroinitpy  file and create that introbp  instance  \nfrom flask import Blueprint   A  \n \nintrobp  Blue printintrobp name    B  \n    staticfolderstatic    B  \n    staticurlpathintrostatic     B \n    templatefoldertemplates    B  \n    B \n \nfrom appintro import intro    C  \nA Import the Blueprint class from the flask module  \nB Create a Blueprint instance initializing its name file name and paths to the static and template files  \nC Import the intro module functionality  \n135Manning Publications Co  To comment go to  liveBook  Because the initpy  file is inside a package the code above will be run every time \nanything within the package is  imported including the just created intropy  module The first \nthing the code does is import the Blueprint class from the flask module It then creates the \nintrobp  instance by instantiating the Blueprint class with some parameters  \nThe parameters give the Blueprint a name pass it the Python filename and set the \nstaticfolder  and templatefolder  parameters with path strings relative to the Blueprint \nlocation Relative to the Blueprint location means the introbp  Blueprint instance expects to \nfind the t emplates it will render and the static assets those templates might require on a path \nrelative to where the file containing the definition introbp  Blueprint exists in the application \nfile structure  \nThe staticurlpath  parameter is set to ensure the bluep rint relative path doesnt conflict \nwith the root static folder The value assigned to the parameter is the relative path from the \nroot directory to the Blueprints static directory  \nThis means the indexhtml template that provides the home pages content n eeds to \nmove somewhere the introbp  Blueprint can find It also means the static assets CSS files \nJavaScript and images need to move as well  \nUPDATED MYBLOG DIRECTORY  \nThe result  of the directory restructuring to put all the files related to the intro Blueprint exists \nin the examplesCH08examples03  directory from the code repository  \n     app \n        initpy  \n        intro  \n           initpy  \n           intropy  \n           static  \n              css  \n                 indexcss  \n              images  \n                 myblogbannerpng  \n                 myblogbanner50png  \n              js  \n                  indexjs  \n           templates  \n               indexhtml  \n        static  \n           css  \n              basecss  \n           images  \n              myblogbannerpng  \n              myblogbanner50png  \n           js  \n        templates  \n            basehtml  \n     myblogpy  \nIn the above directory structure there are two pairs of template and static directories The \nfirst being the original at the project root from the previous example and the second is the \nset under the intro package The second s et is what the introbp  Blueprint instance will use \n136Manning Publications Co  To comment go to  liveBook  when looking for templates and static files because of the values passed to the staticfolder  \nand templatefolder  parameters when the instance was created  \nIf those two parameters had not been set the introbp  instance would have looked for \ntemplates  and static  assets in the app root static  and templates  directories under the app \ndirectory Having the templates  and static  folders under the Blueprint packages you create \nmakes the Blueprint more self contai ned and portable to other projects  \nOne additional change has to be made to the indexhtml  file so it can access the static \nassets referenced by the HTML code The scriptscript  tags that references the \nJavaScript that reacts to the button clicks on t he home page needs to be updated in this way  \nscript src urlforstatic filenamejsindexjs script  \nThe only change is the addition of the single   character in front of  static  in the \nurlfor  statement The urlfor  statement wi ll resolve this path to the static directory \nrelative to the introbp  Blueprint and the indexjs  file will be pulled in correctly  \nAPP PACKAGE CHANGES  \nBefore you move on to create the new about page take a look at the appinitpy  file \nAll of the cod e related to the home page has just been moved to the intro  module so the file \nneeds to be updated  \nfrom flask import Flask  \n \ndef createapp  \n    app  Flaskname  \n    with appappcontext  \n        from  import intro    A  \n        appregisterblueprintintrointrobp    B  \n        return app  \nA Import the intro module containing the intro Blueprint  \nB Register the intro blueprint with the app  \nThe code above shows the application factory createapp  function simplified to remove the \nhome pages code which is now part of the intro  Blueprint  \nThis is all thats needed in the MyBlog application to get things rolling when the flask run  \ncommand is called By default the flask run  command looks  in the application which was in \nthe FLASKENV  environment variable for a Flask instance named app Finding the app instance \nwill start to run the application serving any URL endpoints that have been configured and \nregistered with the app  \n843  Create the Ab out Page  \nTo demonstrate how the introbp  Blueprint instance can contain features and functionality \nyoull add an about page to the MyBlog application To do so add a new handler function to the \nintropy  file and register it with the instance by decorating  it with a route  \n  \n137Manning Publications Co  To comment go to  liveBook  introbprouteabout    A  \ndef about  \n    return rendertemplateabouthtml    B  \nA Decorate the about function and register it as the handler for the new route about using the introbp Blueprint \ninstance  \nB Retrieve and  render the abouthtml template file from the introbp relative templates directory  \nThe code above creates a URL endpoint route to about  and registers the about  function \nas the handler when that route is navigated to by a browser To render an about H TML page \nan abouthtml  template is created in the appintrotemplates  directory thats relative to \nthe introbp  Blueprint  \n extends basehtml     A  \n \n block content     B  \n    div classcontainer fluid mt 3 \n        div classcard  \n            div classcard header  \n                About \n            div \n            div classcard body \n                h5 classcard titleInformation about this websiteh5  \n                p classcard text \n                    This is an implementation of the MyBlog blogging  \n                    web application This web application is developed ove r \n                    the course of multiple chapters from the book  \n                    The Well Grounded Python Developer  \n                p \n                p classcard text \n                    The intent of the MyBlog application is not to c reate \n                    a complete and fully feature blogging system there are  \n                    many of those in existence already The goal is to  \n                    progressively see and learn how to implement the big  \n                    picture th ats necessary to implement a complex system  \n                    like this  \n                p \n            div \n        div \n    div \n endblock   \nA Like indexhtml the about page inherits from basehtml and gets the same features it provides  \nB The about page replaces the content block with Bootstrap styled text information about the MyBlog application  \nIf you run the MyBlog application and navigate to 1270015000about in a browser the \nserver will respond by rendering the abouthtml  file to the display window The about page \nuses Bootstrap styles in the same manner as the home page did  \n138Manning Publications Co  To comment go to  liveBook   \n844  Refactored App Instance  \nAt this point the MyBlog application and Flask app instance in particular has  been refactored \nto support a growing web application better  \n139Manning Publications Co  To comment go to  liveBook   \nThe diagram shows the createapp  function connects to the functionality contained in \nthe external intro  module which has access to the app instance inside that functions scope \nThe app ins tance is returned by the createapp  function imported inside the scope of the \nmyblogpy  code The reference to the app instance is held by myblogpy  for the life of the \napplication  \n85 Navigation  \nThe MyBlog application now has two pages the home and about  pages You can navigate to \nthem directly by entering the URL into the browser but thats not very convenient Web sites \nprovide clickable links to navigate around the application and youll add that navigation using \nBootstrap  \nThe MyBlog site navigation  is provided by a Bootstrap navbar added to the basehtml  \ntemplate so its rendered on any page inheriting from it essentially sitewide The Bootstrap \nnavbar is visually attractive and responsive to device size It contracts to be a dropdown menu \nfor sma ll devices  \nYou can also add some interactive touches by making the currently active pages menu \nitem visibly highlighted This means if the about page is being viewed the about menu item is \nhighlighted Youll add this by making use of features in Jinja2  \n851  Creating Navigation Information  \nThere are two parts to add the navbar and make it interactive The first thing to do is edit the \nbasehtml  template file in the root templates folder and add this code at the top of the file  \n  \n140Manning Publications Co  To comment go to  liveBook   configure the navigation i tems to build in the navbar     A  \n set    B  \n  navitems      B  \n    name Home link introbphome    B  \n    name Aboutlink introbpabout    B  \n      B \n    B  \nA This is a Jinja2 comment in the template  \nB This creates  a variable named navitems containing a list of dictionaries with navigation information in each \ndictionary item  \nThe  set    block allows you to create a variable just as you would in Python code used \nby other parts of the template The navitems  list variable holds the navigation information \nnecessary to build the Bootstrap navbar links  \nLook at the link information in the navitems  structure The home page link is \nintrobphome  not just home  This would appear in an HTML link in a template somet hing \nlike this  \na hrefurlforintrobphomeHomea  \nThe urlfor  function knows how to find the page relative to the intro Blueprint and uses \nthe intro Blueprint instance introbp  It then finds the URL endpoint home relative to that \nYoull see how this is used when rendering the navbar below  \n852  Displaying the Navigation Information  \nThe second part of creating the navbar is further down in the basehtml  template file Just \nabove the  block content  endblock   insert this code  \n  \n141Manning Publications Co  To comment go to  liveBook      nav classnavbar navbar expandlg navbar dark bgprimary    A  \n      a classnavbar brand ml 2 hrefurlforintrobphome    B  \n        MyBlog    B  \n      a    B  \n      button classnavbar toggler  \n              typebutton  \n              databstogglecollapse  \n              databstargetnavbarSupportedContent  \n              ariacontrolsnavbarSupportedContent  \n              ariaexpandedfalse  \n              arialabelToggle navigation  \n        span classnavbar togglericonspan  \n      button  \n      div classcollapse navbar collapse  \n           idnavbarSupportedContent  \n        div classnavbar nav \n           for navitem in navitems     C  \n             if requestendp oint  navitemlink     D  \n              a classnav link ml2 active    E  \n                 ariacurrentpage    E  \n                 hrefurlfornavitemlink    E  \n                  navitemname    E  \n              a    E  \n             else   \n              a classnav link ml2    F  \n                 hrefurlfornavitemlink    F  \n                  navitemname    F  \n              a    F  \n             endif   \n           endfor   \n          div \n      div \n    nav \nA This begins the Bootstrap navbar styling section and sets the color and style of the navbar  \nB Creates the MyBlog brand icon as a clickable link to the home page  \nC Iterates over the navitems va riable  \nD Compares the current page to the current navitem link  \nE Output a highlighted link if the comparison was true  \nF Output a normal link if the comparison was false  \nTheres quite a bit going on here Much of the code is about getting Bootstrap styl e classes in \nthe right places with the correct context and information This is a lot of styling information to \nwork with and learn when using Bootstrap However compared to providing the same styling \nfunctionality with hand written CSS code its minuscu le \nAn interesting part of the template code is the for loop and the if statement within it The \nfor loop iterates over the previously created navitems  list pulling out one navitem  at a time \nThe if statement uses the built in object and attribute requestendpoint  to determine if the \npage being currently built is the same as the navitemlink  value  \nIf the current page is equal to the navitem  link the navbar menu item is an html link \ncontaining the class active  and the html attribute ariacurrent  page  The Bootstrap \nactive  class adds visual highlighting to the menu item The HTML attribute ariacurrent \npage  helps users navigating to the page using a screen reader for accessibility  \n142Manning Publications Co  To comment go to  liveBook  If the current page is not equal to the navitem  link the n avbar menu item is rendered in \nits default state with no highlight applied  \n853  MyBlogs Current Look  \nIf you change your working directory to examplesCH08examples04 theres  a fully \nfunctional example program  that implements what weve gone through  Use the commands \nyouve seen before to run the application for Mac and Linux users  \nexport FLASKENVdevelopment  \nexport FLASKAPPmyblogpy  \nflask run  \nAnd for Windows users  \nset FLASKENVdevelopment  \nset FLASKAPPmyblogpy  \nflask run  \nWhen the application is running use your browser to navigate to 1270015000 and \nyoull see the application  \n143Manning Publications Co  To comment go to  liveBook   \nThe image shows the current MyBlog application with the newly added Bootstrap navbar \ndirectly below the banner This is the expanded view with the hom e page menu item \nhighlighted by the basehtml  template code shown previously  \nIf you start to minimize the browser window horizontally youll see the navbar navigation \nwill be reduced to a dropdown button on the right side of the navbar If you click that  button \nthe navigation menu items will appear allowing access to the Home and About links  \n144Manning Publications Co  To comment go to  liveBook   \nIf you continue to minimize the browser the media query in the basecss  file will become \nactive and the banner will be removed providing more screen real esta te for smaller devices  \n145Manning Publications Co  To comment go to  liveBook   \n86 Application Configuration  \nThe MyBlog application has come a long way since its first incarnation and theres  still some \nwork to do to improve  it further The development youre  embark ing on targets  making the \nconfiguration sustainability  and maintainability of the application better and easier  \n861  Configuration Files  \nThe MyBlog application will eventually rely on functionality that needs configuration data \nSending an email to an SMTP Simple Mail Tr ansfer Protocol email server accessing a \ndatabase to store users and blog posts and security data for the Flask application itself  \nIn addition to the configuration data needed by the MyBlog feature set youll want to set \nup distinct data for the devel opment and production environments  \n146Manning Publications Co  To comment go to  liveBook  The configuration data creates an environment in which the MyBlog application will run A \ndevelopment environment often provides additional debugging services and access to the inner \nworkings of the application If you develop an application in a team different configuration \ndata is needed to create a staging environment A staging environment is where the team can \ntest the various parts of the application before being pushed into production A production \nenvironment re moves the debug information and restricts access to only the feature set \nintended to be publicly available  \n862  Private Information  \nAny application whose feature set includes accessing systems or services requiring usernames \npasswords or API keys needs to k eep that information private For example the MyBlog \napplication will automatically send emails to users and contact the system administrator using \nemail  \nThe MyBlog application wont  handle sending an email directly  but will instead use an \nexternal SMTP  email server The app will need to authenticate the email server using a \nusername and password and possibly an API key While the MyBlog application will need access \nto this information you dont want this information to become available in the public do main  \nIt would be easy to embed this information directly in the code but that pretty much \nassures it would become public Unintentionally making private data public could happen as \neasily as embedding private information in the code and then checking tha t code into a shared \nrepository like GitHub Services like GitHub provide a valuable resource to developers but they \ndont automatically protect you from publishing things you didnt intend to  \nAs a developer youll want to protect yourself and your emplo yer so the services your \napplication uses dont get abused Besides being good practice if the services cost money \nfailing to protect them could cost more than you intended  \nOne way to separate private information from an application but still have acces s to it is to \nstore the information in separate files the application can access at runtime These files arent \nchecked in to a repository so they are at less risk of becoming public Additionally multiple \nversions can be maintained for the different env ironments the application would run in like \ndevelopment staging and production  \n87 Flask Debug Toolbar  \nTo make introducing configuration files more interesting youll be using them to add the Flask \nDebugToolbar  httpsgithubcomjazzbanddjango debug toolbar  to the MyBlog application \nwhen its running in development mode The toolbar is useful when developing a Flask \napplication It shows internal information right in the browser window that would otherwise \nonly be available by debugging the application itself or by examining log informatio n \nThe configuration files youll add will control information the DebugToolbar requires to run \nand dynamically installs the toolbar only in development environments The DebugToolbar \nmodule needs to exist in the currently active Python virtual environment  \npip install flask debugtoolbar 0110  \n147Manning Publications Co  To comment go to  liveBook  871  FlaskDynaConf  \nThe configuration information is stored in TOML files which are human readable and supports \ndata types for the information contained within them To gain access to the configuration TOML \nfiles youll  need to install the dynaconf module into the current Python virtual environment  \npip install dynaconf 312 \nThe module contains a class specific to Flask that will automatically add configuration \ninformation to the Flask configuration system  \nThe Flask D ebugToolbar requires the flask app to have a SECRETKEY  value The \nSECRETKEY  value is also used for security aspects of a Flask application used in later chapters \nIn the configuration file it looks like this  \nsecretkey random string of characters  \nFollowing my own advice the actual secret key used during the example code development \nisnt revealed The secret keys value should be a cryptographically strong string of characters \nthat isnt publicly known You can generate a SECRETKEY  value with the  following code  \npython \n import secrets  \n printsecretstokenhex24  \nb3a40bcc3bcc5894c390681396ec04687ad869c6546cdff9     A \nA Sample output  \nThe secrets  module provides cryptographically strong random values better suited to manage \nprivate informat ion The printed results are copied between the quotes as the secretkey  \nvalue in a file named secretstoml  \ndefault  \nsecretkeyrandom string of characters  \nThe file structure contains sections indicated by the default  line and a set of keyvalue  \npairs of data Because the secretkey  is defined within the default  section that value is \navailable in any other section unless it is overridden explicitly by another secretkey  \nkeyvalue pair  \nTo complete the configuration to add the Flask DebugToolba r requires the creation of \nanother TOML file settingstoml  \n  \n148Manning Publications Co  To comment go to  liveBook  default    A  \n \ndevelopment    B  \nflaskdebug  true    C  \nextensions  flaskdebugtoolbarDebugToolbarExtension    D  \ndebugtbenabled  true    D  \n \nproduction    D  \nflaskdebug  false    E  \nA No default information is currently defined  \nB Begin the definition of configuration information for development environments  \nC Enable the Flask debug mode  \nD Begin the definition of the configuration for production environmen ts \nE Disable the Flask debug mode  \nThe configuration is separated into three sections default currently empty  \ndevelopment  and production  and could be divided into as many as needed Notice \nvalues have data types and the extension  keys value i s a list of strings The flaskdebug \nkeyvalue pair has a value of true which is a Boolean  \nEach section aside from default  is keyed to the Flask environment variable initialized \nbefore running the application  \nexport FLASKENVdevelopment  \nOnly the in formation under the default  and the indicated environment will be read from \nthe settingstoml  file at run time The settingstoml  files can be included in the repository \nas its useful to anyone wanting to work on the application The secretstoml  should  be \nexcluded from the project repository because it contains information that shouldnt be publicly \navailable  \nCONFIGURING MYBLOG \nTo use the configuration information you need to make changes to the MyBlog application \nBecause the configuration is central to the application make these changes to the \nappinitpy  file \n  \n149Manning Publications Co  To comment go to  liveBook  import os  \nimport sys  \nfrom flask import Flask  \nfrom dynaconf import FlaskDynaconf    A  \n \ndef createapp  \n    app  Flaskname  \n    dynaconf  FlaskDynaconfextensionslistTrue    B  \n \n    with appappcontext  \n        osenvironROOTPATHFORDYNACONF  approotpath    C  \n        dynaconfinitappapp    D  \n        appconfigSECRETKEY  bytearrayappconfigSECRETKE Y UTF 8    E  \n        from  import intro  \n        appregisterblueprintintrointrobp  \n        return app  \nA Import the Flask specific dynaconf class  \nB Create an instance of the FlaskDynaconf class activating the module loader feature  \nC Inform dynaconf where to look for configuration toml files  \nD Configure the Flask app based on the dynaconf read configuration files  \nE Translate the SECRETKEY string into a bytearray as recommended by the Flask documentation  \nThe FlaskDynaconf  class searches f or configuration files based on file naming patterns and \ndirectory structures and finds both the secretstoml  and settingstoml  files It parses \nthem and configures the Flask appconfig  object accordingly  \nRunning the MyBlog application in examplesCH08 examples05  in the development \nenvironment renders the home page in the browser like this  \n150Manning Publications Co  To comment go to  liveBook   \nThe initial view doesnt show much difference except for the small tab in the upper right \ncorner of the window labeled FDT for Flask Debug Toolbar Clicking on t his tab opens the \ntoolbar and presents this view  \n151Manning Publications Co  To comment go to  liveBook   \nThis screen shows the Debug Toolbar menu providing access to the information available \nClicking on the Templates menu item loads the working area of the display with information \nabout the home page templ ate \n152Manning Publications Co  To comment go to  liveBook   \nNot all the menu options provide useful information The Logging selection doesnt show \nanything currently but will after adding a logging configuration in the next section  \n88 Logging Information  \nFlask uses the Python logging module to log information  to standard output STDOUT as \nyouve seen when running the MyBlog application from the terminal command line  \nAlmost any coding a developer does leads to inserting print statements into the code to get \ninformation out of a running application A better approach to output this kind of information \nis to use the Python logging system  \nLogging is a simple way to get a snapshot of whats happening at that point of execution \nin the application The same facility is available when developi ng a web application through \nthe logging system Logging information to STDOUT is beneficial in a long running server \napplication  \nThe logging system has advantages over print statements it supports severity levels for \nthe logged information The severity  levels allow you to raise and lower the level of logs the \napplication will produce For example you can output useful development information at the \nDEBUG level The configuration of the application running in a production environment can be \n153Manning Publications Co  To comment go to  liveBook  raised above  the DEBUG level and none of the developer debug logs will be produced The \ndebug log statements can be left in place in the code  \nIt can also provide a standardized format thats chronologically arranged and useful when \nlooking for events or the order of operations for a sequence of events  \nThe Python logging system supports multiple paths or handlers for logged messages with \ndifferent endpoints These endpoints can be as simple as logging to STDOUT or more \nsophisticated like sending an email or text mes sage to a service in response to a logged \nmessage  \nFor the MyBlog application the logging configuration is relatively simple sending logs to \nSTDOUT with a particular message format  \n881  Configuration  \nThe Python logging module supports configuration from a di ctionary and thats what MyBlog \nwill use Configuring the logging system is another responsibility youll add to the app \npackages createapp  function  \nAs mentioned the logging system uses logging levels ranging from NOTSET  to CRITICAL  \nwhere NOTSET  equals 0 and CRITICAL  equals 50 In my experience NOTSET  is never used and \nis there to round out the set Besides providing some context about the logged message the \nlogging systems level acts as a simple filter If the logging systems level is set to INFO for a \nparticular logger only messages with a level equal to INFO or higher will be logged  \nThe DEBUG  value 10 and INFO value 20 levels are of interest for the development and \nproduction environments the MyBlog application runs in In development the level can be set \nto DEBUG  and all logged messages with a level of DEBUG  or higher will be logged In a production \nenviron ment the level can be set to INFO  and all log messages with a level of INFO or higher \nwill be logged and DEBUG  level messages will be ignored  \nBy differentiating the two environments logging levels you can add DEBUG  level messages \ninto an application d uring development and leave them in place In a production environment \nthose messages wont be logged  \nThe Python dictionary to configure logging is created by reading a logging configuration \nYAML file with a support function in appinitpy  \ndef conf igureloggingapp dynaconf  \n    loggingconfigpath  Pathapprootpathparent  loggingconfigyaml  \n    with openloggingconfigpath r as fh  \n        loggingconfig  yamlsafeloadfhread  \n        envlogginglevel  dynaconfsettingsget logginglevel INFOupper  \n        logginglevel  loggingINFO if envlogginglevel  INFO else loggingDEBUG  \n        loggingconfighandlersconsolelevel  logginglevel  \n        loggingconfigloggerslevel  logginglevel  \n        loggingconfigdictConfigloggingconfig  \nThe configurelogging  function has a leading underbar character a convention \nindicating its intended to be private to the module The leading underbar is only a convention \nand does not add any privacy pro tections to the function  \n154Manning Publications Co  To comment go to  liveBook  The function creates an envlogginglevel  variable based on the environment string \npassed to the function The variable is used to create the configuration dictionary to control \nthe logging level console STDOUT handler  \nThe loggi ng configuration information is in a file named loggingconfigyaml  at the \nproject directory level  \nversion 1  \ndisableexistingloggers true    A  \nformatters  \n  default  \n    format asctimesmsecs03d levelnames in modules messages  \n    datefmt Y md HMS  \nhandlers  \n  console    B  \n    level DEBUG    B  \n    class loggingStreamHandler    B  \n    formatter default    B  \n    stream extsysst dout    B  \nloggers  \n   \n    level DEBUG  \n    handlers console  \n    propagate false  \nA Disable any existing loggers created by Flask  \nB Configure only one handler to send errors to STDOUT  \nThe structure creates the formatters used by the handlers which  the loggers use The \nformatters change the logging message default format used by the MyBlog application  \nAdd a logginglevel  configuration keyvalue to the settingstoml  file to both the \ndevelopment and production sections  \ndevelopment  \n \nlogginglevel  DEBUG  \n \nproduction  \n \nlogginglevel  INFO  \nTwo changes need to be made to the createapp  function in appinitpy  to use \nthe dictionary returned by the configurelogging  function Add these two lines at the \nbottom of the import section  \nimport logging  \nimport loggingconfig  \nand add this line to the createapp  function immediately below the code that converts the \nappconfigSECRETKEY  to a bytearray  \nconfigureloggingapp dynaconf     A \nA Calling the function configures logging for the MyBlog application  \n155Manning Publications Co  To comment go to  liveBook  You can now add DEBUG  level log messages where needed to help develop the MyBlog \napplication The home and about pages can be modified to demonstrate this  \nlogger  getLoggerfile  \n \nintrobproute  \ndef home  \n    loggerdebugrendering home page    A  \n    return rendertemplateindexhtml data  \n        now datetimenow  \n        pagevisit PageVisit  \n        bannercolors BannerColorsgetcolors  \n     \n \nintrobprouteabout  \ndef about  \n    loggerdebugrendering about page    B  \n    return rendertemplateabouthtml  \nA Send a DEBUG level message to the logging system that the home page has been rendered  \nB Send a DEBUG level message to the loggi ng system that the home page has been rendered  \nWhen starting and running the MyBlog application a DEBUG  log message will be present in the \nlogging output whenever the application home or about pages are accessed If you run the \ncode in examplesCH09exam ples07 and navigate to the about and home pages  the log \noutput will look similar to this  \n20210108 152939030 WARNING in internal   Debugger is active  \n20210108 152939055 INFO in internal   Debugger PIN 107 111649 \n20210108 152939104 INFO in myblog MyBlog is running  \n20210203 135657535 DEBUG in intro rendering about page  \n20210108 152955707 DEBUG in intro rendering home page  \nIf you set the environment variable FLASKENVproduction  and run the MyBlog \napplication any DEBUG  messages generated by the app wont be present in the logging output \nSuppressing DEBUG  messages is useful to keep from cluttering the logging output with \ndevelopment information  \n89 Adding a favicon  \nA favicon is a graphic image used as a shortcut to represent a website Supporting a favicon \ngives the MyBlog application s ome additional professionalism so well add one  \nThe code in examplesCH09examples07  includes two versions of the MyBlog brand \ngraphic one in the ico format icon and one in the svg format Scalable Vector Graphics \nThe first will give a browser window  tab holding the MyBlog application the small brand icon \nThe second appears alongside t he MyBlog  text in the navigation bar  In this context the \nbrand icon is a visual shorthand associated with the MyBlog application  \nThe faviconico  file has to be served from the MyBlog application when requested by the \nbrowser The browser expects to fi nd it in the root folder which wont be part of any Flask \nblueprint in MyBlog The faviconico  is made available by adding a route to it directly in the \nappinitpy file inside the with appappcontext context manager  \n156Manning Publications Co  To comment go to  liveBook  approutefaviconico  \ndef favicon  \n    return sendfromdirectory  \n        ospathjoinapprootpath static  \n        faviconico  \n        mimetypeimagevndmicrosofticon  \n     \nThe code registers the URL route where the browser is looking for the favicon function \nFlask uses the sendfromdirectory  function to get the files path the file name and mime \ntype and return it to the browser The sendfromdirectory  function has to be imported to \nmake it available The code in the repository does this  \nYoull also ad d the MyBlog brand svg image in the navigation bar built in the basehtml  \ntemplate The image is added immediately before the MyBlog text in the navbar brand section \nof the template  \nimg srcurlforstatic filenameimagesmyblogbrandiconsvg  \n     alt \n     width30  \n     height24  \nThis HTML code adds an image link that finds the myblogbrandiconsvg  file in the \napplication root static folder and scales it appropriately for display in the navigation bar  \nRunning the MyBlog application  in examplesCH09examples07  presents a browser \ndisplay like this  \n157Manning Publications Co  To comment go to  liveBook   \nThe screenshot  shows the faviconico  file displayed in the browser tab containing the \nMyBlog application The brand svg file is displayed immediately to the left of the MyBlog  text \nin the navigation bar Both the brand graphic and name are clickable links returning the user \nto the applications home page  \n810 Summary  \nYouve covered a lot of material that helps bring the initial realization of the MyBlog application \nto a great place  \n Youve  integrated Bootstrap into the MyBlog application  \n Youve refactored the MyBlog application for further growth  \n Created namespaces within the app using Flask Blueprints  \n Youve made configuration information external to the app and able to be kept private  \n Added the Flask DebugToolbar when working on the app in development environments  \n Youve added environment aware configured logging  \nHaving Bootstrap integrated into the application goes a long way towards making MyBlog \nlook polished and professiona l while at the same time reducing the development workload of \ncreating that look and feel  \n158Manning Publications Co  To comment go to  liveBook  The refactoring work done to MyBlog gives you a good foundation from which to grow the \napplication further Adding new features will be simpler because backtracking  to address initial \nassumptions will be avoided  \nBy adding external configuration files to MyBlog youve enabled creating multiple runtime \nenvironments and moved sensitive information to a more protected space The use of \nconfiguration files also let you a dd the Flask DebugToolbar and logging levels to the MyBlog \napplication  \nYouve taken some web development concepts and tools in hand where we can examine \nthem with a magnifying glass to see their details and how they fit together Being able to look \nclosel y at how modules work and connect will be key to adding new features  \nThe next chapter will build on this excellent foundation by adding user \nauthenticationauthorization and creation allowing the MyBlog  application to secure pages to \nonly logged in users  \n  \n159Manning Publications Co  To comment go to  liveBook  9 \nDo I Know You  \nThis chapter covers  \nFlask Sessions\nRemembering the User\nLetting Users Log In\nRegistering New Users\nAllowing Users to Reset Forgotten Passwords\nAllowing Existing Users to Change Their Passwords\nSecuring Routes in the Application to Logged in Users\nThe MyBlog web application supports many users so they can post interesting content that will \nbe read by the community  That community can read and comment on the content posted by \nother us ers However its unlikely users want the content they created edited or deleted by a \nuser other than themselves or the MyBlog administrators and editors  \nTo control who can do what on the MyBlog site well need to identify who users are and \nwhat they ha ve permission to do Identifying users on a web application is called authenticating \na user so the application has a way to ensure a user is who they say they are Deciding what \nan authenticated user can do while using a web application is called authoriza tion and lets the \napplication know what an authenticated user has permission to do  \nProviding authentication and authorization to the MyBlog  application is the intent of this \nchapter Doing so with a web application presents some unique challenges  \n91 The HTTP Protocol is Stateless  \nThe MyBlog web application follows the requestresponse model supported by HTTP The user \ncreates an HTTP GET reques t from the browser and the server responds by sending the \nrequested HTML CSS JavaScript and image files back Nothing in that transaction implies the \nserver has any prior knowledge about the requests it received The HTTP protocol is stateless \n160Manning Publications Co  To comment go to  liveBook  meaning each request is complete and independent from any previous request The server \nmaintains no memory of past present or future requestresponse transactions  \nIn this model the request has to contain all the information necessary so the server can \nbuild the  appropriate response Even if the same request is made to the server multiple times \nthe server will rebuild the same response each time barring any response caching  \nIf servers using the HTTP protocol have no memory how do retail shopping sites know i ts \nyou when you purchase things How does the web application running on that site remember \nthe shopping cart youve created across multiple requestresponse transactions And most \nimportantly how does a shopping site ensure the credit card belongs to th e user making the \npurchase request Answering these questions implies adding state information to the \ntransactions between the clients browser and the web application server  \n911  Sessions  \nA session allows the server to relate information it has about a user to incoming requests The \nsession commonly establishes the relationship with a cryptographically strong unique id value \ngenerated by the server and saved as a cookie in the client browser This is known as a session \ncookie though the clients actual cooki e name can vary depending on the server framework in \nuse \nThe session usually contains a unique identifier the server encrypted when it was created \nTo prevent the session being modified on the client side the unique identifier is encrypted \nbefore being p assed to the client Then every request the client makes includes the encrypted \nidentifier The server can decrypt the identifier and use it to find the users session in the key \nvalue store on the server  \nWhen a request with a session arrives at the serve r the server can decrypt the unique \nidentifier and relate it to a specific user and any user information the server is maintaining \nFor example a users name shopping cart and more By layering a session on the HTTP \nprotocol the server can keep state information from one request to the next  \nFLASK SESSIONS  \nFlask supports the use of sessions and makes them available to the MyBlog application A \nsession cookie doesnt exist between a client and the server until the server explicitly creates \nit You can c reate a session by adding information to it in any URL route handler code you \ndevelop When that URL is accessed the session is created and added to the client as a cookie \nin the response  \nFlask uses the SECRETKEY  to cryptographically sign the session co okie when created By \ndoing this the cookie can be viewed on the client side but cant be modified unless the \nSECRETKEY  is available As mentioned in the previous chapter when the SECRETKEY  was \nadded to enable the Flask DebugToolbar its essential the SECRETKEY  be cryptographically \nstrong and kept private  \nBy default session cookies exist until the client browser is closed This can be changed by \nmodifying the sessions permanent attribute which is a Python datetimetimedelta  value \nYou could make a session exist for a year by doing this in the server code  \n  \n161Manning Publications Co  To comment go to  liveBook  sessionpermanent  True     A \napppermanentsessionlifetime  datetimetimedeltadays365     B \nA Marks the session as permanent  \nB Uses the Flask app instance to set the lifetime of the pe rmanent session  \nOnce a session exists you can use it to maintain information across the requestresponse \ntransaction Using a session cookie for information storage is convenient but has limitations \nA cookie has a memory size limit imposed on it by the browser which can vary from browser \nto browser The memory constraint on cookie size is one issue but another is the size of the \ndata going across the internet for every requestresponse message The information stored in \na cookie is sent back and forth with every transaction between the client and the browser \nEven in the age of widely available high speed internet access thats still a concern especially \nfor mobile devices  \nThe solution to both these concerns is to use the session cookie to store the unique user \nidentifier value and use that on the server side to retrieve all the other information necessary \nto build the correct response to the request  \nThe MyBlog application will provide different access depending on whether or not the user \nis known an d logged into the system and the users role Knowing who the user is and keeping \ntrack of their role means the system must remember that users information Well get started \nadding that ability to the MyBlog application  \n92 Remembering Someone  \nRemembering w ho the user is gives the MyBlog application ways to control what features are \navailable to users Viewing blog entries and comments are open to anyone but the ability to \nadd a new blog entry or comment on an existing one is reserved for known users  \nThe u ser information described above can be stored on the server and retrieved using the \nsession cookies unique user identifier A unique user identifier value has to be created and \nstored and then used to authenticate that a user is who they say they are For  a website \nidentifying a user is performed by logging a user in through an authentication system  \n921  Authentication  \nThe MyBlog application uses the flasklogin  extension as an installable module from the Python \nPackage Index  httpspypiorg  The flasklogin extension gives the MyBlog application \nsession management abilities and tools to log users in and out and handle the so mewhat \ndifficult remember me functionality It also handles adding protection to URL endpoints so \nonly authenticated users can access them  \nThe login process follows the common emailpassword pattern to authenticate users The \nusers email address is a v alid choice as a unique identifier because it is already unique and \nlikely well remembered From a high level view the login system youre going to create looks \nlike this  \n162Manning Publications Co  To comment go to  liveBook   \nThe user login process follows this sequence of steps  \n1 The user makes a GET reque st from their browser to the authentication login URL \nendpoint  \n2 The authentication login handler responds to the GET request by returning the \nrendered login HTML page  \n3 The user fills out the login page form fields and submits the form  \n4 The form is submitted t o the authentication login system using a POST request  \n5 The login system tries to find a user with a matching email and password using the \nmodels supported by the application  \n6 The User model tries to find a user with a matching email and password in the \napplication storage system  \n7 If a matching user is found the user is directed to the home page or the original \ndestination page the user wanted to view  \nBecause powerful computer CPU and GPU hardware are readily available the ability to \ncrack user passwords has  become far more accessible for hackers to implement The MyBlog \napplication uses the Flaskbcrypt extension to hash the passwords stored at the server The \nbycrpt functionality creates a computationally expensive hash making it resistant to brute force \nattacks even with increasing computer power Plain text passwords should never be stored in \na database and should always be cryptographically hashed first  \nThe diagram above shows a storage mechanism accessed by step six The flasklogin \nextension requires t his storage to persist users to retrieve and identify them later To do this \nyoull be using SQLAlchemy to manage the user data in an SQLite database This chapter \n163Manning Publications Co  To comment go to  liveBook  focuses primarily on authenticating users and will defer more detailed information about \nSQLAlchemy and utilizing a database till the next chapter  \nTo install all the modules necessary to run the example applications for this chapter run \nthe following command from within a Python virtual environment using the requirementstxt  \nfile from the repo sitory for this example  \npip install r requirementstxt  \nThis makes the modules available to you in the code youll create to add authentication  \nLOGINMANAGER  \nThe first thing to do is add the modules necessary for authentication password encryption \nand u ser persistence modules to the appinitpy  module Adding them to the import \nsection at the top of the module makes the functionality available to the createapp  \napplication factory function  \nimport os  \nimport yaml  \nfrom pathlib import Path  \nfrom flask import Flask sendfromdirectory  \nfrom dynaconf import FlaskDynaconf  \nfrom Flasksqlalchemy import SQLAlchemy     A \nfrom Flaskmigrate import Migrate     B \nfrom flasklogin  import LoginManager     C \nfrom Flaskbcrypt  import Bcrypt     D \nimport logging  \nimport loggingconfig  \nA Import the SQLAlche my functionality to manage the data persistence  \nB Import the data migration functionality detailed in the next chapter  \nC Import the LoginManager to handle user authentication  \nD Import the Bcrypt module to cryptograghically encrypt user passwords  \nThen right above the createapp  function add new global instance variables for the new \nfunctionality  \nloginmanager  LoginManager     A \nloginmanagerloginview  authbplogin     B \nFlaskbcrypt   Bcrypt     C \ndb  SQLAlchemy     D \nmigrate  Migrate     E \nA Create an uninitialized instance of the LoginManager class  \nB Point the LoginManager instance to the Blueprint view to be created later  \nC Create an uninitialized instance of the Bcrypt class  \nD Create an uninitialized instance of the SQLAlch emy class  \nE Create an uninitialized instance of the Migrate class  \nInside the scope of the createapp  function in the initialize plugins section initialize the new \ninstance variables youve just created with the app instance variable  \n  \n164Manning Publications Co  To comment go to  liveBook  osenvironROOT PATHFORDYNACONF  approotpath  \ndynaconfinitappapp  \nloginmanagerinitappapp  \nflaskbcryptinitappapp  \ndbinitappapp  \nmigrateinitappapp db     A \nA The migrate instance initialization requires both the app and db instances as parameters  \nIn the import routes section import an auth module youll create shortly  \nfrom  import intro  \nfrom  import auth  \nIn the register blueprints section register an aut h blueprint that will be soon  \nappregisterblueprintintrointrobp  \nappregisterblueprintauthauthbp  \nAdd this new section just above the return app  line at the bottom of the createapp  \nfunction  \ndbcreateall     A \n \nfrom models import Role     B \nRoleinitializeroletable     B \n \nappcontextprocessor     C \ndef injectpermissions     C \n    return dictPermissionsRolePermissions     C \nA Creates the SQLite database if it doesnt already exist  \nB Initializes the Role lookup table with  data  \nC Makes the Role Permissions available within the context of a Jinja template  \nThe new code above uses functionality thats defined in sections coming up in this chapter \nThis work initializes the authentication encryption and database  systems when ever the app \npackage is accessed or imported The next step is to create the auth Blueprint that handles \nthe user authentication  functionality  \nAUTH BLUEPRINT  \nLike the intro Blueprint the auth Blueprint is a Python package containing distinct functionalit y \nCreate a directory named auth under the app package and create an initpy  file inside \nof the auth directory The initpy  file creates and initializes the authbp  Blueprint \ninstance  \nfrom flask import Blueprint  \n \nauthbp  Blueprint  \n    authbp name  \n    staticfolderstatic  \n    staticurlpathauthstatic  \n    templatefoldertemplates  \n \n \nfrom  import auth  \n165Manning Publications Co  To comment go to  liveBook  This code creates the authbp  Blueprint instance whenever the auth package is accessed \nor imported The actual au thentication functionality is contained in the authpy  file also created \nunder the appauth  directory  \nfrom logging import getLogger  \nfrom flask import rendertemplate redirect urlfor request  \nfrom  import authbp    A  \nfrom models import dbsessionm anager User    B  \nfrom  import loginmanager    C  \nfrom forms import LoginForm    D  \nfrom flask login import loginuser logoutuser currentuser  \nfrom werkzeugurls import urlparse  \n \nlogger  getLoggername  \n \nloginmanageruserloader     E \ndef loaduseruserid     E \n    with dbsessionmanager as dbsession     E \n        return dbsessionqueryUsergetuserid     E \n \nauthbproutelogin methodsGET POST     F \ndef login  \n    form  LoginForm  \n    if formvalidateonsubmit  \n        with dbsessionmanager as dbsession     G \n            user  dbsessionqueryUserfilterUseremail  \nformemaildataoneornone     H \n            if user is None or not userverifypasswordformpasswo rddata     I \n                flashInvalid email or password warning     I \n                return redirecturlforauthbplogin     I \n            loginuseruser rememberformremembermedata     J \n            next  requestargsgetnext     J \n            if not next or urlparsenextnetloc       J \n                next  urlforintrobphome     J \n            return redirectnext     J \n    return rendertemplateloginhtml formform  \nA Import the authbp Blueprint instan ce from the package  \nB Import the models which will be created next  \nC Import the loginmanager instance from the package  \nD Import the LoginForm which will be created in the next section  \nE Function called every time the loginmanager needs to determine  if the user exists  \nF The login function registered with the authbp Blueprint for the login route  \nG Begin a database session context manager scope to close the database session when the scope ends  \nH Get a user from the database based on the form ema il value  \nI If no user was found or the password doesnt verify warn the user and redirect to the login  \nJ Set the logged in user and create a session cookie  \nThe authpy  module creates a route called login associated with the authbp  Blueprint \ninstan ce and associates it with the login  handler function The login handler function \nhas two purposes When it is called because of an HTTP GET request it returns the rendered \nloginhtml template created in the next section If the function is called as the result of an \nHTTP POST request it will process the contents of the form p arameters in the loginhtml  \ntemplate  \n166Manning Publications Co  To comment go to  liveBook  The if formvalidateonsubmit  code determines if the HTTP request method is a \nGET or a POST and branches accordingly If the method is a POST it will validate the form \nparameters against a set of rules configured i n the LoginForm  class If the form parameters \nare valid the function takes the following actions  \n Get a user from the database using the form email parameter  \n If the user does not exist or the form password parameter is not valid  \no Flash a warning message to the user and re render the login screen Flask uses \nthe term Flash to mean presenting additional information to the user  \n If the user does exist and the form password parameter is valid  \no Update the login manager system about the user and create a session cookie to \nremember them  \no Get the page the user was trying to navigate to when presented with the login \naction  \no Validate the request for that page if the netloc attribute is valid  \no Redirect the user to that page or to the home page if netloc is empt y \nUSER AND ROLE MODELS  \nOne of the goals of adding a login mechanism to the MyBlog application was to layer state \ninformation on top of the HTTP protocol to remember the user Using the flasklogin system \nyoure getting closer to that but we need to have a  unique identifier to save in the session \ncookie The identifier can be used to retrieve information about the user  \nBoth of those things require us to define and implement a user data structure Additionally \nwe want to give users a role to control what they can do in the MyBlog application We will \ncreate Python SQLAlchemy classes called User and Role that will be stored in an SQLite \ndatabase  \nSQLite is a relational database system with modules to access it included with Python An \nindepth discussion a bout databases and accessing them with SQLAlchemy will be presented \nin the next chapter For now here is an ERD Entity Relationship Diagram showing the User \nand Role models youre about to create  \n167Manning Publications Co  To comment go to  liveBook   \nThe diagram shows a one tomany relationship between t he roles and users a role can be \nused by many users but a user can have only one role  \nThe MyBlog application will store and present information it remembers like users their \nroles blog content and comments Each item will need to be defined and impl emented as you \ncreate more features the application supports Because everything the MyBlog application can \npresent is stored in a database youll start by using a database term models  \nThe appmodelspy  module holds all of the database models that defin e and implement \neverything the MyBlog application stores Since youre at the point of needing a User model to \nenable users to login into the system lets create the appmodelspy  file now The first thing \nto do in the appmodelspy file is to import the modules needed  \nfrom contextlib import contextmanager  \nfrom enum import Flag auto  \nfrom flaskbcrypt  import   \n    generatepasswordhash  \n    checkpasswordhash  \n \nfrom  import db  \nfrom flasklogin  import UserMixin  \nfrom uuid import uuid4  \nfrom datetime import datetime  \nThe import statements give the appmodelspy  module access to functionality needed to \ncreate the User and Role classes The User class is used with the flasklogin extension to \nauthenticate a user of the MyBlog application Authent icating a user means identifying and \nverifying the user is known to the MyBlog application and can access features available to \nknown users  \nWell begin by creating the User class The User contains information about the user their \nname email address pa ssword and the unique id associated with the user that will be stored \nin the HTTP session cookie  \nWhen creating a database table a common practice is to use an auto incrementing integer \nvalue as the unique id associated with each record in the table Ins tead of this the MyBlog \n168Manning Publications Co  To comment go to  liveBook  application will use UUID values for this unique id called the primary key for records in the \ntable A UUID is a long string of alphanumeric characters which by definition is unique across \nthe whole world The pros and cons for taking this approach is covered in the next chapter  \nTo make that simpler when creating the User class a small function is created to supply \nUUID string values when User records are created and inserted into the database  \ndef getuuid  \n    return uuid4 hex \nThe getuuid  function uses the imported uuid4  function to create UUID values and \nthen returns the hex string version of that value Returning the hex string version makes the \nunique id value a little shorter  \nThe next thing to add to appmodelsp y is the definition of the User class This class uses \nmultiple inheritance to get some built in functionality from the modules imported at the top of \nappmodelspy   \nThe first is the UserMixin  class which gives child classes methods the flasklogin system  \nexpects to be able to access User information  \nThe second is the dbModel  class which comes from the db instance variable created and \ninitialized in the app module  \nThe dbModel  class gives a child class the SQLAlchemy functionality needed to interact w ith \nthe database and define the columns in a table associated with the attributes of the class  \n  \n169Manning Publications Co  To comment go to  liveBook  class UserUserMixin dbModel    A  \n    tablename  user    B  \n    useruid  dbColumndbString primarykeyTrue defaultgetuuid    C  \n    roleuid  dbColumndbString dbForeignKeyroleroleuid nullableFalse    D  \n    firstname  dbColumndbString nullableFalse    E  \n    lastname  dbColumndb String nullableFalse    E  \n    email  dbColumndbString nullableFalse uniqueTrue indexTrue    E  \n    hashedpassword  dbColumnpassword dbString nullableFalse    E  \n    active  dbColumndbBoolean nullableFalse defaultFalse    E \n    created  dbColumndbDateTime nullableFalse defaultdatetimeutcnow    F  \n    updated  dbColumndbDateTime nullableFalse defaultdatetimeutcnow \nonupdatedatetimeutcnow    F  \n \n    def getidself  \n        return selfuseruid  \n \n    property  \n    def passwordself  \n        raise AttributeErroruser password cant be read  \n \n    passwordsetter  \n    def passwordself password  \n        selfhashedpassword  generatepasswordhashpassword  \n \n    def verifypasswordself passwor d \n        return checkpasswordhashselfhashedpassword password  \n \n    def reprself  \n        return f  \n        useruid selfuseruid  \n        name selffirstname selflastname  \n        email selfemail  \n        active True if se lfactive else False  \n            roleuid selfroleroleuid  \n            name selfrolename  \n            description selfroledescription  \n            permissions selfrolepermissions  \n         \nA The User class multiply inherits from the  UserMixin and dbModel classes  \nB Define the table name in the database where records of this class will be stored  \nC Define the unique id value for User records using the getuuid function  \nD Define the roleuid as a relationship to the Role class yet t o be defined  \nE Define other User attributes  \nF Define record auditing timestamp attributes  \nThe User class inherits from the imported UserMixin  and dbModel  classes This means the \nUser class IS A UserMixin  class and IS A dbmodel  class and has access to both classes \nmethods and attributes  \nBy inheriting from the UserMixin  class the User class gets methods needs in order to \nfunction by the LoginManager  instance created in the app package These methods use \nattributes defined in  the User class to authenticate a user  \nThe User class also inherits from the dbModel and is how the SQLAlchemy functionality \nis added to the class giving it access to the database The User model defines the structure of \n170Manning Publications Co  To comment go to  liveBook  a single row of data in a table n amed user where each defined attribute is a column in a \ndatabase table record  \nThe getid method overrides the method of the same name provided by the UserMixin \nclass The default getid method returns a selfid  value but since the User class defin es \nthe unique id attribute name as useruid  its necessary to override the default behavior The \ngetid  method is used whenever the LoginManager  instance needs to determine if the \nunique identifier stored in the session cookie relates to a real user in the system  \nNote the pair of password  methods that create a write only attribute on the User class \nSince its not useful or even possible to read the password because its hashed the method \ndecorated with property  raises an attribute error  \nThe password  method decorated with passwordsetter  creates the write behavior The \nmethod intercepts setting the password attribute and generates a cryptographically strong \nhash of the password stored in the h ashedpassword  class attribute Even though \nhashedp assword  is how the attribute is named the corresponding database column is named \npassword  \nThe verifypassword  method is used in the authpy  module to determine if the \npassword retrieved from the login form template matches the hashed version stored f or the \nuser \nThe User class also has a relationship to the Role class that provides the authorization \npermissions assigned to a user The Role class associates permissions with a user to authorize \nwhat a known user can do In the MyBlog application there a re three roles defined registered \nuser editor and administrator A registered user can view and create content and comment \non the content created by other users An editor has the permissions of a user and can edit \ncontent and comment of any user and de activate either when necessary The administrator \nhas all the permissions of an editor and user can change user permissions and access \nadministrator only features  \nLets define the Role class  \n  \n171Manning Publications Co  To comment go to  liveBook  class RoledbModel    A  \n    class PermissionsFlag    B \n        REGISTERED  auto    B  \n        EDITOR  auto    B  \n        ADMINISTRATOR  auto    B  \n \n    tablename  role    C  \n    roleuid  dbColumndbString primarykeyTrue defaultgetuuid    D  \n    name  dbColumndbString nullabl eFalse uniqueTrue    E  \n    description  dbColumndbString nullableFalse    E  \n    rawpermissions  dbColumndbInteger    E  \n    users  dbrelationshipUser backrefrole lazyjoined    E  \n    active  dbColumndbBoolean nullable False defaultTrue    E  \n    created  dbColumndbDateTime nullableFalse defaultdatetimeutcnow    F  \n    updated  dbColumndbDateTime nullableFalse defaultdatetimeutcnow \nonupdatedatetimeutcnow    F  \n \n    property  \n    def permissionsself  \n        return RolePermissionsselfrawpermissions  \nA The Role class inherits from the dbModel class  \nB Create the internally defined Permissions class  \nC Define the table name in the database where records for this class wil l be stored  \nD Define the unique id value for Role records using the getuuid function  \nE Define other Role attributes  \nF Define record auditing timestamp attributes  \nLike the User class the Role class inherits from dbModel so it can interface with databa se \nfunctionality  \nThe internally defined Permissions  class is worth mentioning Embedding the Permissions  \nclass this way places it within the Role classs namespace but what does it do  \nBecause it inherits from the enum Flag  class it creates a mechanism to contain bitmasks \nfor each of the permission attributes REGISTERED  EDITOR  and ADMINISTRATOR  A bitmask is \na way to store multiple Boolean values in a single integer The Permissions  class definition \ncreates a structure eq uivalent to this  \nPermissionsFlag  \n    REGISTERED  1           binary value 001  \n    EDITOR  2               binary value 010  \n    ADMINISTRATOR  4        binary value 100  \nEach attribute exists as a distinct single bit within an integer value This a lso means the \nvalues can be combined using bitwise Boolean operations without conflict to contain multiple \nattribute values For example a variable with a binary value of 111 indicates the REGISTERED  \nEDITOR  and ADMINISTRATOR  flags are set  \nThe Python Fl ag class lets you use binary logical operations with the attributes For \nexample this Python statement is True  \n7   \n    PermissionsREGISTERED   \n    PermissionsEDITOR   \n    PermissionsADMINISTRATOR  \nvalue \n172Manning Publications Co  To comment go to  liveBook  This is because 7 is represented in binary as 111 and the logical OR operator  creates \nthe bitmask returned by the value attributes as 7  \nUsing the Permissions  class will be useful when identifying what a user is authorized to \ndo Its also useful when initializing the database role lookup table  There isnt a way to store \na Flag bitmask in the database directly so its stored as the equivalent integer in the database \nThe permissions  attribute defined by the propert y decorator translates the database integer \nvalue back into a Flag representati on for use within the MyBlog application  \nThe role table is a lookup table and isnt modified after the MyBlog application is running \nTo provide Role information it has to be initialized with data that can be associated with users \nas they are registered  To initialize the role table add this code to the end of the Role class \ndefinition  \n    staticmethod  \n    def initializeroletable  \n        roles      A  \n                A \n                name user    A  \n                description registered user permission    A  \n                rawpermissions RolePermissionsREGISTEREDvalue    A  \n                A  \n                A \n                name editor    A \n                description user has ability to edit all content and comments    A  \n                rawpermissions RolePermissionsREGISTERED  \nRolePermissionsEDITORvalue    A  \n                A  \n                A \n                name admin    A  \n                description administrator user with access to all of the application    \nA \n                rawpermissions RolePermissionsREGISTERED  RolePermissionsEDITOR  \nRolePermissionsADMINISTRATORvalue    A  \n                A \n            A \n        with dbsessionmanager as dbsession  \n            for r in roles  \n                role  dbsessionqueryRolefilterRolename  \nrgetnameoneornone  \n \n                if role is None    B  \n                    role  Role    B  \n                        namergetname    B  \n                        descriptionrgetdescription    B  \n                        rawpermissionsrgetrawpermissions    B  \n                        B \n                else    C  \n                    roledescription  rgetdescription    C  \n                    rolerawpermissions  rgetrawpermissions    C  \n \n                dbsessionaddrole  \n            dbsessioncommit  \nA Define the list  of role attributes to configure  \nB If the role name doesnt exist create and add it  \nC If the roles name does exist update it with the configuration data  \n173Manning Publications Co  To comment go to  liveBook  The initializeroletable  method is within the role classs namespace but because its \na staticmethod  it can be called without having an instance of the Role class This function \nis called by the createapp  application factory after the database is created to initialize the \nrole lookup table with data  \nAll of the mechanics are in place so a use r can login All that remains is creating the \nloginhtml  form to let the user identify themselves to the system  \n922  Logging In  \nThe most straightforward thing to do is code up an HTML form to gather user input for the \nemail and a password With the inclusion o f a submit button the form contents would be sent \nto the MyBlog server as an HTTP POST request and you could process the form information  \nBecause users can make unintentional and intentional errors when entering form data its \nnecessary to validate the form input information Are the email and password within required \nlength restrictions Are the email and password present at all Does the email address conform \nto a standardized format Implementing these kinds of validation steps is extra work thats \ndifficult to get right Fortunately theres another Flask extension that dramatically simplifies \nform handling Flask WTF \nFLASK WTF  \nThe Flask WTF extension integrates the more generalized WTForms package into Flask Using \nthe extension allows you to bind M yBlog server code to HTML form elements and automate \nhanding those elements when the corresponding form is received by a handler using the HTTP \nPOST method  \nTo create the login form and its validation add a new file to the appauth package named \nformspy  \n  \n174Manning Publications Co  To comment go to  liveBook  from flaskwtf import FlaskForm    A  \nfrom wtforms import PasswordField BooleanField SubmitField    B  \nfrom wtformsfieldshtml5 import EmailField    B  \nfrom wtformsvalidators import DataRequired Length Email EqualTo    C  \n \nclass LoginFormFlaskFo rm    D  \n    email  EmailField    E  \n        Email    E  \n        validatorsDataRequired Length    E  \n            min4    E  \n            max128    E  \n            messageEmail must be between 4 and 128 characters long    E  \n         Email    E  \n        renderkwplaceholder      E  \n        E \n    password  PasswordField    F  \n        Password    F  \n        validatorsDataRequired Length    F  \n            min3    F  \n            max64    F  \n            messagePassword must be between 3 and 64 characters long    F  \n            F  \n        renderkwplaceholder      F  \n        F \n    rememberme  BooleanField Keep me logged in    G  \ncancel  SubmitField    H  \n    labelCancel    H  \n    renderkwformnovalidate True    H  \n        H \n    submit  SubmitFieldLog In    I  \nA Import the FlaskForm class  \nB Import the fi eld type classes to create in the form  \nC Import the field validation classes used to validate the form elements  \nD Create the LoginForm inheriting from the base FlaskForm class  \nE Create the email form element and validators  \nF Create the password form element and validators  \nG Create the remember me form element  \nH Create the form cancel button  \nI Create the form submit button  \nThe LoginForm  class defines an object to create when the form is rendered containing all HTML \nelements in the form  The elements have a required first parameter the elements name used \nfor labels the element form name and the id value The validators  parameter defines a list \nof validation steps the element must pass for the form to be considered valid The renderk w \nparameter is optional and defines additional HTML form attributes to be rendered with the \nelement  \nThe email  element is an instance of the EmailField  class The class constructor has a \nparameter Email used as is for any label rendered with the element and converted to \nlowercase when used for name and id values The validators  define that an entry is required \nthe length must be between 4 and 128 characters long inclusive and the element value must \nbe in a valid email format  \nThe password  element is an instance of the PasswordField  class The PasswordField  \nrenders the element as an HTML type of password so the user entered text is shown as a \n175Manning Publications Co  To comment go to  liveBook  sequence of asterisk characters The class constructor has a parameter Password used in the \nsame manner as the email element The validators  define that a password is required and \nthe length must be between 3 and 64 characters long inclusive  \nNotice the renderkwplaceholder    parameters on both the email and password \nattributes These are necessary to make the Bootstrap input elements visual functionality work \nas intended  \nThe remember me element is an instance of the BooleanField  class This will be rendered \nas an HTML checkbox with a label of Keep me logged in  \nThe cancel  element is an instance of the SubmitField  class and creates a cancel button \nthat will take the user to the home screen when clicked  \nThe submit  element is also an instance of the SubmitField  class and creates a submit \nbutton when the form is rendered  \nWith the formspy  module in place y oull need to create an HTML page where the \nLoginForm  class will render the contained elements  \nLOGIN FORM \nThe loginhtml  file is created in the appauthtemplates  directory where the authbp  \nBlueprint can access it  \n  \n176Manning Publications Co  To comment go to  liveBook   extends basehtml     A  \n import macrosjinja as macros     B  \n \n block content   \ndiv classlogin wrapper mx auto mt3 \n    div classcontainer login  \n        form methodPOST novalidate  \n            div classcard  \n                h5 classcard header  \n                     User Login  \n                h5 \n                div classcard body \n                    div classcard text \n                        formcsrftoken     C \n                        div classform floating mb 3    D  \n                            formemailclassform control    D  \n                            formemaillabelclassform label    D  \n                            macrosvalidationerrorsformemailerrors    D  \n                        div    D \n                        div classmb 3    E  \n                            formpasswordclassform control    E  \n                            formpasswordlabelclassform label    E  \n                            macrosvalidation errorsformpassworderrors    E  \n                        div    E  \n                        div classmb 3    F  \n                            formrememberme    F  \n                            formremembermelabelclassform checklabel    F  \n                        div    F  \n                    div \n                div \n             div classcard footer text end \n                 formcancelclassbtn btn warning me 2    G  \n                 formsubmitclassb tn btnprimary    H  \n                div \n            div \n form \n    div \ndiv \n endblock   \n \n block styles   \n     super   \n    link relstylesheet typetextcss href urlforstatic \nfilenamecsslogincss    \n endblock   \nA The loginhtml template inherits from basehtml so it gets all the MyBlog page elements  \nB Import the macrosjinja macros file which well get to next  \nC Cross Site Request Forgery protection token talked about at the end of this chapter  \nD Create the email element on the page passing the element Bootstrap class information  \nE Create the password element on the page passing the eleme nt Bootstrap class information  \nF Create the remember me element on the page passing the element Bootstrap class information  \nG Create the cancel button pass the element Bootstrap class information  \nH Create the submit button pass the element Bootstrap class information  \nRecall back to the authpy  module and the login  handler assigned to the login route \nThere are two lines of code of interest related to rendering the login form and connecting it to \nthe LoginForm  instance created in formspy  \n177Manning Publications Co  To comment go to  liveBook form LoginForm\n\nreturn rendertemplateloginhtml formform\nThese two lines or code are important when the login  handler is invoked by an HTTP \nGET or POST request The first creates the LoginForm  class instance variable The second \npasses that form instance to rendertemplate  as the second parameter giving the Jinja \ntemplate engine access to the form instance when rendering the loginhtml  template \nelements This is how the LoginForm  definition instance is connected to the loginhtml\ntemplate  \nWhen a GET request is received the template engine uses the form instance to help it \nrender the form in the browser window \nWhen a POST request is received the body of the form contains the form data which \npopulates the LoginForm attributes The form validation methods for each attribute can run to \nvalidate the form data meets the validation requirements \nRunning the code in CH09examples01  and navigating to 1270015000login presents \nthe login form to the user \nJINJA MACROS  \nNotice this line in the loginhtml  template thats part of the email and password definition \nsections \nmacrosvalidationerrorsformemailerrors\n178Manning Publications Co  To comment go to  liveBook This references a Jinja macro in the apptemplatesmacrosjinja  file imported at the top \nof the loginhtml  template The validationerrors  macro handles displaying any \nLoginForm  validation errors to the user so they can be corrected \n macro validationerrorserrors  \n     if errors  \n         for error in errors  \n            div classtextdanger smallerrordiv \n         endfor  \n     endif  \n endmacro  \nA macro is a function definition in the Jinja template engine The validationerrors\nmacro receives a list of LoginForm  validation errors It first checks if there are any errors at \nall and if so iterates over that list displaying the error message in small red text below the \nform field that failed validation The results of entering an invalid email address and a password \nof only two characters renders the loginhtml  to the user like this \nIf you enter a valid email address a password with an acceptable length and click the \nsubmit button youll notice nothing happens The loginhtml  template is rendered again and \nthere is no information presented to the user about what if anything happened \nLooking back at the login  function in the authpy file there is a conditional check in the \ncode right after trying to find a user by their email address \n179Manning Publications Co  To comment go to  liveBook  user  dbsessionqueryUserfilterUseremail  formemaildataoneornone  \nif user is None or not userverifypasswordformpassworddata  \n    flashInvalid email or password warning  \n return redirecturlforauthbplogin  \nIf the user is not found it has a value of None and the code executes the flash  message \nfunction and redi rects to the login route and the loginhtml  template is rendered again No \nuser was found because none have been created in the application yet The intended code for \nthis condition ran and the user got redirected to the login screen However why isnt the \nflash  function doing anything to inform the user by displaying the invalid email or password \nmessage  \n93 News Flash  \nThe Flask flash  function exists to provide feedback to users about events and activities in \nan application When a message is created a nd sent to the flash  function the message is \nappended to a list of messages available in the context of the next request and only the next \nrequest and therefore the next rendered template  \nThe template has to access the message list and add the message s to the rendered HTML \nto display the flash messages A direct way to do this is to iterate over the flash messages list \nusing a Jinja for loop and create an HTML unordered list of the messages as part of the rendered \nHTML Were going to take advantage of  Bootstrap to render the messages so they are \ndisplayed temporarily and dont disrupt the intended template flow  \n931  Improving the Login Form  \nThe Bootstrap framework provides a component called Toasts which are lightweight alert \nmessages that float above the content Toasts have been made popular in both mobile and \ndesktop operating systems They are useful in the MyBlog application because they dont \ndisrupt the template layout and are transient and disappear soon after the message is \npresented  \nSince any  URL endpoint handler can call the flash  function its useful to centralize where \nthe flash messages are handled The basehtml  template is ideal for this as its intended to be \ninherited from by every template in the MyBlog system  \nCreating a Bootstrap  toast involves a significant amount of HTML code that would need to \nbe added to the basehtml  template file A better option is to pull the flash message handling \nout of the basehtml  template and create a Jinja macro The flaskflashmessages  macro \nfunction is added to the apptemplatesmacrosjinja  file \n  \n180Manning Publications Co  To comment go to  liveBook   macro flaskflashmessages      A \n   with messages  getflashedmessageswithcategoriestrue      B \n     if messages      C \n      div aria livepolite  \n           ariaatomictrue  \n           classposition relative  \n        div classtoast container position absolute top 0 end0 p3 \n             stylez index 2000 opacity 1  \n           for category message in  messages      D \n             set category  white if category  message else category   \n             set textcolor  text dark if category in   \n              warning  \n              info \n              light  \n              white  \n               else text white \n             \n            div classtoast bg category  \n                rolealert  \n                arialiveassertive  \n                ariaatomictrue  \n              div classtoast header bg category  textcolor  \n                 set toasttitle  category if category in   \n                  success danger warning info  \n                 else message   \n                strong classme autoMyBlog toasttitletitlestrong  \n                button typebutton  \n                        classbtn close  \n                        databsdismisstoast  \n                        arialabelClosebutton  \n              div \n              div classtoast body textcolor  \n                message  \n              div \n            div \n           endfor   \n        div \n      div \n     endif   \n   endwith   \n endmacro   \nA Begin the definition of the flask flashmessages macro  \nB Begin a with context block to get the flash messages  \nC Are there any flash messages to process  \nD Begin the for loop to iterate over the list of flash messages  \nMost of the flaskflashmessages  macro concerns itself with gener ating the Bootstrap \nstyling required by toast messages The toast messages are added to the rendered template \nbut arent displayed to the user immediately To do that requires JavaScript code to show the \nmessages The JavaScript code has to run every time a template that inherits from basehtml  \nis rendered so create an appstaticjsbasejs  file \n  \n181Manning Publications Co  To comment go to  liveBook  function   \n    var option    \n        animation true  \n        delay 3000  \n     \n    var toastElements  slicecalldocumentquerySelectorAlltoast  \n    toastElementsmapfunction toastElement   \n        toast  new bootstrapToasttoastElement option  \n        toastshow  \n     \n \nThe code above creates  a self invoking anonymous JavaScript function meaning it runs as \nsoon as the browser JavaScript engine parses the code  This kind of function is useful when \nyou want to run some code immediately and keep variables out of the global JavaScript scope \nBecause basejs  is included at the end of the basehtml  template  the function runs after the \nHTML  DOM elements have been created including the toast elements  \nThe option  variable is a JavaScript object literal and is something like a Python dictionary \nIt contains configuration information passed to the Bootstrap Toast class to animate the toast \nand remove it after 3000 milliseconds or 3 seconds  \nThe function then creates the toastElements  array variable containing all the toast HTML \nDOM elements on the page  An array in JavaScript is similar to a Python list  \nJavaScript arrays have a method called map that applies a function to each element in the \narray The anonymous function passed to the map creates a new Toast instance passing the \noption  object and then  calls the show  method to display the toast message in the browser \nwindow  \nSuppose you run the application in CH09examples02 and enter a valid email address \nand password but the values are unknown to the MyBlog application In that case the login \npage will be re rendered with a toast message about the email or password being invalid  \n182Manning Publications Co  To comment go to  liveBook Now that users can theoretically log into the MyBlog application its time to allow a new \nuser to register with the application so they have an account to log into \n94 Making New Friends \nRegistering new users on the MyBlog application also uses the flasklogin extension The \nregister new user process follows a pattern similar to the login process but instead of looking \nfor a user it creates and saves one to the database From a highlevel view the register new \nuser system looks like this \n183Manning Publications Co  To comment go to  liveBook The register new user process follows this sequence of steps \n1 The user makes a GET request from their browser to the authentication register new \nuser URL endpoint \n2The authentication register new user handler responds to the GET request by \nreturning the rendered register new user HTML page \n3The user fills out the register new user page form fields and submits the form \n4The form is submitted to the authentication register new user system using a POST \nrequest \n5The register new user system creates a user from the form data using the models \nsupported by the application \n6The User model saves the newly created user in the application storage system \n7The user is directed to the authentication login page to enter their login credentials \nAUTH BLUEPRINT  \nThe register new user handler is in the appauthauthpy  file Like the login handler a form \nis derived from the FlaskForm  class in the formspy  module called RegisterNewUserForm  \nAdd this class instance to the line of code in appauthpy  that imports the LoginForm  class \nfrom forms import LoginForm RegisterNewUserForm \nAdd a new handler to the module at the bottom of the file \n184Manning Publications Co  To comment go to  liveBook  authbprouteregisternewuser methodsGET POST     A \ndef registernewuser     A \n    if currentuserisauthenticated     B \n        return redirecturlforintrobphome     B \n    form  RegisterNewUserForm     C \n    if formvalida teonsubmit     D \n        with dbsessionmanager as dbsession     E \n            user  User     E \n                firstnameformfirstnamedata     E \n                lastnameformlastnamedata     E \n                emailformemaildata    E \n                passwordformpassworddata    E  \n                activeTrue     E \n                E  \n            rolename  admin if useremail in currentappconfiggetADMINUSERS else \nuser    F \n            role  dbsessionqueryRole filterRolename  rolenameoneornone     \nF \n            roleusersappenduser     F \n            dbsessionadduser     G \n            dbsessioncommit     G \n            loggerdebugfnew user formemaildata added     G \n            return redirecturlforauthbplogin     G \n    return rendertemplateregisternewuserhtml formform  \nA Mark the registernewuser function as the handler for the registernewuser  route for both GET and POST \nHTTP requests  \nB If the user is already authenticated redirect them to the home screen  \nC Create an instance of the RegisterNewUserForm  \nD If the HTTP request is a POST validate the incoming form data  \nE Create new user init ializing the attributes with form data  \nF Get an appropriate role for the new user and set the user role  \nG Add the newly created user to the database log that a new user was created and redirect to the login page  \nH If the HTTP request is a GET render t he empty registernewuserhtml template passing in the form instance for \nuse in the template  \n941  New User Form  \nRepeating the pattern used for the login form theres a Flask WTF form and html template file \ncreated to complete the register new user functional ity Add the RegisterNewUserForm  class \ndefinition to the appauthformspy  file \n  \n185Manning Publications Co  To comment go to  liveBook  from wtformsvalidators import DataRequired Length Email EqualTo    A  \nfrom wtforms import ValidationError     A \nfrom models import User dbsessionmanager     A \n \n intervening code  \n \nclass RegisterNewUserFormFlaskForm     B \n    firstname  StringField     C \n        First Name     C \n        validatorsDataRequired     C \n        renderkwplaceholder   tabindex 1 auto focus True     C \n        C \n    lastname  StringField     C \n        Last Name     C \n        validatorsDataRequired     C \n        renderkwplaceholder   tabindex 2     C \n        C \n    email  EmailField     C \n        Email     C \n        validatorsDataRequired Length     C \n            min4    C \n            max128     C \n            messageEmail must be between 4 and 128 characters long     C \n         Email     C \n        renderkwplacehol der   tabindex 3  \n        C \n    password  PasswordField     C \n        Password     C \n        validatorsDataRequired Length     C \n                min3    C \n                max64    C \n                messagePassword must be betwe en 3 and 64 characters long     C \n                C \n            EqualToconfirmpassword messagePasswords must match     C \n            C \n        renderkwplaceholder   tabindex 4  \n        C \n    confirmpassword  PasswordField     C \n        Confirm Password     C \n        validatorsDataRequired Length     C \n            min3    C \n            max64    C \n            messagePassword must be between 3 and 64 characters long     C \n            C \n        renderkwplaceholder   tabindex 5  \n        C \ncreatenewuser  SubmitFieldCreate New User renderkwtabindex 6    D  \n    cancel  SubmitFieldCancel renderkwtabindex 7    D  \nA New items to add to import section  \nB Define the RegisterNewUserForm class  \nC Create the first name last name email password and confirm password form elements and validators  \nD Create the form submit buttons  \nThe code above creates the form thats passed to the register new user template t o create the \nHTML DOM elements to render and apply validation rules when the form is submitted by a \nPOST request There is one additional method to add at the bottom of the \nRegisterNewUserForm  class  \n186Manning Publications Co  To comment go to  liveBook  def validateemailself field  \n    with dbsessionman ager as dbsession  \n        user  dbsessionqueryUserfilterUseremail  fielddataoneornone  \n        if user is not None  \n            raise ValidationErrorEmail already registered  \nThe validateemail  method is a custom validation that en sures a new user isnt using \nan email address that already exists in the system The FlaskForm  class has the functionality \nto introspect classes that inherit from it That introspection finds the validateemail  \nmethod and adds it to the validation for th e email form field  \nThe RegisterNewUserForm  class instance created in the handler is passed to the \nregisternewuserhtml  template to render the users form This template is similar to the \nloginhtml  template and isnt presented here You can see the te mplate by editing the \nCH09examples03appauthtemplatesregisternewuserhtml  file \nIf you move to the CH09examples03  directory and run the MyBlog application and \nnavigate to the 1270015000registernewuser route the form will be rendered in t he \nbrowser  \n187Manning Publications Co  To comment go to  liveBook   \nThe form provides fields for a new user to enter their first name last name email a \npassword and to confirm the password When the register button is clicked the form data is \nsent to the server and the email is checked to see if it already  exists in the system If the email \nis unknown in the MyBlog application a new user is created and saved to the database  \n942  Oh Yeah Logging Out  \nNow that users can log in to the MyBlog application we also need to provide a way to log out \nBesides nice symm etry being able to log out of an authenticated application is vital so users \nhave control over who can access the application with their credentials  \nFor the MyBlog application the logout functionality is created by adding another URL route \nto the auth mo dule When a user navigates to the logout route no template is presented The \nroute handler just resets the session cookie and redirects the user to the application home \n188Manning Publications Co  To comment go to  liveBook  page Since the home page is available to any user authenticated or not this is a re asonable \napproach  \nIn the appauthauthpy  module modify the from flasklogin  line like this  \nfrom flasklogin  import loginuser logoutuser  currentuser  \nAnd add this to the bottom of the appauthpy  module  \nauthbproutelogout    A  \ndef logout    A  \n    logoutuser    B  \n    flashYouve been logged out light    C  \n    return redirecturlforintrobphome    D  \nA Add a new route and handler for logging a user out of the system  \nB Call t he flasklogin logoutuser function to log the user out  \nC Flash a message to inform the user theyve been logged out  \nD Redirect the user to the application home page  \n943  Navigation  \nYouve created a working authentication system but currently its accessib le primarily by \nentering the URL into the browser navigation bar Lets add the loginlogout URL routes to the \nBootstrap navigation system  \nThe authentication system has two mutually exclusive states as a user you can only be \nlogged in or logged out Beca use of this the authentication system is represented in the \nnavigation menu as a single item that will toggle between states depending on the users \ncurrent authentication status  \nKeeping with the idea of single responsibility and not overcomplicating the basehtml  \ntemplate the loginlogout menu functionality will exist as a Jinja macro in the macrosjinja  \nfile \n macro buildloginlogoutitemscurrentuser     A  \n     if not currentuserisauthenticated     B  \n         if requestendpoint  a uthbplogin     C  \n            a classnav link ml2 active aria currentpage \nhrefurlforauthbplogin    C  \n         else     C  \n            a classnav link ml2 hrefurlforauthbplogin    C  \n         endif     C \n        Login \n        a \n     else     D  \n        a classnav link ml2 hrefurlforauthbplogout    E  \n        Logout    E  \n        a    E  \n     endif   \n endmacro   \nA Begin the buildloginlogoutitems macro passing in the current user from the basehtml template  \nB Is the current user unauthenticated  \nC Present the login menu item and route as highlighted or not depending on the current route  \nD Otherwise if the current user is authenticated  \nE Present the logout menu item and route  \n189Manning Publications Co  To comment go to  liveBook  The buildloginlogoutitems  macro has to be added to the basehtml  template so it \ncan be rendered Modify the section of code in the template that creates the navigation menu \nto add this functio nality  \ndiv classcollapse navbar collapse justifycontentbetween    A \n  idnavbarSupportedContent  \n    div classnavbar nav mrauto \n      macrosbuildnavitemnavitem   \n div \n div classnavbar nav    B  \n      macrosbuildloginlo goutitemscurrentuser     B  \n div    B  \ndiv \nA Right and left justify the two navbar nav sections  \nB Create the second navbar nav section and call the macro to render the loginlogout items  \nWith the above changes in place the MyBlog web applica tion will display a highlighted login \nmenu item when the login menu item is clicked and rendered Run the application from the \nCH09examples04  directory  \n \n95 Confirming New Friends  \nWhen a potential user of the MyBlog  application registers with the system its useful to confirm \nthey are who they say they are This is often done by sending an email with a confirmation \n190Manning Publications Co  To comment go to  liveBook  link to the email address they used to register with Since the MyBlog application uses the \nemail addre ss as a unique identifier for the user sending a confirmation email to that address \ncloses the loop that the user intended to register for access to the MyBlog application  \nWell add the ability to send email to the MyBlog application so we can send these  \nconfirmation emails  \n951  Sending Email  \nLike the choice to use SQLite as the database well implement a straightforward email system \nthat works for MyBlog but may have to be re considered in a larger system  \nTo send email well need access to an SMTP service SMTP Simple Mail Transport Protocol \nis how email is sent and delivered across the internet You can use a Google Gmail account \npreferably one you create just for this purpose to be the SMTP service My Blog will use  \nI wont go into detail about how to configure a Gmail account to make it available to MyBlog \nas an SMTP server A quick internet search will reveal many links that describe the steps to do \nso \nUsing a Gmail account works well but has limitat ions on the number of emails that can be \nsent per month Currently that limit is 500 messages per day which is more than enough for \nthe purposes of the MyBlog application  \nWell also use a Python module named yagmail  which makes it easy to configure and send \nemails from an application using Googles Gmail  \nWhen a new user registers with the MyBlog application on the New User Registration form \nwe want to add two things  \n A Boolean field called confirmed on the User database model initially set to False  \n Send an email with a confirmation link to the registering users email address  \nAdding a confirmed field to the User model is simple enough and will be included in the \nexample program that accompanies this section Sending the confirmation link email needs to \nbe thought about  \nEMAILER  \nWe could send the email directly from the authpy  modules registernewuser  function \nand that would work fine However sending email via SMTP is a relatively slow process and \ndoing so directly in the URL handler impacts the p erformance of the entire MyBlog application  \nTo improve the process well use a Python thread to decouple sending an email from Flasks \nURL request processing A Python thread is a section of the application program code that runs \nconcurrently with the ma in application code and shares the same memory space Python will \ncontext switch between the main application code thread and any other currently executing \nthreads automatically  \nUsing a thread to send SMTP email lets the Flask URL handler continue and com plete rather \nthan waiting for email to finish being sent This makes sending emails asynchronous from the \nMyBlog main application  \nRather than manage the thread manually well use a module called unsync  The unsync  \nmodule provides a decorator we place on a function to make that function run asynchronously \nDepending on how the unsync  decorator is used will determine if the decorated function runs \n191Manning Publications Co  To comment go to  liveBook  as part of a Python asyncio  application a separate process using the multiprocessing  \nmodule or as a thread  \nThe asynchronous capabilities a Python application has access to using asyncio  offers \nconcurrency of processing to the application However implementing it would require \nrestructuring the MyBlog application for this one use case I think that puts using asyncio  \noutside of the scope of this book  \nUsing the multiprocessing  module would create a separate process from the MyBlog \napplication process that would handle the sending of email The email sending process would \nrun in parallel to the MyBlog application  This would work well to send an email but I think is \noverkill for this simple requirement  \nUsing a thread lets the email sending process run currently with the MyBlog application \nthough not in parallel MyBlog will use the threading approach to send ema ils \nWell create a new module called appemailerpy  that has a single function sendmail  \nfrom flask import currentapp  \nimport yagmail    A  \nfrom unsync import unsync    B  \n \nyag  yagmailSMTP    C  \n    usercurrentappconfiggetSMTPUSERNAME    C \n    passwordcurrentappconfiggetSMTPPASSWORD    C  \n    C \n \nunsync    D  \ndef sendmailto subject contents    E  \n    yagsendtoto subjectsubject contentscontents    E  \nA Import the yagmail  module to send mail using a Gmail account  \nB Import the unsync decorator from the unsync module  \nC Configure yagmail with the username and password of the Gmail account to use for sending SMTP mail  \nD Decorate the sendmail function to make it run in a Python thread  \nE Create the function the rest of the MyBlog application uses to send email  \nThe code above creates a simple wrapper function called sendmail  around the call to send \nan email using yagmail  The sendmail  function is decorated with unsync which will run it \nin a thread  \nCONFIRMATION EMAIL \nNow that MyBlog has a way to send emails lets use it to send a confirmation email to newly \nregistered users The confirmation email will contain a link back to the MyBlog application The \nlink contains encrypted information that is sent along when the user clicks the link When \nMyBlog handles a call to the link it decrypts the information to determine if the request was \nvalid If it is the user is confirmed in the database  \nThe encoded information also  contains a current timestamp When the link is clicked and \nthe application handles that request the timestamp is compared to the current time If the \napplication handles the request within a timeout period the user is confirmed However if the \nuser wait ed longer than the defined timeout period the confirmation link is considered expired \nand the user isnt confirmed The timeout value is set in the settingstoml  file as 12 hours \nwhich can be changed  \n192Manning Publications Co  To comment go to  liveBook  To send the new user confirmation email well add two function calls to the existing \nregisternewuser  function handler The first is a call to a new function \nsendconfirmationemailuser  and the second is call to the Flask flash  function \nnotifying the user with a toast message to check for the confirmat ion email  \nauthbpgetregisternewuser  \nauthbppostregisternewuser  \ndef registernewuser  \n    if currentuserisauthenticated  \n        return redirecturlforintrobphome  \n    form  RegisterNewUserForm  \n    if formcanceldata  \n        return redirecturlforintrobphome  \n    if formvalidateonsubmit  \n        with dbsessionmanager as dbsession  \n            user  User  \n                firstnameformfirstnamedata  \n                lastnameformlastnamedata  \n                emailformemaildata  \n                passwordformpassworddata  \n                activeTrue  \n             \n            rolename  admin if useremail in currentappconfiggetADMINUSER S else \nuser \n            role  dbsessionqueryRolefilterRolename  rolenameoneornone  \n            roleusersappenduser  \n            dbsessionadduser  \n            dbsessioncommit  \n            sendconfirmationemailuser    A  \n            timeout  currentappconfiggetCONFIRMATIONLINKTIMEOUT    B  \n            flash    B  \n                Please click on the confirmation link just sent     B  \n                fto your email address within timeout hours     B  \n                to complete your registration                B  \n            loggerdebugfnew user formemaildata added  \n            return redirecturlforintrobphome  \n    return rendertemplateregisternewuserhtml formform  \nA Call to new sen dconfirmationemailuser function to send email  \nB Call Flask flash functionality to notify the user to check their email within the confirmation link timeout  \nLets take a look at  the sendconfirmationemail  function  \n  \n193Manning Publications Co  To comment go to  liveBook  def sendconfirmationemailus er \n    confirmationtoken  userconfirmationtoken    A  \n    confirmationurl  urlfor    B  \n        authbpconfirm    B  \n        confirmationtokenconfirmationtoken    B  \n        externalTrue    B  \n        B \n    timeout  currentappconfiggetCONFIRMATIONLINKTIMEOUT     C \n    to  useremail    C  \n    subject  Confirm Your Email    C  \n    contents      C  \n        fDear userfirstname    C  \n        Welcome to MyBlog please click the link to confirm your email within timeout \nhours    C \n        confirmationurl    C  \n        Thank you    C  \n            C  \n        C \n    sendmailtoto subjectsubject contentscontents    C  \nA C all a new user method to construct a confirmation token  \nB Construct a URL to insert in the email that when clicked will inform MyBlog the user has confirmed  \nC Construct and send an email with the confirmation URL to the user  \nThe sendconfirmationemail  function calls a new method of the User model \nconfirmationtoken  to build a unique token with an expiration timeout It then builds a \nURL to a new URL handler authbpconfirm  The externalTrue  parameter causes \nurlfor  to create a full URL that wil l work when a user clicks the link from their email client \ncontext  \nOnce the confirmation link is created an email is generated inline rather than in a template \ncontaining the confirmation link and is sent to the new user If the new user clicks on the \nconfirmation link within the 12 hour time limit their account is confirmed  \nUSER CONFIRMATION TOKEN  \nBecause the confirmation token is unique for each user its generated by a new method \nattached to the User model class  \ndef confirmationtokenself  \n    serializer  URLSafeTimedSerializercurrentappconfigSECRETKEY  \n    return serializerdumpsconfirm selfuseruid  \nThis method uses the URLSafeTimedSerializer  function to create a serializing instance \nbased on the Flask SECRETKEY  and includes the current timestamp The serializer instance is \nused to create the unique token based on the new users userid value  \nCONFIRM USER HANDLER  \nWhen a new user clicks on th e confirmation link in their email that action makes a request to \na new URL handler in the auth module to confirm the token passed in the request is valid  \n  \n194Manning Publications Co  To comment go to  liveBook  authbpgetconfirmconfirmationtoken    A  \nloginrequired    B  \ndef confirmconfirmatio ntoken  \n    if currentuserconfirmed    C  \n        return redirecturlforintrobphome    C  \n    try \n         is the confirmation token confirmed  \n        if currentuserconfirmtokenconfirmationtoken    D  \n            with dbsessionmana ger as dbsession    E  \n                currentuserconfirmation  True    E  \n                dbsessionaddcurrentuser    E  \n                dbsessioncommit    E  \n                flashThank you for confirming your account  \n     confirmation  token bad or expired  \n    except Exception as e    F  \n        loggerexceptione    F  \n        flashemessage    F  \n        return redirecturlforauthbpresendconfirmation    F  \n    return redirecturlforintrobphome  \nA Register new con firm URL route with Blueprint  \nB Confirming a token requires the user to login  \nC If the user is already confirmed redirect them to the home page  \nD Confirm the token is valid  \nE If the token was valid set the current users confirmation status to True and save it in the database  \nF If confirming the token raised an exception log it inform the user and redirect them to the resend confirmation \npage  \nUSER CONFIRM TOKEN  \nThe application needs to confirm a token received in response to clicking the link  in the email \nis valid to confirm the user completed the registration process This code does that as part of \nthat process  \ndef confirmtokenself token  \n    serializer  URLSafeTimedSerializercurrentappconfigSECRETKEY  \n    with dbsessionmanage r as session  \n        confirmationlinktimeout   currentappconfiggetCONFIRMATIONLINKTIMEOUT  \n        timeout  confirmationlinktimeout  60  1000  \n        try \n            data  serializerloadstoken maxagetimeout  \n            if datage tconfirm  selfuseruid  \n                return False  \n            selfconfirmed  True  \n            sessionaddself  \n            return True  \n        except SignatureExpired BadSignature as e  \n            return False  \nThe confirmtoken  URL handl er creates a serializer instance just as the \nconfirmationtoken  creator method did It then enters a database context manager gets \nthe confirmation timeout value and the confirmation data sent in the request  \nThe code then compares the  confirm  value o f the data dictionary to the users userid \nvalue If the values dont match the user who clicked the link isnt the user who sent the \nconfirmation link  \n195Manning Publications Co  To comment go to  liveBook  The code to confirm the token is wrapped in an exception handler to return False if the \ntoken has expi red or is invalid in some way  \n96 Resetting Passwords  \nWere at a point where new users can register and confirm their email address  and e xisting \nusers can login to use the MyBlog application  \nNow we need to create a way for existing users to reset their password if theyve forgotten \nit In some ways a password reset request is similar to confirming a new user it sends a link \nto the users email  A handler exists for when the user clicks the link to present the user with \nthe password reset form  \nThe link sent in the reset password email contains the encrypted useruid  value of the \nrequesting user along with an expiration timeout The timeout value is set in the \nsettingstoml  file at ten minutes and is configurable  \nauthbpgetrequestresetpassword     A \nauthbppostrequestresetpassword     A \ndef requestresetpassword  \n    if currentuserisauthenticated  \n        return redirectintrobphome  \n    form  RequestResetPasswordForm     B \n    if formcanc eldata  \n        return redirecturlforintrobphome  \n    if formvalidateonsubmit  \n        with dbsessionmanager as dbsession     C \n            user       C \n                dbsessionqueryUser     C \n                filterUseremail  formemaildata     C \n                oneornone     C \n                C \n            if user is not None  \n                sendpasswordresetuser     D \n                timeout  currentappconfiggetPASSWOR DRESETTIMEOUT     D \n                flashfCheck your email to reset your password  within timeout minutes     \nD \n                return redirecturlforintrobphome  \n    return rendertemplaterequestresetpasswordhtml formform     E \nA Register the requestresetpassword function for both GET and POST HTTP methods  \nB Create an instance of the request password form  \nC Get the user associated with the email from the form  \nD Send the password reset email and notify the current user to chec k for it within the timeout  \nFor a HTTP GET request the handler presents this screen when running the application from \nthe CH09examples05 directory  \n196Manning Publications Co  To comment go to  liveBook   \nThe Password Reset form only present a single field for the users email that will be used \nto generate the email with the password reset link  \nIf a user is found for the email entered in the form that user is passed as a parameter to \na new function sendpasswordreset  \ndef sendpasswordresetuser  \n    timeout  currentappconfiggetPASSWORD RESETTIMEOUT    A  \n    token  usergetresettokentimeout    A  \n    to  useremail    B  \n    subject  Password Reset    B  \n    contents      B  \n        fuserfirstname    B  \n        Click the following link to reset your password within  timeout minutes    B  \n        urlforauthbpresetpassword tokentoken externalTrue    B  \n        If you havent requested a password reset ignore this email    B  \n        Sincerely    B  \n        MyBlog    B  \n            B  \n     \n    sendmailtoto subjectsubject contentscontents    C  \nA Create the encrypted reset token with the expiration timeout  \nB Build the email content  \nC Sent the email to the passed in users email address  \nWhen the user clicks on the link in the reset passwo rd email a new URL endpoint  function \nresetpassword  handler is invoked  \n  \n197Manning Publications Co  To comment go to  liveBook  authbpgetresetpasswordtoken    A    \nauthbppostresetpasswordtoken    A  \ndef resetpasswordtoken  \n    if currentuserisauthenticated  \n        return redirectintrobphome  \n    try \n        useruid  Userverifyresettokentoken    B  \n        with dbsessionmanager as dbsession    C  \n            user      C  \n                dbsession    C \n                    queryUser    C  \n                    filterUseruseruid  useruid    C  \n                    oneornone    C  \n                C \n            if user is None  \n                flashReset token invalid  \n                return redirectintrobphome  \n            form  ResetPasswordForm  \n            if formcanceldata  \n                return redirecturlforintrobphome  \n            if formvalidateonsubmit  \n                userpassword  formpassworddata    D \n                dbsessioncommit    D  \n                flashYour password has been reset  \n                return redirecturlforintrobphome  \n    except Exception as e  \n        flashstre  \n        loggerexceptione  \n        return redire ctintrobphome  \n    return rendertemplateresetpasswordhtml formform  \nA Register the requestresetpassword function for both GET and POST HTTP methods  \nB Get the useruid  from the encrypted token passed with the URL  \nC Find a user matching the useruid  \nD Update and save the users new password  \nWhen the handler is called with the HTTP GET method the form is presented in the users \nbrowser  \n198Manning Publications Co  To comment go to  liveBook   \nThe form lets the user enter an d confirm a new password When they click the Reset \nPassword button the handler is called with the HTTP POST method The useruid  is decrypted \nfrom the token passed with the URL and that user is searched for in the database If the user \nis found and the form is valid the users password is updated and saved in the database  \n97 Profiles  \nThe MyBlog application currently saves only a few pieces of information about registered users \nfirst name last name email and password whether they are confirmed and if t hey are active  \nIn addition to being able to reset their passwords if forgotten users would also want to \nchange their passwords Well add a profile page that shows most of the user information and \nallows for password changes  \n199Manning Publications Co  To comment go to  liveBook   \nThe profile is a form tha t presents and gathers information It shows the users name and \nemail and has input fields to enter and confirm a new password  \nThe form class to present the profile information is added to the authformspy  file \n  \n200Manning Publications Co  To comment go to  liveBook  class UserProfileFormFlaskForm  \n    firstname  StringFieldFirst Name  \n    lastname  StringFieldLast Name  \n    email  EmailFieldEmail  \n    password  PasswordField  \n        Update Password  \n        validatorsDataRequired Length  \n                min3  \n                max64  \n                messagePassword must be between 3 and 64 characters long  \n             \n            EqualToconfirmpassword messagePasswords must match  \n         \n     \n    confirmpassword  PasswordField  \n        Confirm Updated Password  \n        validatorsDataRequired Length  \n            min3  \n            max64  \n            messagePassword must be between 3 and 64 characters long  \n         \n     \n    cancel  SubmitField  \n        labelCancel  \n        renderkwformnovalidate True  \n     \n    submit  SubmitFieldlabelOkay  \nTo generate the HTML to display on th e browser requires a new URL handler in the \nauthauthpy  module  \n  \n201Manning Publications Co  To comment go to  liveBook  authbpgetprofileuseruid    A  \nauthbppostprofileuseruid    A  \nloginrequired    B  \ndef profileuseruid  \n    with dbsessionmanager as dbsession    C  \n        user      C  \n            dbsession    C  \n                queryUser    C  \n                filterUseruseruid  useruid    C  \n                oneornone    C  \n            C \n        if user is None    D  \n            flashUnknown user    D  \n            abort404    D  \n        if useruseruid  currentuseruseruid    E  \n            flashCant view profile for other users    E  \n            return redirectintrobphome    E  \n        form  Us erProfileFormobjuser  \n        if formcanceldata  \n            return redirecturlforintrobphome  \n        if formvalidateonsubmit  \n            userpassword  formpassworddata    F  \n            dbsessioncommit    F  \n            flashY our password has been updated  \n            return redirecturlforintrobphome  \n    return rendertemplateprofilehtml formform  \nA Register the profile function for both GET and POST HTTP methods  \nB To view a profile the user must be logged in coming up in the next section  \nC Get the user associated with the useruid in the URL path  \nD If no user is found notifiy the user and abort with a 404 error  \nE Prevent users from viewing profiles other than their own  \nF For a valid form submission upd ate the users password  \nThe HTML template to use to render the profile form isnt shown here but can be seen in the \nCH09examples05authtemplatesprofilehtml  template file  \n98 Security  \nOne of the goals of building an authentication system is to provide sec urity for an applications \nusers features and functions That security includes what features and functions a user can \nperform while using the application It also means protecting the application itself by \nmaintaining control that only known users can ac cess protected features and functions  \n981  Protecting Routes  \nAn authenticated user has a cryptographically secure session cookie that identifies them to the \napplication We can use the session and flasklogin  module to protect routes in the \napplication so only users who are logged in and authenticated can navigate t o those routes  \nCurrently the MyBlog application only has two routes that arent associated with \nauthentication the home page and the about page To demonstrate how to protect a route \nyoull temporarily create two new routes Protecting a page is done b y adding another \n202Manning Publications Co  To comment go to  liveBook  decorator provided by the flasklogin  module to a URL route page handler Add this to the \nimport section of the appintropy  module  \nfrom flasklogin  import loginrequired     A \nA Import the loginrequired decorator functionality from the  flasklogin module  \nAdd a new route and handler to the appintropy module  \nintrobprouteauthrequired     A \nloginrequired     B \ndef authrequired  \n    return rendertemplateauthrequiredhtml  \nA Add a new route for authrequired  \nB Deco rate the auth required  handler with the loginrequired functionality  \nThe authrequired  handler has two decorators introbproute  and \nloginrequired  Stacking decorators this way is absolutely fine The decorator functionality \nwraps around other deco rator functionality working from the inner level outward In this case \nthe loginrequired  decorator must be placed after the introbproute  or any \nBlueprint instance routing to make sure the loginrequired  functionality wraps the \nauthrequired  handler functionality  \nWith the authrequired handler protected by the loginrequired decorator an \nunauthenticated user will be redirected to the login page and wont be able to access the \nprotected authrequired  page This is useful when you want to allow only authenticated users \nto see sensitive or private information or prevent access to forms that could change server \ndata or functionality  \nAn example use case for this security is allowing only authenticated us ers to create and \npost blog content to the MyBlog application  \n982  Authorizing Routes  \nBesides protecting URL routes in the MyBlog application so only authenticated users can access \nthem youll also want to protected URL routes so only authenticated users with  specific \npermissions can access them This will be useful in later chapters when forms are created that \nonly editors or administrators need to access  \nTo create this functionality youll need to create a decorator similar to loginrequired  \nbut instead e xamines the users authorization To do this create another module inside of the \napp package appdecoratorspy  \n  \n203Manning Publications Co  To comment go to  liveBook  from functools import wraps  \nfrom enum import Flag  \nfrom flask import abort  \nfrom flasklogin import currentuser  \nfrom models import Role  \n \ndef authorizationrequiredpermissions    A  \n    def wrapperfunc    B  \n        wrapsfunc    C  \n        def wrappedfunctionargs kwargs   D  \n            if not currentuserrolepermissions  permissions    E  \n                abort403     F \n            return funcargs kwargs    G  \n        return wrappedfunction  \n    return wrapper  \nA Create the decorator function expecting to passed a permissions bitmask  \nB Create the wrapper to receive the wrapped function  \nC Use the wrapsfunc dec orator to maintain the wrapped function signature  \nD Create the wrapper to receive the wrapped functions parameters  \nE Determine if the current user has the permissions necessary for this route  \nF Abort with an HTTP 404 error code if the user doesnt have  the required permissions  \nWith the authorizationrequired  decorator function created lets demonstrate its usage \nUpdate the appintrointropy  module and add this code to the bottom of the import \nsection  \nfrom decorators import authorizationrequired  \nfrom models import Role  \nWith those lines added create a new URL route and handler  \nintrobprouteadminrequired    A  \nloginrequired    B  \nauthorizationrequiredRolePermissionsADMINISTRATOR    C  \ndef adminrequired    C  \n    return render templateadminrequiredhtml    C  \nA Add a new route for adminrequired  \nB Decorate the admin required  handler with the loginrequired functionality  \nC Decorate the admin required handler with the authorizationrequired functionality  \nWith this route in place you can run the application and try to navigate to the URL route \nhttp127001adminrequired  The system will generate a 404 error for all users except a \nuser with administrator p ermissions How to create an administrator user will be covered in a \nlater chapter     \n983  Protecting Forms  \nTheres another protection relevant to forms that weve glossed over In both the loginhtml  \nand registernewuserhtml  templates theres a field withi n the form context that looks like \nthis \n  \n204Manning Publications Co  To comment go to  liveBook  form action methodPOST novalidate  \n    formcsrftoken  \n    rest of the form  \nform \nWhat is the formcsrftoken Jinja substitution element If you view the source of \neither the login  or register newuser  pages youll see an input  element that looks \nsomething like this  \ninput idcsrftoken namecsrftoken typehidden \nvalueIjE1NzU4NjE3OWNlMTUxYmM0Yzc3OTAyTOZiODk4NjRmNTdmZGM5OGUiYEULPgjVDKYLM3MMlpK\nKBQSh2f1hWUfQ  \nThe element is a hid den not shown on the browser page input element with a strange \nlooking value The value is generated by the MyBlog application server using the Flask \nSECRETKEY configuration value along with the user session unique identifier The purpose of \nthis elemen t is to prevent Cross Site Request Forgery CSRF attacks The formcsrf token  \nis intended to protect a request that would take action like an HTTP POST When the server \nreceives a protected form it will validate both the session and formcsrf token  to ensure a \nmalicious user hasnt altered it  \nThe protection above is provided automatically by using the Flask WTF module All you \nneed to do is include the formcsrftoken  in any form you want to protect  \n99 Summary  \nThis chapter has added a great deal of functionality to the MyBlog application and expanded \nyour knowledge with practical tools and techniques used to create an application with growing \ncomplexity  \n Youve learned about sessions and their importance in web applications  \n Youve created User and Role models to authenticate users  \n An introduction to databases enabled saving users for later login  \n Youve built a system to register new users and allow those users to login  \n Youve created a mechanism to confirm new us ers \n Youve created a system so users can reset forgotten passwords  \n Youve created a profile so existing users can change their passwords  \n Youve learned how to protect routes in the application to authenticated users  \n Youve created a Role permissions system  to protect routes to particular users  \nBy using the new modules youve  learned about FlaskLogin  FlaskBcrypt  FlaskWTF and \nFlaskSQLAlchemy youve  created a n effective authentication and authorization system \nEnsuring user security is a decisive step  towards having an application accepted by users  \nThe authorization system youve created is absolutely functional and useful to the MyBlog  \napplication It is far from the last word in security If youre needs to secure a web application \nare more stringent youll need to consider things like two factor authentication or more \nrealistically use a third party service to host your authenticati on \nYouve drilled down on your view of authenticatingauthorizing friends to your application \nto an almost microscopic level The level of detail revealed helped to create a useful and \n205Manning Publications Co  To comment go to  liveBook  serviceable loginlogout system necessary to safeguard the users of My Blog but the MyBlog \nsystem itself  \nThe next chapter will magnify your view into the database information introduced here \nYoull dive deeper into designing database tables the relationships between them and how \nSQLAlchemy integrates the Python and data base worlds  \n  \n206Manning Publications Co  To comment go to  liveBook  1 0 \nPersistence Means Never Having to \nsay Goodbye  \nThis chapter covers  \nPersisting Data\nDatabase Systems\nDatabase Structures\nModeling Data with SQLAlchemy\nYouve shown a great deal of persistence getting this far and I hope the journey has been \nrewarding and kept your interest to go further As satisfying as sticking with something is that \nkind of persistence isnt what this chapter covers  \nThis chapter is about persisting application data over time You dont run the applications \nyou use foreve r and despite the stability of computer systems they are shut down and \nrestarted periodically  \nImagine using a complex spreadsheet and having to re enter all the data every time you \nrestarted the application or powered the computer on Even with the enor mous processing \npower a computer has it would hardly be a helpful device if there was no way to restore the \ninformation entered into it  \n101 The Other Half  \nAs a developer its easy to think of the application code youre creating as the primary product \nof your efforts But in reality your cool essential application with all its well thought out \nfeatures and functions are only half the story The other equally important half is the data \nyour application helps the user work with Modifying transforming and providing insights into \ndata your users are interested in is the raw material an application works with  \n207Manning Publications Co  To comment go to  liveBook  1011  Maintaining Information Over Time  \nA file system saves data to a storage medium independent of electrical power Most personal \ncomputer systems main tain file systems on either mechanical or solid state drives These \nstorage devices have file system structures layered over them by the operating system of the \ncomputer  \nThe file system provides a hierarchically organized mechanism to save and retrieve fi les \nfrom the storage device As far as the file system is concerned a file is a sequence of data \nbytes connected to a file name existing somewhere in the hierarchy In addition the file system \ncan create modify and delete files and maintains housekeepin g metadata about the files like \nread write and executable status  \nApplication programs give meaning to the data in a file For example when a photo viewing \napplication opens a JPEG image file the user sees a picture The photo application can interpre t \nthe contents of the file and generate the expected visual results  \nIf a user were to open the same JPEG image file with a text editor they would see a large \nblock of largely incomprehensible data Most of the files in a file system are like this their \ncontent makes sense to the applications that can read and interpret them  \nThe MyBlog application needs to save modify and recall content to display to users The \ncontent saved to the file system is in a format understood by the application The MyBlog \napplication already saves registered user information to the filesystem using a database This \nchapter is a tangential topic away from the MyBlog application to take a closer look at \ndatabases  \n102 Accessing Data  \nBefore diving directly into database systems lets talk about storing data in a file in general \nTo do so well use something everyone whos bought anything online is familiar with customer \norders for products Later well use this idea to illustrate some issues when storing data to file \nsystems  \nTo begin with imagine an online store that only sells a single product to many customers \nEach customer might create multiple orders for that single product To make the data relatively \neasy to present on the pages of this book well keep the amou nt of information very low the \ncustomers name their address the product name and the quantity in the order  \nA common format for data in a file system is the comma delimited value format or CSV A \nCSV file is easy to understand and has the advantage of  being human readable and accessible \nby computer systems  \nA CSV file is a simple text file where each line of text is a record of data ending in a newline \ncharacter A comma character separates the data elements in each line of text The first line \nof text  in a CSV file often contains the names of each comma separated field in the remainder \nof rows of text in the file  \nThats pretty much it no concept of data type for each element in a record an application \nreads the CSV file and splits each comma separat ed line of text into fields of text data  \nThe imaginary company selling only one product to each customer could save all of the \ncustomer information and their orders in a single CSV file  \n208Manning Publications Co  To comment go to  liveBook   \nThis CSV file is sufficient to represent the customers their orde rs and address where to \nship them The first field contains the customers name the second their address the third \ntheir zip code the fourth field is the product name and the last field is the quantity of the \nproducts in the order Because the company  only sells a single product this could work  \nEven in this example you might notice a potential problem Theres redundant data in the \nfile For example customers and their addresses are represented multiple times for each \nseparate order as in the case  of the orders for Joe and Mary  \nThe same data stored multiple times can be a problem if the customer Joe wants to change \nto using his full name Joseph To accommodate this the company would have to update all \nthe records in the file related to Joe This  kind of update is prone to error particularly if the \nfile has become very large Making a mistake and missing one or more of the Joe records would \ncreate two sets of customer records one for Joe and another for Joseph  \nWe could resolve the problem by re moving the redundancy and having only one record for \neach customer and representing multiple orders in that same record You could create more \ncomma separated fields containing the quantities but this doesnt work Because theres no \nway to know how many orders a customer will create it would be difficult for an application \nreading the CSV file to know how many fields to expect  \nWe could pack multiple product and quantity fields into the single order field but wed need \nto use a delimiter distinct from a  comma to separate the values So instead we use the pipe \n character to separate orders and the dash character   to separate the product from the \nquantity Doing this allows you to maintain multiple orders per record so that an application \ncan still p arse the lines of text in the file  \nImplementing this idea creates a CSV file like this  \n \nThis implementation reduces the redundancy in the file as well as its size Reducing the \nredundancy comes at the cost of increased processing when reading and interp reting the data \n209Manning Publications Co  To comment go to  liveBook  in this CSV file The application will have to parse for the comma the pipe and the dash \nsymbol delimiters in the order field  \nSuppose our imaginary company decides to sell multiple products and customers can ship \nan order to any address  they want Now customer orders need to contain the shipping address \ninformation which needs its own delimiters within the field to stay distinct  \nWe could extend the CSV file in this way  \n \nAdding more delimiters could work but its getting silly with mu ltiple data items to parse in \nthe orders field This approach also doesnt scale well as adding more products makes the \norders field even more complicated  \nResolving this problem means recognizing the logical divisions between the data elements \nto be store d For example a customer can ship multiple orders to different shipping addresses \nand each order can contain multiple products and quantities  \nEach customer can have multiple orders but each order is related to only a single customer \nSimilarly each a ddress can be related to multiple orders but each order will ship to only a \nsingle address  \nOrders and products are a little more challenging An order can contain multiple products \nand a product can be part of multiple orders To resolve this we inven t the concept of an order \nhaving an item An item relates to an order and a product providing this two way connection \nAn item might also contain the quantity of products the item represents  \nWe can break the data into separate CSV files along these logic al lines essentially where \nweve added additional delimiters in the text Taking this action creates five CSV files \ncustomer address product order and item The five CSV files separate the data along the \nlogical lines Unfortunately theres no way t o connect a customer to an order an order to \naddress or an item to either an order or a product  \nTo connect the data we need to create relationships between the rows of data in the files \nWe can do this by creating a unique identifying value for each ro w in every CSV file At a \nminimum the row identifier only needs to be unique across the rows in an individual CSV file  \nWell add another column at the beginning of each row and assign an integer value \nincremented for each row The integer value uniquely i dentifies each row of data in a CSV file \nbut there are still no relationships between the CSV files  \nTo create relationships we add the unique identifier from one record in a CSV file to another \nto indicate the relationship between the two CSV files For  example a single customer can \ncreate multiple orders but each order only belongs to a single customer  \nWell add the unique identifier as a new value to all the rows in the order CSV file that \nrelate to that customer to create this relationship This kind of relationship is called one to\n210Manning Publications Co  To comment go to  liveBook  many each customer is related to multiple orders but each order relates to only a single \ncustomer  \nTheres also another relationship we have to establish Each order can consist of multiple \nproduct s and each product can relate to multiple orders A relationship like this is called a \nmany tomany Conceptually this is a many toone relationship combined with a one tomany \nand is implemented by creating relationship associations This is how the conc ept of an order \nitem mentioned earlier is implemented  \nTo do this well create an item CSV file that contains the unique ids from both the order \nand product CSV files for each item In this way an order can connect to multiple items and \nconnect to multip le products  \n \nThe five CSV files to represent the information is presented below  \nThe diagram shows the five CSV files their contents and the relationships between them \nEach file has a unique id value as the first field in each row of data The structu re shows the \nCustomer Product and Address files have no redundant data It also shows the Order and \nItem files contain primarily relationship data aside from the unique id and the qty value in \nItem  \nBecause of the structure and contents of the CSV files  our imaginary company could \ncontinue to add new customers add new products to sell and addresses to ship to all without \ncreating unsustainable redundant information The program in examples01mainpy  uses this \n211Manning Publications Co  To comment go to  liveBook information to create simple invoice PDF files for all the orders in the system The diagram \nbelow shows invoice1pdf  with indications for the source of the data shown \nI wont present the example program here as its available in the code repository The \nprogram works by reading all the CSV files into memory and creating a Transactions \ncontainer class to hold the information Next the orders in the Transactions  class are inserted \ninto the transaction information fields in a Jinja2 template The resulting rendered HTML is \nconverted to a PDF file \nThe above ideas and implementation work but have significant limitations Because the \nCSV files are read into memory the number of customers products and orders are limited to \nthe amount of memory the application has available \nThe example program has only one use to create a set of order invoices for all the orders \nin the system There is no facility to search for an order customer or product Any additional \nuse cases our imaginary company might want like searching or reporting requires quite a bit \nmore programming development \nOur imaginary company would likely want to have multiple users interacting with the data \nboth customers and employees Coordinating multiple access has to be handled by the \napplication so the data stays consistent and uncorrupted If multiple applications access the \nCSV files this presents another level of complexity to coordinate that access keep the data \nsynchronized and current in all applications and prevent the files from becoming corrupted  \nTheres also no standardized way to use the CSV files The CSV files are shared easily \nenough but anyone wanting to use them would need detailed knowledge of the structure of \nthe files and the relationships implied by that structure Theyd also have to maintain that \nstructure if they wanted to modify the data contents \n212Manning Publications Co  To comment go to  liveBook For any application written in any language to work with the data it would have to handle \nthe intention of the CSV files specifically In addition any changes in structure to the CSV files \nwould necessitate changes to the software to be aware of those changes \nMany of our imaginary companys shortcomings have to do with explicit management of \nthe data and detailed programming to implement how to access and maintain the data One \nsolution to the problems is to move the data to a database system  \n103 Database Systems \nDatabase systems allow you to persist data as well as the relationships between that data \nOne common type of database is the Relational Database Management System or RDBMS \nRDBMS systems provide the functionality to create read update and delete tables stored \nwithin them These tables are analogous to the twodimensional tables represented by the CSV \nfiles used in the example above \nRDBMS systems also have the functionality to create and update the relationships between \ntables by connecting unique id values across table boundaries \nOne of the advantages of a database system over using files to persist information is that \ncreating updating and maintaining the data is handled by the database \n1031  Tables \nThe use of tables represents the data a database maintains Conceptually tables in a database \nare twodimensional collections of rows and columns \nLike the CSV files presented previously the rows are the individual records and the \ncolumns are the fields within a row Unlike a CSV file where the columns are strings separated \nby a delimiter the columns in database tables have defined data types The data types \nsupported depend on the particular database but data types of text integer real decimal \nnumbers and blobs binary objects are generally supported \nTables in a database can be represented graphically as part of an Entity Relationship \nDiagram or ERD Rather than show the rows and columns that make up a table the column \nand data type information for a record is shown As an example here is the database table \nrepresenting the customer information \nThe diagram header is the table name and each row represents a column in the database \ntable Here the three columns in the diagram provide information about the database column \nThe second is the column name and the third is the column data type  \nThe first column in the diagram provides additional information about the column In the \nexample above the first row has the abbreviation PK PK is shorthand for Primary Key which \nis the unique id associated with each row of data in the table \n213Manning Publications Co  To comment go to  liveBook  The order CSV file contained n othing but unique id values one for the row unique id and \ntwo others to connect to the customer and address CSV file rows The ERD for the order table \nis presented here  \n \nJust like the customer table has two columns describing the database columns of the  table \nthe order table has three columns describing the data it maintains The new FK abbreviation \nis shorthand for Foreign Key A Foreign Key creates a relationship between two tables by \nreferencing the Primary Key of another table  \n1032  Relationships  \nAs impo rtant as storing and modifying  data is to any application the relationships between the \ndata are just as important The updated  CSV files for our imaginary company enabled you to \nreduce the  data redundancy of the  original single CSV file Reducing data re dundancy is one \nimportant aspect of database normalization  \nThe separation of distinct data into separate tables does mean there needs to be a way to \nreconnect related data RDBMS systems establish relationships between multiple tables with \nthe use of Prim ary and Foreign Keys  \nThe Primary Key in a database table is a column in a row a record whose value is unique \nacross the entire table Its often the case the Primary Key column exists for the sole purpose \nof providing this unique id value and contains n o information about the record itself  \nIts not always necessary to create a distinct Primary Key field If a column of useful data \nis unique across a table that column can be the Primary Key For example suppose a table \ncontaining information about peop le included their social security number In that case the \nsocial security number should be unique for every record in the table and could be the Primary \nKey \nEven if a column in a table contains data thats unique enough to be used as the Primary \nKey it s often easier and more future proof to create a distinct Primary Key column thats not \ndependent on the uniqueness of the data in the table  \nMost RDBMS systems have functionality to create auto incrementing integer values when \nnew rows are inserted into a table These make convenient Primary Key values that are assured \nto be unique across the table as new records are inserted into the table and the value \nincrements  \nThe existence of Primary Keys and their use as Foreign Keys in other tables allows \nrelationships to exist between tables  \n214Manning Publications Co  To comment go to  liveBook  UUID  PRIMARY KEYS \nAnother option to create Primary Key values is to use UUID Universally Unique Identifier \nvalues A Primary Key with a UUID value is not only unique across the table its in but unique \nacross all tables  in all databases Having a universally unique Primary Key can be helpful over \ntime as the structure and use of the database change  \nAs conditions and requirements change over time database structures are updated to meet \nthe needs of those requirements O ne example might be merging two tables together In this \nsituation all of the records from both should exist in the merged table and each record still \nneeds a unique Primary Key  \nIf both source tables were created with auto incrementing Primary Key values  its very \nlikely merging the tables creates Primary Key conflicts If the Primary Key values are changed \nto resolve the conflict any relationships depending on a Foreign Key that points to the original \nPrimary Key value are broken A considerable amount of effort is necessary to fix this kind of \nproblem  \nHowever if the Primary Key values are UUID values then merging the tables presents no \nconflicts because of the definition of a UUID value Any Foreign Key that references a UUID \nPrimary Key still works w ith the merged table  \nAnother interesting perhaps small advantage of using UUID based Primary Keys is \nsecurity through obscurity For example in a web application for our imaginary company \nthey might have a URL like this  \nhttps imaginarycompanycom orders2  \nSomeone might guess the last part of that URL is an auto incrementing Primary Key for a \nparticular order in a database Understanding that they could change the last value in the URL \nand see every order in the system which might reveal more info rmation than youd like  \nHowever if the database used UUID Primary Key values the URL might look like this  \nhttps imaginarycompanycomorders1a99289c9de5482b90c3b45e20a60c20  \nNow the last part of the URL that references a particular order in the orders  collection is a \nUUID value with the   characters striped out Now its essentially impossible for someone to \nguess an order Primary Key value that would work Its not really a security step just a side \neffect of using UUID Primary Keys  \nUsing a UUID a s the Primary Key in database tables does increase the storage cost as UUID \nvalues are larger than integers They might also adversely affect the performance of the \ndatabase in a small way The cost vs value question needs to be considered when deciding \nwhether or not to use UUID values as Primary Keys  \nThe MyBlog application database uses UUID Primary Keys not so much because of any \nrequirements for MyBlog functionality but to present the implementation  \nONE TO MANY \nIn our imaginary company there is a relationship between customers and orders A customer \ncan create zero to many orders for products but each order is related to only one customer \nThis kind of relationship is called One ToMany  \n215Manning Publications Co  To comment go to  liveBook  To establish a One ToMany relationship the unique customer id value from the customer \ntable is also present as a column of data in the order table as customerid  The customerid  \nvalue is a Foreign Key relating to the customer table Any number of order records can have \nthe same customerid  value creating the On eToMany relationship  \nWhen creating a Foreign Key in a table part of the definition given to the database engine \nis to what table the Foreign Key relates The Foreign Key tells the database engine theres a \nrelationship and helps it provide the function ality to use that relationship  \nMANY TO MANY \nOur imaginary company also establishes another kind of relationship An order can have many \nitems each related to a product At the same time a product can be part of many items A \nrelationship like this is ca lled a Many ToMany  \nEstablishing a Many ToMany relationship is more involved and in some ways can be \nthought of as a One ToMany relationship connected to a Many ToOne relationship To create \nthis requires an association table that acts as the Many pa rts between the two just mentioned  \nThe item table creates the association between the order and product tables The item \ntable has a Foreign Key to the order table orderid  field and a Foreign Key to the product \ntable productid  field  \n1033  Transaction Databa se \nThe transaction database youll create uses a naming convention for the tables and the columns \nwithin those tables The tables are named using singular nouns for what they contain \ncustomer product etc  \nThe naming convention seems counter intuitive si nce a table has multiple records and a \nplural version of the noun might seem more fitting However the table is defined in terms of \none row of data and the data types and meanings of the records columns How the table is \naccessed can return one or more records but the table itself is configured based on a single \nrecord  \nAdditionally it can get surprisingly awkward to use plurals when naming tables For \nexample trying to define a person in a database table The plural version would be a table \nnamed people with possibly a primary key of peopleid  which seems inelegant Renaming \nthe primary key to personid  works better but now there is a cognitive disconnect between \nthe table name and the primary key  \nThe Primary Key columns are named using a conventi on of the table name appended with \nid While seemingly redundant and wordy as the Primary Key name its quickly apparent \nthe column with such a name is a Foreign Key when used in another table  \nCreating an ERD for the transaction database generates thi s \n216Manning Publications Co  To comment go to  liveBook   \nThis diagram represents the transaction database tables structure and the relationships \nbetween them using common database ERD notation and symbols Notice how the connection \nbetween tables goes from Primary Key in one table to Foreign Key in another  \nThe connecting lines are all variations of One ToMany relationships The existence of the \nItem table creates the Many ToMany relationship between the Order  Item  Product \ntables  \nCreating updating and interacting with the data in an RDBMS system us es the Structured \nQuery Language SQL most RDBMS systems provide  \n1034  Structured Query Language SQL  \nAccessing the functionality of a database is standardized so any programming language that \nhas a library available to connect to the database can use it This standardization  makes the \ndatabase much easier to share between applications than a proprietary system  \nMuch of th e standardized functionality of RDBMS sy stems are exposed to the user by using \nStructured Query Language or SQL SQL interacts with an R DBMS system as a declarative \nprogramming language A declarative language lets you express what you want a computer \nsystem to do and not explicitly instruct the system on how to perform that task  \nOne way to think about this would be going to a bakery and  asking for a cake You expect \nthe baker will hand you a cake not ask for a recipe to make a cake  \nGETTING DATA \nYoull be creating the transaction database later in this chapter but here Ill show some SQL \nqueries to access data This SQL statement  \nSELECT  FROM customer  \n217Manning Publications Co  To comment go to  liveBook  Returns these results  \ncustomerid  name  \n     \n1            Joe  \n2            Mary  \n3            Sue  \nThe SQL command keywords are in uppercase which is just a convention The statement \nasks the database to return all rows from the customer table The   character is a wildcard \nto get all columns for each row returned The   character at the end of the SQL statement is \nthe terminator for the command  \nThis SQL query asks for only the names in the customer database sor ted in descending \nalphabetical order  \nSELECT name FROM customer ORDER BY name DESC  \n \nname \n  \nSue \nMary \nJoe \nSQL also provides functions that transform and act on the data The statement below \nreturns the number of customers  \nSELECT COUNT AS Total  Customers FROM customer  \nTotal Customers  \n  \n3 \nThe COUNT  function returns the total number of results produced by the query and assigns \nthat value to an alias Total Customers used as the column heading for the output results  \nUSING RELATION SHIPS  \nBecause the tables in the transaction database represent normalized data without \nredundancies making interesting queries requires using relationships In this SQL statement \nthe customers all the addresses used for their orders the number of times  theyve used an \naddress for an order are returned and sorted alphabetically by name  \nSELECT cname astreet azipcode COUNTcname AS Times Used  \nFROM CUSTOMER c  \nJOIN order o ON ocustomerid  ccustomerid  \nJOIN address a ON aaddressid  oadd ressid \nGROUP BY astreet  \nORDER BY cname  \n \nname        street      zipcode     Times Used  \n           \nJoe         12 Main St  12345       2  \nMary        127 Margol  40322       1  \nMary        41 Orange   40321       1  \nSue         212 Grove   34213       1  \n218Manning Publications Co  To comment go to  liveBook  Here the SQL statement spans multiple lines which works fine as the statement isnt \ncompleted until the final  termination character As before only some values from the tables \nare returned but those values span m ultiple tables  \nInitially the query starts at the customer table and assigns it to an alias shorthand used in \nother parts of the query to reduce ambiguity To get the customer address used with each \norder the query needs to use the relationships between t he customer order and address \ntables Using the  JOIN keyword achieves this It tells the database how to connect one table \nto another using the Primary Key from one to the Foreign Key of another  \nThe Primary Key from one table must equal the Foreign K ey of the other for that row to be \npart of the results What follows the  ON keyword provides the condition to be met to include \nthe data  \nNotice the order table is in single quotes in the first  JOIN statement The single quotes \nare necessary because the word order is a SQL keyword placing it in single quotes tells SQL \nto interpret order as the table name rather than a keyword  \nThe GROUP BY astreet  tells SQL to aggregate the results based on identical street \nvalues The results returned indicate this For example Joe has two orders but used the same \naddress for both Mary also has two orders but used a different address for each one  \nThe SQL to get the data to build invoices for all the orders our imaginary company has is \nwritten like this  \nSELECT \ncname astreet azipcode oorderid pname iqty  \nFROM order o  \nJOIN customer c ON ccustomerid  ocustomerid  \nJOIN address a ON aaddressid  oaddressid  \nJOIN item i ON oorderid  iorderid  \nJOIN product p ON pproductid  iproductid  \nAnd returns these results  \nname        street      zipcode     orderid    name        qty  \n                 \nJoe         12 Main St  12345       1           widget      2  \nJoe         12 Main St  12345       1           thingy      3  \nJoe         12 Main St  12345       2           thingy      5  \nMary        41 Orange   40321       3           widget      1  \nMary        41 Orange   40321       3           thingy      9  \nMary        127 Margol  40322       4           widget      7  \nSue         212 Grove   34213       5           widget      3  \nThis SQL query joins all the tables in the transaction database to recreate the redundant \ndata for customers orders addresses products and items  \n104 SQLite As the Database  \nBefore we get to creating and using a database with SQLAlchemy lets talk about the particular \ndatabase well use for the transaction database and MyBlog in general  \nIn Chapter 9 Do I Know You we used SQLite to persist users and their roles For the \ntransaction database and the rest of the MyBlog development well continue to use SQLite  \n219Manning Publications Co  To comment go to  liveBook  The decision to use SQLite was based on a few considerations The SQLite website states \nthat SQLite is likely one of the most widely used database systems globally if you look at the \nnumber and types of systems that use it Its also small fast full featured and completely \nserves the needs of the MyBlog application  \nThe other and probably more relevant consideration in regard to this book is that SQLite \nruns as an i nprocess database What this means is it runs as a module pulled into the \napplication like any other Python module Theres no need to install configure and maintain a \ndatabase server like MySQL PostgreSQL or SQL Server to build and learn with the MyBlo g \ndevelopment process  \nDatabase servers like MySQL PostgreSQL and SQL Server are powerful capable systems \nthat could easily handle the needs of the MyBlog application However it would take time and \nbook real estate to help readers get those systems up  and running  \nLastly the use of SQLAlchemy helps to abstract away the underlying database and lets you \nfocus on development and database concepts rather than a particular database \nimplementation Should your needs with MyBlog outgrow what SQLite can do fo r you replacing \nit with another database system is easier because of the abstraction SQLAlchemy provides  \n105 SQLAlchemy  \nSQLAlchemy is a popular and powerful database access library for Python that provides an \nObject Relational Mapper ORM One of the benefi ts of working with Python is that its an \nobject oriented language and everything in Python is an object Working with data as Python \nobjects feels more natural and more Pythonic  \nPython can access database systems using SQL directly and this is a viable approach Most \nPython database libraries that support SQL return lists of tuples or dictionaries containing the \nresults of the SQL statement  \nThe SQL statement illustrating how to get the data to create invoices for orders shows the \ndata but all relations hip information is lost To use this data would require software to glean \nthe hierarchal relationships in orders  item  products The disconnect between objects and \nflat data is known as object relational impedance mismatch and its a problem the \nSQLAlc hemy ORM solves  \n1051  Benefits  \nUsing SQLAlchemy to access a database allows you to think about objects and methods rather \nthan SQL and result sets For the most part you dont need to know SQL to work with the \nunderlying database Instead SQLAlchemy builds the  necessary SQL statement to map the \nresulting data to Python objects and vice versa  \nMost RDBMS databases support SQL however they often add proprietary functionality to \ntheir implementation Aside from specific use cases SQLAlchemy abstracts these diff erences \naway and works at a higher level  \nAnother advantage SQLAlchemy provides is protecting your application from SQL injection \nattacks For example if your application adds user supplied information to use with database \nqueries your application is vul nerable to this kind of attack  \n220Manning Publications Co  To comment go to  liveBook   \nExploits Of A Mom  httpsxkcdcomlicensehtml  \n106 Modeling The Database  \nConnecting t he database to SQLAlchemy requires modeling the table structures with Python \nclass definitions The models map the table record structure the field data types and the \nrelationships between tables to Python class definitions Instances of these Python cl asses are \ncreated by to calling methods on the classes which SQLAlchemy translates to SQL statements  \nBecause the ultimate goal is to use SQLAlchemy with the MyBlog application well use Flask \nand the flasksqlalchemy modules to help define the classes T he flasksqlalchemy module \nprovides convenience features and definitions but the classes defined here could just as easily \nhave been defined with the SQLAlchemy module alone  \n1061  Defining the Classes  \nThe examples02mainpy  program imports a modelspy  module The modelspy  module \ncontains all of  the code to create the database object model the tables and populate the \ndatabase with data from the CSV files of examples01   \nTHE DATABASE CONNECTION  \nAll of the classes to be defined inherit from a common SQLAlchemy provided database object \nThe datab ase object is created prior to defining the classes and is created in this way  \napp  Flaskname    A  \nappconfigSQLALCHEMYDATABASEURI  sqlitetransactionsqlite    B  \nappconfigSQLALCHEMYTRACKMODIFICATIONS  False    C  \ndb  SQLAlch emyapp sessionoptionsautoflush False    D  \nA Create the Flask instance  \nB Configure SQLAlchemy to use SQLite and where to create the database file  \nC Turn off an unnecessary default configuration that generates a warning  \nD Creates the SQLAlchem y database object in this case with autoflush turned off which helps make DB operations \nmore atomic at the point of issuing a commit  \nThe intent of the code above is to create the db object instance used to define the table models \nThe database itself i s stored in the single file  transactionsqlite  \nMODELING THE TABLES  \nThe transaction database ERD shown previously is a pretty good guide to create the class \ndefinitions needed to access the database with SQLAlchemy The class definitions define the \ndataba se tables to create the column names within a record and their data types  \n221Manning Publications Co  To comment go to  liveBook  There are also fields defined that dont exist in the database but are created and maintained \nby SQLAlchemy when instances of the models are created These extra fields give you useful \nfunctionality when working with the model instances particularly relationships between tables \nFor example the orders  attribute defined below in the Customers model SQLAlchemy \nmaintains a Python list of all the orders associated with a Customer i nstance  \nLets look at the Customer and Order class definitions  \nclass CustomerdbModel    A  \n    tablename  customer    B  \n    customerid  dbColumndbInteger primarykeyTrue    C  \n    name  dbColumndbString    D  \n    orders  dbrela tionshipOrder backrefdbbackrefcustomer    E  \nA Create the class inheriting from the db instance Model class  \nB Associate the class definition with the customer database table  \nC Create the customerid column as an integer type and as the prima rykey  \nD Create the name column as a string  \nE Create the attribute orders connecting a customer to all their orders  \nclass OrderdbModel    A  \n    tablename  order    B  \n    orderid  dbColumndbInteger primarykeyTrue    C  \n    customerid  dbColumndbInteger dbForeignKeycustomercustomerid    D  \n    addressid  dbColumndbInteger dbForeignKeyaddressaddressid    E  \nA Create the class inheri ting from the db instance Model class  \nB Associate the class definition with the order database table  \nC Create the orderid column as an integer type and as the primarykey  \nD Create the customerid as an integer and foreignkey to the customer table and customerid field  \nE Create the addressid as an integer and foreign key to the address table and addressid field  \nTheres quite a bit going on in these class definitions By inheriting from the dbModel  class \nthe Customer  and Order  classes get SQLAlchemy  functionality allowing the classes to interact \nwith the underlying database  \nThe customerid column is defined as an integer and as the Primary Key By doing this \nthe customerid  field is initialized by an auto incrementing function every time a new \nCustomer instance is added to the database The same happens for the orderid  field in the \nOrder  class  \nThe name column is a simple string that maps to whatever database type best supports \nPython string type variables Since SQLite is the underlying database t hat type is TEXT  \nThe Customer  class attribute orders  is interesting and useful It does not define a column \nin the database customer table at all Instead it creates an attribute maintained by \nSQLAlchemy that is available to you as a developer  \nThe orders attribute uses the relationship established by the customerid  Foreign Key \ncreated in the Order  class A Customer  instance has an orders  attribute that is a Python list \nof the Order  instances associated with the customer  \nThe odd looking backef  paramete r passed to dbrelationship creates an \nSQLAlchemy maintained attribute named customer  in the Order  class definition that points \nback to the Customer  instance to which the order relates Conceptually the relationships look \nlike this  \n222Manning Publications Co  To comment go to  liveBook   \nThe orders  attribu te lets you write Python code like this when you have a Customer  \ninstance  \nprintfCustomer customername has these order number  \nfor order in customerorders  \n    printfOrder number orderorderid  \nThe relationships and the attributes created and  maintained by SQLAlchemy are very useful \nwhen printing out the order invoices The rest of the SQLAlchemy model definitions follow  \nclass AddressdbModel  \n    tablename  address  \n    addressid  dbColumndbInteger primarykeyTrue  \n    street  dbColumndbString  \n    zipcode  dbColumndbString  \n    orders  dbrelationshipOrder backrefdbbackrefaddress  \n \nclass ProductdbModel  \n    tablename  product  \n    productid  dbColumndbInteger primarykeyTrue  \n    name  dbColumndbString  \n \nclass ItemdbModel    A  \n    tablename  item    B  \n    orderid  dbColumndbInteger dbForeignKeyorderorderid primarykeyTrue    \nC \n    productid   dbColumndbInteger dbForeignKeyproductproductid \nprimarykeyTrue    D  \n    qty  dbColumndbInteger    E  \n    order  dbrelationshipOrder backrefdbbackrefitems    F  \n    product  dbrelationshipProduct    G  \nA Create the c lass inheriting from the db instance Model class  \nB Associate the class with the item database table  \nC Create the orderid as an integer and foreignkey to the order table and orderid field  \nD Create the productid as an integer and foreignkey to the p roduct table and productid field  \nE Create the qty field to track the quantity of product for this item  \nF Create the instance only attribute order connecting an order to this item  \nG Create the instance only attribute product connection a product to th is item  \nThe Item class definition creates the many tomany association relationship between an order \nthe items in that order and products related to the items  \n223Manning Publications Co  To comment go to  liveBook  107 Creating and Using the Database  \nOnce the SQLAlchemy  models are defined the database can be created This line of Python \ncode creates the database  \ndbcreateall  \nIf the transactionsqlite  SQLite database file defined earlier doesnt exist its created \nwith table structures defined by the models and those tables will be empty However if the \ntransactionsqlite  database file does exist the code above wont re create it it will just \nconnect to it  \nIts essential to recognize any changes made to the SQLAlchemy models wont appear in \nthe database if the database already exists You can delete and recreate the database and it \nwill match the updated models which is fine in this case but an unreasonable action most of \nthe time  \nWith an existing database youll need to use SQL statements or other database migration \ntools to modify the database to match the updated SQLAlchemy models As a working \ndeveloper its not common to create a database  from scratch The more frequent activity is \nmodifying an existing database to add new features and functionality to it Python tools like \nAlembic  httpspypiorgprojectalembic  are useful for this kind of activity with \nSQLAlchemy  \n1071  Adding Data  \nEven th ough creating and populating a database from scratch isnt an everyday activity for a \ndeveloper well look at it in the examples02modelspy  to see how SQLAlchemy creates and \ninserts database table records  \nThe programs goal in examples02mainpy  is to  replicate the behavior of \nexamples01mainpy  but use a database instead of CSV tables To do so means parsing the \nCSV files and inserting the data into the database using SQLAlchemy The modelspy  module \ncontains the SQLAlchemy models and the statement to create the database It also has a \ncustom function to read the CSV files and load them into the database tables  \n  \n224Manning Publications Co  To comment go to  liveBook  def loaddatabase  \n    customers  CsvDatacustomercsv    A  \n    addresses  CsvDataaddresscsv    A  \n    orders  CsvDataorde rcsv    A  \n    products  CsvDataproductcsv    A  \n    items  CsvDataitemcsv    A  \n     \n    with sessionmanager as session    B  \n         create the customers  \n        for customer in customersdatavalues    C  \n            sessionadd Customer    \n                namecustomergetname  \n                C  \n \n         create addresses  \n        for address in addressesdatavalues    D  \n            sessionaddAddress  \n                streetaddressgetstreet  \n                zipcodeaddressgetzipcode  \n                D  \n         create products  \n        for product in productsdatavalues    E  \n            sessionaddProduct  \n                nameproductg etname  \n                E  \n         commit these items  \n        sessioncommit    F  \n \n         build a map of orders  \n        ordersmap  strindex Order for index order in \nenumerateordersdatavalues start1    G  \n \n         build the orders and items  \n        for item in itemsdatavalues    H  \n             get the orderid and order associated with this item  \n            orderid  itemgetorderid    I  \n            order  ordersmapgetorderid    I  \n \n             get the c ustomer address and product associated with the item  \n            customerid  ordersdatagetorderidgetcustomerid    J  \n            customer  sessionqueryCustomerfilterCustomercustomerid  \ncustomeridoneornone    J  \n            addressid  ordersdatagetorderidgetaddressid    K  \n            address  sessionqueryAddressfilterAddressaddressid  \naddressidoneornone    K  \n \n            if ordercustomer is None    L  \n                ordercustomer  customer    L \n            if orderaddress is None    L  \n                orderaddress  address    L  \n \n             create an item with its many tomany associations  \n            productid  itemgetproductid    M  \n            product  sessionqueryProductfilterProductproductid  \nproductidoneornone    M  \n            newitem  Item  \n                qtyitemgetqty  \n                M \n            newitemproduct  product    M  \n225Manning Publications Co  To comment go to  liveBook              orderitemsappendnewitem    M  \n \n         add the populated orders to the session and database  \n        for order in ordersmapvalues    N  \n            sessionaddorder    N  \n        sessioncommit    N \nA Load all of the CSV files into variables that are rows of dictionaries  \nB Use a context manager to control when the objects are committed or not to the database  \nC Create Customer instances and add them to the database session  \nD Create Address i nstances and add them to the database session  \nE Create Product instance and add them to the database session  \nF Commit the session to the database assigning unique ids to all the objects in that session and persisting them in \nthe database  \nG Create an or ders map to help connect orders items customers and products together  \nH Iterate over the items  \nI Find the order the current item is related to  \nJ Find the customer to which the found order is related The second statement is an SQLAlchemy query to get  the \ncustomer instance  \nK Find the address to which the found order is related The second statement is an SQLAlchemy query to get the \naddress instance  \nL Assign the customer and address to the order only if they dont already exist  \nM Find the product ins tance to relate to the item assign it to the item and then append the item to the order  \nN Add all the initialized orders to the session and commit the session to the database persisting the orders and \nitems  \nThere is quite a lot going on in the code above The gist is to read the CSV files and use the \ndata to create instances of the corresponding SQLAlchemy models Then use the SQLAlchemy \nmaintained attributes to develop the relationships between the instances  \nCreating the customer address and product instances and then persisting them to the \ndatabase with the sessioncommit  statement generates the unique id Primary Key value \nfor each record The Primary Key values are used later to establish relationships  when creating \nthe orders and the items in those orders  \n1072  Using the Data  \nThe examples02mainpy  program demonstrates using the transactionsqlite  database \nto generate the invoice PDF files for all the orders  \n  \n226Manning Publications Co  To comment go to  liveBook  import os  \nimport csv  \nimport sqlite3  \nfrom pat hlib import Path  \nfrom jinja2 import Environment FileSystemLoader  \nfrom weasyprint import HTML  \nfrom models import loaddatabase Order sessionmanager    A  \n \n \ndef createinvoiceorder    B  \n    Create the PDF invoice for the order  \n \n    Args \n        info dict The info information to generate the invoice with  \n     \n    invoicefilename  finvoiceorderorderidpdf  \n \n     delete existing order invoice file if exists  \n    if ospathexistsinvoicefilename  \n        osremoveinvoicefilename  \n \n     set up Jinja2 to generate the HTML and then the PDF file  \n    path  Pathfileparent  \n    env  EnvironmentloaderFileSystemLoaderPathpath  \n    template  envgettemplateinvoicetemplatejinja  \n    htmlout  templaterenderorderorder    C  \n    HTMLstringhtmloutwritepdf  \n        invoicefilename  \n        stylesheets  \n            pagecss  \n            bootstrapcss  \n         \n     \n \n load the database  \nloaddatabase    D  \n \n generate a n invoice file for all the orders  \nwith sessionmanager as session    E  \n    for order in sessionqueryOrderall    E  \n        createinvoiceorder    E  \nA Import functionality from the modelspy module Notice only the SQLAlchemy Order definition  is used  \nB Pass a single Order instance to the createinvoice function  \nC Pass the single Order instance to the Jinja template as the context parameter  \nD Call the loaddatabase function defined in the modelspy module to populate the database  \nE With a d atabase session query the database for all orders iterate over them and pass the single instances to the \ncreateinvoice function  \nThe bulk of this program creates the invoice PDF files from the single SQLAlchemy Order \ninstance passed to it Because of the  relationships established by the models everything \nnecessary to print an invoice is connected to the Order  instance  \nThe Jinja template uses the order context parameter to fill in the dynamic parts of the \ntemplate  \n  \n227Manning Publications Co  To comment go to  liveBook  html langen  \n  head \n    titleInvoicetitle  \n  head \n  body \n    div classcontainer border border dark border 2 rounded 2 \n      div classcontainer border border dark mt3 mb3 \n        h3Invoiceh3  \n        Customer ordercustomernamebr     A  \n        Street orderaddressstreetbr     B  \n        Zip Code orderaddresszipcodebr     B  \n        Order Number orderorderidbr     C  \n      div \n      table classtable table striped table bordered caption top \n        caption  \n            Order Items  \n        caption  \n        thead \n          tr \n            thItem Numberth  \n            thProduct Nameth  \n            thQuantityth  \n          tr \n        thead  \n        tbody \n           for item in orderitems     D  \n          tr    D  \n            tdloopindex    D  \n            tditemproductname    D  \n            tditemqty    D  \n          tr    D  \n           endfor     D  \n        tbody  \n      table  \n    div \n  body \nhtml \nA Use the order instance customer attribute to get the customers name  \nB Use the order instance address attribute to get the address the order was shipped to  \nC Print out the orders unique id value  \nD Use the order  instance items collection to print out the item information in a table  \nCreating models for the tables with relationships between the tables SQLAlchemy provides \nattributes to access the data hierarchically rather than in a flat two dimensional way  \nThe mo dels and the object instances created from them let you think about the data in \nPythonic ways rather than manage relationships yourself and jump from list to dictionary and \nback  \nOur imaginary company and its simple data requirements allowed us to see h ow databases \ncan greatly enhance merely persisting data Adding relationships to the data structure the \nstorage of interrelated data is greatly simplified and functionality is improved  \n228Manning Publications Co  To comment go to  liveBook  108 Summary  \nThis chapter was a tangent to the main topic weve been develo ping namely the MyBlog \napplication However I hope you see the value of this introduction to working with RDBMS \nsystems and see how they will benefit the MyBlog work well be doing in later chapters  \nYouve learned about  \n Persisting data to files and th e limitations of doing so  \n Normalizing redundant data to multiple database tables  \n How SQLAlchemy can help you think about databases in a Pythonic way  \n OneToMany relationships and how to implement them  \n Many ToMany relationships and how to implement them  \n How a database can simplify not only the storage of data but how its used  \nYouve taken a microscopic view of database systems to gain knowledge what they do how \nthey do it and why theyre useful Database systems give you access to powerfu l functionality \nand using SQLAlchemy to interact with those systems lets you think about them in Pythonic \nways In addition using tools like SQLAlchemy helps you stay in the single Python domain \nrather than make mental context switches between SQL and Pyt hon domains Its certainly \npossible to work in the latter but its more productive to work in the former  \n  \n229Manning Publications Co  To comment go to  liveBook  1 1 \nIve Got Something to Say  \nThis chapter covers  \nCreating and modifying MyBlog content posts\nCreating and displaying content posts\nCreating and disp laying post comments\nNotifying users about posts and comments\nHandling errors\nAt long last  were  at the point of saying something and adding as content to the MyBlog \napplication Everything weve  done so far to build the MyBlog application has aimed at  creating  \nthe infrastructure  to provide posting content to the blog as a feature  \nYouve created a database to persist information the MyBlog application manages over \ntime In addition youve created users with roles so those users can register with and use the \napplication Youve also modularized the application using Flask Blueprints to help manage the \napps growing complexity  \nThat adds structure and control to the application to help you and your users create and \nmanage content added to the MyBlog applicat ion \nBecause naming things is hard we will establish a naming convention to help us think \nabout content Content is the engaging information a user writes and other users read and \nwrite comments about attached to the content Content has an author a crea tion timestamp \nan update timestamp and a title The author timestamps and title are all associated with the \ncontent and its metadata  \nWell gather this information together into something well call a post like on a bulletin \nboard where a user pos ts information they want others to read  \n230Manning Publications Co  To comment go to  liveBook  111 MyBlog Posts  \nA MyBlog Post object gathers the content and all the information associated with it in one \nplace The Post object is persisted in the database to be accessed searched and managed  \nBefore getting too far along the road of creating content I want to talk about one of the \nMyBlog design goals to present content The content presented by the MyBlog application is \nstored as plain text However that text can contain markdown syntax to enhance the \npresentat ion of the content  \nMarkdown is a way to include plain ASCII characters in text content used during \npresentation to render text in Bold or Italic include header sections in the visually rendered \ncontent and many other features  \nTo achieve this well be using the Flask PageDown module created by Miguel Grinberg \nThis module takes care of presenting MyBlog markdown content correctly It also provides \ntools to use markdown text and preview how it will be rendered interactively You can find \ninforma tion about Flask PageDown module here httpsblogmiguelgrinbergcompostflask \npagedown markdown editor extension forflaskwtf \nMiguel Grinberg is a software engineer who writes about Python and Flask on his blog  and publishes  books \nand modules useful to a Well Grounded Python Developer His work is well worth checking out  \n1111  Modeling the Database  \nThe Post object is another SQLAlchemy class defining  the structure of the post database table \nwhere the information is persisted Because users who register with the MyBlog application \ncan create multiple posts there are one tomany relationships between users and posts Here \nis the ERD Entity Relationshi p Diagram between the existing User and new Post tables  \n \nThe diagram shows the one tomany relationship between the user and post tables A user \ncan have many posts but a post is associated with only a single user  \n231Manning Publications Co  To comment go to  liveBook  The diagram shows the table structure  for the post table Next well create the SQLAlchemy \nmodel the MyBlog Python application uses to communicate with the database and the post \ntable  \nSQLA LCHEMY POST CLASS \nYoull create the Post class to model the post table as youve done for other models in the \nMyBlog application The Post class inherits from the dbModel class to give it SQLAlchemy \nfunctionality It also uses the getuuid  function to create UUID primary key values  \nHeres the Post class definition from examples01appmodelspy  \nclass PostdbModel  \n    tablename  post    A  \n    postuid  dbColumndbString primarykeyTrue defaultgetuuid    B  \n    useruid  dbColumndbString dbForeignKeyuseruseruid nullableFalse \nindexTrue    C  \n    title  dbColumndbStr ing \n    content  dbColumndbString  \n    active  dbColumndbBoolean nullableFalse defaultTrue  \n    created  dbColumndbDateTime nullableFalse defaultdatetimenowtztimezoneutc    \nD \n    updated  dbColumndbDateTime nullableFalse defaultdatetimenow  \n        tztimezoneutc onupdatedatetimenowtztimezoneutc    E  \nA Connect the model to the table named post as defined in the ERD diagram above  \nB Create the primary key for the table using the getuuid function  \nC Creat e the foreign key relationship to the user table and useruid value also index this column for faster querying  \nD Mark the created field so the database will automatically add a UTC timestamp when the record is created  \nE Mark the updated field so the dat abase will automaticall update the UTC timestamp when the record is updated  \nThe Post class creates a structure to manage the content user author title and audit \ninformation Because weve established a relationship between the Post class and the User \nclass we need to modify the User class to take advantage of this relationship  \nclass UserUserMixin dbModel  \n    tablename  user  \n    useruid  dbColumndbString primarykeyTrue defaultgetuuid  \n    roleuid  dbColumndbString dbForeignKeyroleroleuid indexTrue \nnullableFalse  \n    firstname  dbColumndbSt ring nullableFalse  \n    lastname  dbColumndbString nullableFalse  \n    email  dbColumndbString nullableFalse uniqueTrue indexTrue  \n    hashedpassword  dbColumnpassword dbString nullableFalse  \n    posts  dbrelationshipPost backrefdbbackrefuser lazyjoined    A  \n    active  dbColumndbBoolean nullableFalse defaultTrue  \n    confirmed  dbColumndbBoolean defaultFalse  \n    created  dbColumndbDateTime nullableFalse defaultdatetimenowtztimezoneutc  \n    updated  dbColumndbDateTime nullableFalse defaultdatetimenow  \n        tztimezoneutc onupdatedatetimenowtztimezoneutc  \nA The new posts attribute which is a relationship to the Post class  \nThe newly added posts  attribute of the User class creates an association between the User \nand Post class The posts  attribute doesnt exist in the user table it is created and managed \n232Manning Publications Co  To comment go to  liveBook  by SQLAlchemy The posts  attribute is created when instances of the User class are created \nin response to datab ase queries  \nThe use of posts  plural is intentional as the dbrelationship  definition connects the \nsingle user to the many possible posts The posts  attribute is a Python list containing zero or \nmore possible posts the user could have created  \nThe first  parameter of the dbrelationship  definition is Post It is a string because \nthe Post class is defined after the User class definition and the use of a string causes \nSQLAlchemy to resolve the relationship at run time It connects to the Post class usin g the \nuseruid attribute defined in the Post class as a ForeignKey  to the useruseruid  attribute \nof the user table  \nThe second parameter to dbrelationship  is backrefdbbackrefuser \nlazyjoined  This does two things  \n1 Creates an attribute named user on instances of Post classes that refers back to the \nparent user SQLAlchemy maintains the user attribute  \n2 Indicates the relationship between User and Posts  should be joined in the same \nselect statement so the posts as sociated with a user are available immediately rather \nthan requiring additional queries to retrieve them  \nWith the new Post and updated User class definitions youve got a way to persist content \nand retrieve it in a consistent structured way Now we need to build a system to create and \ndisplay that content  \n112 Change of Direction  \nBefore going too much further the remainder of this book changes its presentation pattern \nPrevious chapters included extensive or complete code samples because I felt they were helpful \nto see the new concepts implemented There are new concepts still to come but they also \ninclude blocks of boilerplate code that youve seen before  \nPresenting blocks of code in a book makes for dry reading and doesnt further the aims of \nthe chapt er which are to introduce new ideas and how to implement them So rather than \nlarge code sections well focus on what the code provides and refer to the specific code in the \nGitHub repository that accompanies this book  \n113 Content Blueprint  \nAt the beginning  of this chapter the benefits of having the infrastructure in place were \nmentioned Were going to take advantage of that infrastructure both cognitive because of \nwhat you know and actual because of the structure youve built for the MyBlog application  \nYoure going to build a Content  Blueprint to manage the MyBlog content In every way this \nis like the Auth Blueprint it isolates functionality into a separate module making it easier to \nthink and work in the context of the content domain Doing so puts in to practice the idea of \nthe separations of concerns  \nAs you did for the auth Blueprint youll add a new package directory named content under \nthe app package This directory has an initpy  file containing the following code  \n233Manning Publications Co  To comment go to  liveBook  from flask import Blueprint  \n \ncontentbp  Blueprint  \n    contentbp name  \n    staticfolderstatic  \n    staticurlpathcontentstatic  \n    templatefoldertemplates  \n \n \nfrom  import content  \nThe code above is conceptually identical to what youve done previously for th e \nauthinitpy  file It creates a Blueprint  instance called contentbp and configures it \nto have distinct static  and templates  folders It also imports a module called content  \ncontaining the hander for managing user content  \nNow that youve got a Blue print namespace for MyBlog content posts lets use it to present \nthe content  \n114 Displaying and Creating Posts  \nThe MyBlog application needs a Python handler to intercept and process calls to the content \nURL and display the content It also needs templates to  render the posts as HTML pages in the \nbrowser  \n1141  Display Handler  \nThe content handler needs to access other parts of the MyBlog application which it does by \nimporting the required modules and instances in the examples01appcontentcontentpy  \nmodule  \n The first handler in the content module is for the URL blogposts and it does two \nthings First if the URL is invoked with a query string where action is None it displays \nall the content posts in the MyBlog application  \n If the URL is invoked with a quer y string of actioncreate it presents a logged in user \nwith a web page form where post content is created and that content can be saved to \nthe database when the form is submitted  \nThe blogposts  handler is a simple dispatch function to two other func tions depending \non how the URL is invoked Both actions can be handled in a single function but that would \nhave been more complex and harder to follow The complexity and cognitive load are reduced \nby splitting the behavior into two functions  \nThe first dispatch function is blogpostsdisplay  responsible for rendering all the \nMyBlog blog posts to a browser page The blogpostsdisplay  function takes these steps \nto display the list of blog posts  \n  \n234Manning Publications Co  To comment go to  liveBook  1 Get the search string from the request  \n2 Begin a database session context manager  \na Get what page were currently on from the request  \nb Create a query to the database for content posts sorted in updated timestamp \ndescending order  \nc Conditionally add a filter to the query to control whether the user can see  only \nactive posts or all posts This allows users with editor or administrator \npermissions to see active and inactive posts  \nd Conditionally add a filter to the query to return only posts with the search term  \ne Get the relevant posts based on the query  \n3 Render  the lists of posts to the browser display  \n1142  Display Template  \nThe content handler is responsible for gathering the intended data  passed to the template  The \ntemplate examples01appcontenttemplatespostshtml   can then be rendered and sent \nto the browser  \nLike the templates in the auth Blueprint the content templates inherit from the system \nwide basehtml  template file and build the content block from there The template iterates \nover the list of posts if any passed by the content handler The template c ode formats a one \nhundred character snippet of the content and renders it as a Bootstrap card If you run the \nMyBlog application in examples01  and you have sample content in the database the system \nwill render a page something like this  \n235Manning Publications Co  To comment go to  liveBook   \nNotice the blog posts are displayed in most recent first ordering This is because the query \nsorts the results in descending order using the updated timestamp Since The Second Post \nwas created after This is the first post it comes first in the rendered display  \nSince there were only two posts in the database I used when this screenshot was captured \nthere is no need to paginate the display and only the single page link 1 is shown The \nrenderpagination  macro in the handler creates these page links The number  of blog \nposts to display per page is controlled by the configuration variable blogpostsperpage  in \nthe settingstoml  file \n115 Creating Posts  \nCreating a MyBlog content post requires a URL handler a form and template to present the \nuser with a means to ent er content and review it Once users are satisfied with what theyve \ncreated they can save it to the database  \n1151  Creation Handler  \nThe second function in the blogposts  dispatch handler is the \nblogpostscreate function which renders a form based page a r egistered user uses to \ncreate and save blog post content The blogpostscreate handler function follows these \nsteps to get the content from the form and save it to the database  \n  \n236Manning Publications Co  To comment go to  liveBook  1 Create an instance of the PostForm  form handling class  \n2 Check if the form Cancel button was clicked and redirect to the home page if it was  \n3 Validate the form if the Submit button was clicked and render the empty form if it \nwas not  \n4 If the form was submitted and it passes validation open a database session context \nmanage r \na Create an instance of the Post SQLAlchemy model class passing in the form \ncontent  \nb Add the Post instance to the database session  \nc Commit the session to the database  \nd Notify the user the post was created  \ne Redirect the user to the newly created post  \n1152  Creation Form  \nSince the post is created using a form the handler needs to have access to a class definition \nto manage that form The PostForm  class exists in the examples01appcontentformspy  \nfile \nThe PostForm class inherits from FlaskForm  just like the forms u sed in the auth Blueprint \nThe form to create post content has four elements  \n title   a StringField  to contain the title text  \n content   a PageDownField  to contain the text which can use Markdown syntax for \ndisplay when the content is rendered  \n postcreate   the SubmitField  that submits the form to the handler  \n cancel   another SubmitField  item that is intercepted by the handler to cancel any \nactions and return the user to the home screen  \nThe renderkw  parameter is added to all of the fields in the form The  renderkw  parameter \nis a dictionary that adds extra HTML attributes to the elements when they are rendered to the \nbrowser display  \nThe tabindex  key in the renderkw  dictionary controls the order the cursor will move from \nelement to element when the TAB or  ALTTAB keys are pressed on the keyboard  \nThe autofocus  key in the renderkw  dictionary controls which element has cursor focus \nwhen the form is rendered  \nThe tabindex  and autofocus  keys add useability features to the form to help the user \nreduce the numb er of clicks necessary to navigate and use the form  \n1153  Creation Template  \nThe post create template is connected to the PostForm  class through the post create handler \nThe handler uses the template file examples01appcontenttemplatespostcreatehtml \nto render the form and send it to the browser  The interactive markdown behavior of the form \nis handled by creating a form field of type PageDownField  and then rendering it on the page  \n237Manning Publications Co  To comment go to  liveBook  If you run the application from the examples01  directory login and navigate to create \na post youll be presented with this form  \n \nThe form has two text input fields Title and Content The bottom part of the screen \ninteractively represents how the text in the Content field will be rendered by the  browser Ive \nentered some text containing markdown for headers to show how the markdown is displayed \nby the Flask PageDown module  \n238Manning Publications Co  To comment go to  liveBook  As the user types in the Content input field the system will interactively update the lower \npart of the display to render t hat content This is very useful when creating markdown content \nand similar behavior is seen on sites like Stackoverflow and GitHub  \nNow that users can create MyBlog content lets give them a way to edit that content to \nupdate their posts  \n116 Displaying and Editing a Post  \nYouve developed infrastructure to display multiple posts and create a new post now you need \nto build systems to display and edit a single post  \n1161  Display Handler  \nIn the previous section you handled displaying multiple abbreviated posts to the browser \nYouve also provided the ability to create new posts Now we need to add support to display a \nsingle post If you look back at the template to render the list of MyBlog posts youll see each \npost is wrapped in an HTML hyperlink anchor tag a  that generates a \nblogpostspostuid  URL This link navigates the user to the single post using the \nunique postuid  value  \nLike the initial handler for multiple posts a single post is handled with a dispatch routine \nin anticipation of handling an H TTP GET request with or without a query string The \nblogpost  handler is another such dispatch function delegating to two other functions one \nto display a single post and another to edit a single post  \nThe first function is the blogpostdisplaypost uid which renders a single MyBlog post \nbased on the postuid  parameter passed in the link The function takes these steps to get the \npost content from the database and display it in the browser  \n1 Begin a database session context manager  \na Create the initial database query to get the post with the postuid  value The \nquery also performs a JOIN operation with the user table to get the user \ninformation related to the post  \nb Modify the query based on the user permissions to see all posts or only active \nones \nc Execut e the database query  \nd If no post was returned from the query abort with a NOT FOUND error  \n2 Render the post with the related single post template  \n1162  Display Template  \nThe blogpost  content handler gets the content post from the database using the postuid  \nvalue passed as a path parameter in the URL that invoked the dispatch function Next the \npost information is passed to the display template \nexamples01appcontenttemplatesposthtml  The template is responsible for rendering \nthe data sent to it as an HTML p age to display in the users browser  \n239Manning Publications Co  To comment go to  liveBook  Rendering a post in the browser as the user that created it presents a display something \nlike this  \n \nThe template conditionally renders the Active badge in the upper right corner of the page \nto indicate the activei nactive state of the post This is displayed for MyBlog administrators \nand editors as well as the author of the post In addition the template conditionally renders \nthe Update button anticipating navigating to the post editing system  \nThe Created and Updated fields displayed a timestamp when the posts author created and \nlast updated it Both timestamps are presented in the logged in users local time zone If you \nrecall all the models of the tables in the MyBlog database have created and updated  fields \nand those fields are automatically populated with a UTC timestamp So how is the system \npresenting local time zone timestamps when all it has access to are UTC timestamps  \nTake a look at the posthtml  template and youll see this code snippet  \nli classlist groupitem \n    Created  postcreated  formatdatetime  safe   \nli \nli classlist groupitem \n    Updated  postupdated  formatdatetime  safe   \nli \n240Manning Publications Co  To comment go to  liveBook  These few lines of code render the created  and updated  timestam ps as HTML unordered \nlist items Notice that timestamp data is piped into formatdatetime and then piped into \nsafe Previously the safe filter has been used in MyBlog templates but formatdatetime  is \nnew \nformatdatetime  is a filter function thats added  to the appinitpy  module  \napptemplatefilter  \ndef formatdatetimevalue formatY md HMS  \n    valuewithtimezone  valuereplacetzinfotimezoneutc  \n tz  pytztimezonesessiongettimezoneinfo gettimeZone USEastern  \n localnow  valuewithtimezoneastimezonetz  \n return localnowstrftimeformat  \nThe decorator adds the formatdatetime  function as a filter to the template engine \nmaking it available in the HTML template snippet shown above  \nBecause its part of a fi lter pipeline it accepts the value of whatever is before it in the \ntemplate pipeline as a parameter In this case a UTC timestamp It then uses timezoneinfo  \nfrom the users session to create a timestamp in the local time zone That local timestamp is \nthen formatted into a string and returned  \nThe timezoneinfo  data comes from the users session information How does it get there \nThe examples01appauthauthpy  modules login function has been modified to add \ntime zone information to the users session  When a user logs in this line of code adds the \ntime zone information to their session  \nsessiontimezoneinfo  jsonloadsformtimezoneinfodata  \nThe line of code above creates a dictionary of time zone information from a string stored \nin a form field called timezoneinfo  The timezoneinfo is a hidden field in the form \npopulated by a small JavaScript function in the loginjs file included in the lo gin template  \n function   \n    let timezoneinfo  documentgetElementByIdtimezoneinfo  \n timezoneinfovalue  JSONstringifyIntlDateTimeFormatresolvedOptions  \n \nThe self evaluating function above runs when the browser has rendered the te mplate It \nfinds the timezoneinfo hidden field element in the HTML page and populates it with the \nJSONstringify results of calling the function IntlDateTimeFormatresolvedOptions  \nIn the Chrome browser on my computer this generates the JavaScript o bject  \n \n    calendar gregory  \n    day numeric  \n    locale en US \n    month numeric  \n    numberingSystem latn  \n    timeZone AmericaNewYork  \n    year numeric  \n \n241Manning Publications Co  To comment go to  liveBook  The object above is useful information when presenting time and date information in a \nlocale context Its necessary to do this work in JavaScript because the functionality runs on \nthe users computer which could be anywhere in the world This makes the d ata returned \nrelevant to the user not the server where the MyBlog application could be running  \nThe formatdatetime  filter function uses the timeZone  field to determine how to create a \nlocal time zone value of the created  and updated  timestamps  \n1163  Update Ha ndler  \nIf a user decides to make changes to their blog content and clicks the Update button they \nare directed to the dispatch function with the query string  actionupdate  The dispatch \nfunction handles the request and calls the blogpostupdate  function The function follows \nthese steps to populate and present the page  \n1 blogpostupdate  is decorated with loginrequired  requiring  a user to be logged \nin to update a post  \n2 Begin a database context manager  \na Create a query to get the post based on the passed postuid  \nb Modify the query based on the users  role to get only active posts or all posts  \nc Execute the query and get the results  \nd Was no post found  Then a bort the request with NOT FOUND  \n3 Get the template form information and populate  the fields with the post values  \na Was the form cancel button clicked  Then r edirect the user to the home page  \nb Was the form submitted  and is it valid  Then u pdate the post returned by the \nquery with form data  save the updated post to the database  and r edirect the \nuser to the post display page to show the updates  \n4 Render the postupdate  template using the form and post returned by the query  \n1164  Update Form  \nThe data to update the post comes from the PostUpdateForm  in the contentformspy  \nmodule The form contains the field information used in the postupdatehtml  template to \nbuild and render the HTML page to the browser  \nThe form provides the title  content  postupdate  and cancel  fields visible when the \nform is rendered It also provides a hidden field called activestate  which holds the users \nselecte d active state The active state is controlled by the template conditionally rendering one \nof two other fields activate  and deactivate  The current user must be the author of the \ncontent or an MyBlog administrator for the activate  and deactivate  fields to  be displayed  \nDepending on the current active state of the post one or the other of these fields are \npresented to the user as buttons The form is submitted if the user clicks the button and the \nactive state value is toggled The activate  and deactivate  buttons represent mutually \nexclusive actions to take and only one is shown on the page at a time  \n242Manning Publications Co  To comment go to  liveBook  1165  Update Template  \nThe postupdatehtml  template is responsible for rendering the page to the browser where \nthe logged in user can modify the posts content T he template uses the form information and \ndata passed to it to render the update post display in the browser Depending on the current \nusers role they can toggle the active state of the post with the conditionally presented activate \nand deactivate button s The snippet of the template controlling this behavior is shown here  \n if cansetblogpostactivestatepost   \n     if postactive  True   \n     formdeactivateclassbtn btn danger me 2 \n  else   \n     formactivateclassbtn btn success me 2 \n  endif   \n endif   \nThe outer if statement calls the function cansetblogpostactivestate  which \nreturns True or False  if the currently logged in user can change the active state of the post \nThe user must be an administrator or t he posts author to do so  \nThe inner ifelse conditional determines which field to render deactivate or activate \ndepending on the current active state of the post  \nThis function cansetblogpostactivestate  exists in the contentpy  handler \nmodule as part of two functions are made available in the context of template processing  \ncontentbpcontextprocessor    A  \ndef utilityprocessor  \n    def canupdateblogpostpost    B  \n        if not currentuserisanonymous  \n            if currentuserrol epermissions  RolePermissionsADMINISTRATOR  \nRolePermissionsEDITOR  \n                return True  \n            if currentuseruseruid  postuseruseruid  \n                return True  \n        return False  \n \n    def cansetblogpostactivestatepost    C  \n        if currentuserisanonymous  \n            return False  \n        if currentuserrolepermissions  RolePermissionsADMINISTRATOR  \n            return True  \n        else \n            if currentuse ruseruid  postuseruseruid  \n                return True  \n        return False  \n \n    return dict    D  \n        canupdateblogpostcanupdateblogpost  \n        cansetblogpostactivestatecansetblogpostactivestate  \n     \nA Decorator to add t emplate context functionality to the content Blueprint  \nB Returns True if the currently logged in user is an Administrator or Editor otherwise returns False  \nC Returns True if the currently logged in user is an Administrator or the author of the post cont ent \nD Return the two functions to add to the template context  \n243Manning Publications Co  To comment go to  liveBook  117 Displaying and Creating Comments  \nOne of the MyBlog application goals is to make it a half duplex conversational tool I mean \nthat users can post content and comments can be created and connect ed to that content The \nhalfduplex aspect means the conversation goes one way at a time a user posts content and \nmultiple users can comment on that content after the posts appear  \nThis is different than a chat application where users create content other  users see and \nrespond to in real time  \n1171  Content to Comment Hierarchy  \nThe MyBlog  application can have many content posts Each post can have many comments \nassociated with it Each of those first level comments can have many comments associated \nwith it  The MyBlog application will limit comment nesting to two levels to keep things \nreasonable This hierarchical relationship looks like this  \n \nThe hierarchy above shows two content posts posts 0 and 1 Content post 0 has two level \n1 comments associated with it with the first comment having two level 2 comments and the \nsecond comment havi ng one level 2 comment Content post 1 has three level 1 comments \nwith only one having a level 2 comment  \nPost content can contain markdown syntax used at display rendering time but is otherwise \nstored in the database as text Comments on content wont support markdown when displayed \nbut are also stored as text Aside from the title field associated with content comments look \nvery much like content when storing them in the database  \nThis suggests a relationship between content and comments we can take a dvantage of in \nthe application Right now content is stored in the post table However it wouldnt be \nunreasonable to store level 1 and 2 comments in separate tables based on the above hierarchy  \n244Manning Publications Co  To comment go to  liveBook  By creating separate tables the post table could have a on etomany relationship to level \n1 comments and level 1 comments could have a one tomany relationship to level 2 \ncomments  \nThe three table database structure would work and provide the desired functionality \nHowever I think it has some drawbacks First content and comment posts are almost identical \nin structure They both have content related to the user who posted them and they have \ncreated and updated timestamps  \nThe primary difference between them being comments dont have a title The SQLite \ndatabas e engine doesnt allocate space in the database for text fields unless needed so not \nusing the title field doesnt cost anything in terms of disk space  \nThe second drawback is the arbitrary two level nesting limit of comments For MyBlog the \ntwolevel li mit helps keep examples in this chapter within reason In a publicly available \napplication the requirements could easily change to be three four or more levels of \ncomments  \nExtending support for more levels by using a table for each level means adding new tables \nwhere each new table essentially replicates its parent table  \nWe can overcome these drawbacks by being clever For example rather than having \ncontent level 1 and level 2 comments in separate nearly identical tables why not extend the \nexisti ng post table to support content and comment posts This is possible by adding a \nparentuid  field to the table In this way a row can be the parent of another row while \nsimultaneously being the child of some other parent row Expressing this idea as an ER D looks \nlike this  \n \nWeve created a self referential hierarchy by adding the parentuid  to the Post table and \nmaking it a foreign key to the postuid  of the same table Any row with a parentuid  equal \nto NULL is the root of a hierarchy and a content post  Any row with a non NULL parentuid  \nreferences another row in the table and is a child comment The parentuid  a child row \nreferences can be a content post or another comment post  \nEach row in the table can have a one tomany relationship to a list of chil d rows within the \nsame table The top level rows with no parent are content posts others are comments This \nstructure has no inherent limit on the depth of comment nesting the table can support With \n245Manning Publications Co  To comment go to  liveBook  this self referential structure the two level nesting constraint is a function of the application \nnot the database  \n1172  Modifying the Post Class  \nTo implement the ERD diagram of the post table above the Post class in the modelspy  \nmodule must be updated Youll see the changes in examples02appmodelspy  \nclass PostdbModel  \n    tablename  post  \n    postuid  dbColumndbString primarykeyTrue defaultgetuuid  \n    parentuid  dbColumndbString dbForeignKeypostpostuid defaultNone    A  \n    sortkey  dbColumndbInteger nullableFals e uniqueTrue \ndefaultgetnextsortkey    B  \n    useruid  dbColumndbString dbForeignKeyuseruseruid nullableFalse \nindexTrue  \n    title  dbColumndbString  \n    content  dbColumndbString  \n    children  dbrelationshipPost back refdbbackrefparent remotesidepostuid \nlazyjoined    C  \n    active  dbColumndbBoolean nullableFalse defaultTrue  \n    created  dbColumndbDateTime nullableFalse defaultdatetimenowtztimezoneutc  \n    updated  dbColumndbDateTime nullableFalse defaultdatetimenow  \n        tztimezoneutc onupdatedatetimenowtztimezoneutc  \nA Add the parentuid f oreign key to postuid of the post table  \nB Add the sortkey which is an auto incrementing value thats not a primary key  \nC Adds the children relationship creates the list of children associated with this post and adds parent to each \nchild referen cing the childs parent  \nThe parentuid  value creates the one tomany relationship between rows of the post table \nThe children  attribute doesnt exist in the database but is created by SQLAlchemy when a \nPost object is returned by a query adding a list of  children associated with the post It also \nadds a parent  attribute to child rows referencing their parent row  \nThe sortkey  attribute is used to keep the hierarchy in properly nested order when \ndisplaying a content post and its related comments The defau lt value of sortkey  is a custom \nPython function called when a new row is created  \ndef getnextsortkey  int \n    with dbsessionmanagersessioncloseFalse as dbsession  \n        retval  dbsessionqueryfuncifnullfuncmaxPostsortkey  1 0 scalar  \n        if retval is None  \n            raise RuntimeErrorFailed to get new value for sortkey  \n        return retval  \nThe getnextsortkey  function gets the current max sortkey value from the post \ntable adds 1 to it and returns that value  Having the function called as the default value of \nsortkey  creates an automatically incrementing unique sortkey  value for every row created \nin the post table This behavior emulates the databases autoincrement attribute on a primary \nkey field Unfortunately SQLite doesnt allow this behavior for non primary key fields which \nsortkey  is not The value is used when querying the table to render a post an d its hierarchy \nof comments shown in another section  \n246Manning Publications Co  To comment go to  liveBook  1173  Display Handler  \nComment posts are variations of content posts in the MyBlog application Because of this \ndisplaying creating and updating them are handled by modifying the existing handlers in \ncontentpy  Additional forms are added to get the user input to create comments These \nchanges are in the examples02app  directory  \nThe most significant change to the contentpy  module occurs in the blogpostdisplay  \nfunction Displaying a MyBlog content pos t requires rendering any comments associated with \nthe post in a meaningful hierarchical order Being clever with the structure of the post table \nand making it self referential means being clever with the query to get the post content and \nits comments  \nThe Content to Comment hierarchy diagram above indicates a tree like structure where \none root node a content post branches out to multiple comment post nodes This kind of \nstructure can be traversed using recursion  \nBecause the content and comment posts are  identical in definition each one can have zero \nor many children the same functionality can be applied to each The list of associated children \nis iterated over at each node and each child is descended into to use the functionality again  \nThe same funct ionality is applied again until a node with no children is reached at which \npoint the functionality ascends back to the childs parent and the next child is processed This \nprocess continues until the entire tree attached to the content root node has bee n traversed  \nTo create this kind of functionality with SQLAlchemy and ultimately in SQL well use \nCommon Table Expressions CTE with recursion A CTE is a temporary named result of a SQL \nquery used within the context of a larger enclosing query A re cursive CTE can traverse tree \nstructures like the self referential post table  \nThe blogpostdisplaypostuid  handler function has been simplified to  \ndef blogpostdisplaypostuid  \n    loggerdebugrendering blog post page  \n    form  PostCommentForm  \n    with dbsessionmanager as dbsession  \n        posts  buildpostshierarchydbsession postuid  \n        if posts is None  \n            flashfUnknown post uid postuid  \n            abortHTTPStatusNOTFOUND  \n        return rendertemplateposthtml formform postsposts  \nThis handler function is passed the postuid  value as a parameter from the URL that \ninvoked the handler and takes these steps  \n1 Get the form associated with the display for user comment input  \n2 Begin a database session context manager  \na Get the hierarchy of the posts  related to  the postuid value  \nb Did we get any return posts  if not abort the request  \nc Render the posthtml  template passing it the form  and posts data  \nGetting the hierarchy of the posts  results from calling the function \nbuildpostshierarchydbsession postuid  This function moves the relative \n247Manning Publications Co  To comment go to  liveBook  complexity of the recursive query out of the display function for clarity The leading  \ncharacter is just a convention to indicate the func tion is considered non public  \nThe buildpostshierarchy function does the heavy lifting to get the hierarchy of the \nposts from the database starting from the root node  parentuid  equals NULL and traverses \nthe tree recursively to get all comments  \ndef buildpostshierarchydbsession postuid  \n     build the list of filters here to use in the CTE  \n    filters      A  \n        Postpostuid  postuid    A  \n        Postparentuid  None    A  \n        A \n    if currentuserisanonymous or curren tusercanviewposts    B  \n        filtersappendPostactive  True    B  \n \n     build the recursive CTE query  \n    hierarchy      C  \n        dbsession    C  \n        queryPost Postsortkeylabelsortingkey    C  \n        filterfilters    C  \n        ctenamehierarchy recursiveTrue    C  \n        C \n    children  aliasedPost namec    D  \n    hierarchy  hierarchyunionall    E  \n        dbsession    E  \n        query    E  \n            children    E   \n                E \n                funccasthierarchycsortingkey String     E  \n                      E  \n                funccastchildrensortkey String    E  \n            labelsortingkey    E  \n             \n        filterchildrenparentuid  hierarchycpostuid    E  \n        E \n     query the hierarchy for the post and its comments  \n    return     F  \n        dbsession    F  \n        queryPost funccasthi erarchycsortingkey String    F  \n        selectentityfromhierarchy    F  \n        orderbyhierarchycsortingkey    F  \n        all    F  \n        F \nA Creates filters used to get the post matching the passed postuid and ensure its a root content node  \nB Adds a filter so only posts the user is allowed to view are returned by the query  \nC Begin creating the recursive common table expression CTE  \nD Create an alias to the Post class  \nE Complete the CTE  \nF Query the CTE for the hierachical posts  \nThis is the most complicated query in the MyBlog application and deserves an explanation The \nhierarchy  variable is set to the root node of the post based on  the postuid  value Its also \ndeclared as a recursive CTE Remember recursive behavior descends a tree with similar \noperations on similar objects That recursive behavior is provided by the hierarchy  query \n248Manning Publications Co  To comment go to  liveBook  instance having a unionall  operation applied to it This descends the tree by connecting \nparentuid  with postuid  values  \nNotice whats going on with the sortkey  value The sortkey  value is an auto \nincrementing integer in the database but the query is cast as a string and labele d \nsortingkey  Comparing two posts by their sortkey  values the post with the higher \nsortkey  value was inserted into the database after the post with the lower value This is \nbecause the sortkey  value auto increments so a new post inserted into the dat abase gets a \ngreater sortkey  value than any other previous post  \nThe sortingkey  value is an cumulative string of sortkey  values parent to child to child \nseparated by a space character The sortingkey  value provides the full path in descending \nchronolo gical order to each post returned by the query Because it is a string rather than a \nnumber it sorts appropriately to display the post contents and its comments in order  \nThe function returns the results of querying the recursive CTE and uses the sorting key \nto apply an orderby  clause  \n1174  Display Template  \nThe posthtml  template is modified to display the post content and its comments It has two \nphases the first renders the content much as before The second adds the hierarchy of related \ncomments indented  to indicate the hierarchy  \nSince a content post can have many comments the template iterates over the comment \nposts to render them to the HTML page The rendering operation is almost identical for each \ncomment so the functionality is in a macro called d uring each iteration of the comment loop \nThe indent level of each comment is determined by splitting the sortingkey  value of the post \non space characters and using the length of the returned array to calculate the indent level  \nThe template also provides  interface elements to create new comments and edit existing \nones This is done by using the Bootstrap modal functionality to open a window over the \ncurrent display to create and edit comments A macro function also provides the necessary \nmodal HTML  \nBoth the comment and modal macros are in a new file In addition in keeping with the \nBlueprint namespacing the template imports a content specific macro file \ncontentmacrosjinja  This file is located in the contenttemplates  folder  \nRunning the MyBlog ap plication in examples02  and navigating to a post that contains \ncontent and related comments renders a display like this  \n249Manning Publications Co  To comment go to  liveBook   \n118 Creating Comments  \nThe display above shows user interface elements to create comments on the content and \ncomment on an existing comme nt Both behaviors depend on creating a post that references \na parent post  \n1181  Creation Template  \nWere changing the order of the presentation to talk about the comment creation template first \nbecause it exists in the posthtml  template already Rather than na vigate away from the \ncurrently displayed post to create a comment MyBlog uses Bootstraps ability to create modal \nwindows  \n250Manning Publications Co  To comment go to  liveBook  Modal windows are subordinate to the main window but disable interaction and display as \na child window over the main window This is  useful in UI design to help keep the users \nreference context connected to the task at hand  \nBootstrap creates the HTML elements of a modal window in the HTML of the window the \nmodal will appear over The container element of the modal window is set to in visible when \nthe parent window is rendered and appears because of an action by the user  \nAt the end of the posthtml  template a call to a content macro is made  \n contentmacrosformcreatecommentmodal   \nThe file examples02appcontenttemplatecontent macrosjinja  contains the macro \ncode The macro inserts the HTML elements necessary to build the modal window into the \nrendered post display  \nEach of the comment buttons in the display activates the modal window mak ing it visible  \n251Manning Publications Co  To comment go to  liveBook   \nThe modal window presents a form with an HTML textarea to enter the comment It also \nhas a hidden field populated with the postuid  value of the parent post to which this comment \nrelates The hidden field was populated by the comment butt on when it was clicked The \nCreate button submits the form to be processed and the Cancel button closes the modal \nwindow  \nBecause the modal exists in the posthtml  template the form elements were available \nwhen the template was rendered  \n252Manning Publications Co  To comment go to  liveBook  1182  Creation For m \nThe form to handle creating a comment exists in the appcontentformspy  module This \nsimple form creates the hidden field for the parentpostuid  of the parent post the textarea \nfield for the comment and the create submit button  \n1183  Creation Handler  \nWhen  a user has entered comment text and clicked the Create button the form is submitted \nto the handler as an HTTP POST request to the URL  blogpostcreatecomment  \ncontentbppostblogpostcreatecomment  \ndef blogpostcreatecomment  \nform  PostC ommentForm  \nif formvalidateonsubmit  \n    with dbsessionmanager as dbsession  \n        post  Post  \n            useruidcurrentuseruseruid  \n            parentuidformparentpostuiddata  \n            contentformcommentdatastrip  \n         \n        dbsessionaddpost  \n        dbsessioncommit  \n        rootpost  postparent  \n        while rootpostparent is not None  \n            rootpost  rootpostparent  \n        flashComment created  \n        return redirecturlforcontentbpblogpost postuidrootpostpostuid  \nelse \n    flashNo comment to create  \nreturn redirecturlforintrobphome  \nThe handler is responsible for validating the submitted form and creating the new commen t \npost in the database The created post has a parentuid  value that comes from making this \na child of that post  \nAfter the comment post is committed to the database the while loop exists to iterate up \nthe hierarchy and get the root post The root post is used to redirect the user to the root post \nof the hierarchy where the newly created comment will be rendered and displayed  \n119 Notifying Users  \nAnother feature wed like to add to the MyBlog application is notifying users when someone \ntheyre following  creates a new content post A user who comments on a post is automatically \nadded as a follower of the post  \nImplementing followers creates a many tomany relationship between users and posts A \nuser can follow many posts and many users can follow a post  As was shown in Chapter 10 \na many tomany relationship uses an association table to connect two other tables The \nexamples03appmodelspy  module is modified to add the association table  \n  \n253Manning Publications Co  To comment go to  liveBook  userpost  dbTable  \nuserpost  \ndbColumnuseruid dbStr ing dbForeignKeyuseruseruid  \ndbColumnpostuid dbString dbForeignKeypostpostuid  \n \nInstead of a class to model the userpost  table its created as an instance of the Table  \nclass of SQLAlchemy The userpost  table has just two fields  a foreign key to the primary \nkey of each of the associated tables  \nThe user model class is also modified to add the many tomany relationship connection \nbetween it and the Post model  \npostsfollowed  dbrelationship  \n    Post  \n    secondaryuserpost   \n    backrefdbbackref  \n        usersfollowing  \n        lazydynamic  \n     \n \nThe userpostsfollowed  attribute doesnt exist in the database but is maintained by \nSQLAlchemy An instance of the User class returned from a query will have the \npostsfo llowed attribute as a list of Post instances  \nThe secondary  parameter connects a User instance with a Post instance through the \nuserpost  association table  \nThe backref parameter creates a usersfollowing  attribute in the Post class This also \nisnt in the database and is maintained by SQLAlchemy For a Post instance the attribute \nusersfollowing  is a list of User instances following the Post \nTo populate the userpost  association table and create the many tomany relationship  \nthe blogpostcreatecomment  handler function is modified with the addition of these lines \nof code  \nrootpost  postparent  \nwhile rootpostparent is not None  \nrootpost  rootpostparent  \nfollowrootpostdbsession rootpost  \nnotifyrootpostfollow ersdbsession rootpost  \nThe while loop to traverse upward in the post hierarchy was created in the previous \nexample to get the rootpost  value The two new functions followrootpost  and \nnotifyrootpostfollowers  use the rootpost  value  \ndef follo wrootpostdbsession rootpost  \nuser    \n    dbsessionqueryUser  \n    filterUseruseruid  currentuseruseruid  \n    oneornone  \n \nif user is not None and rootpost not in userpostsfollowed  \n    userpostsfollowedappendrootpost  \n254Manning Publications Co  To comment go to  liveBook  The followrootpost  function gets an instance of the current user  If the user is \nfound the rootpost is added to the postsfollowed list if the user isnt already following \nthat post  \ndef notifyrootpostfollowersdbsession rootpost  \nposturl  urlfor  \n    contentbpblogpost  \n    postuidrootpostpostuid  \n    externalTrue  \n \nfor userfollowing in rootpostusersfollowing  \n    to  userfollowingemail  \n    subject  A post yo ure following has been updated  \n    contents    \n        fHi userfollowingfirstname  \n        A blog post youre following has had a comment update added to it You can view  \n        that post here posturl  \n        Thank you  \n         \n     \n    sendmailtoto subjectsubject contentscontents  \nThe notifyrootpostfollowers  functi on first sets the posturl  variable to the URL \nof the newly created content post It then iterates over the list of users who follow the posts \nauthor Inside the loop it uses the emailer module created for authenticationauthorization to \nsend a short ema il containing the posturl  to the userfollowing  user \n1110  Handling Site Errors  \nSo far the MyBlog application has tried to handle errors and exceptions gracefully and redirect \nthe user to another place in the application Where exceptions have been raised and  caught in \ntryexcept blocks the exception handling has consisted of either logging the error or raising \nanother more specific one  \nFlask handles exceptions that bubble up by rendering very generic HTML to display the \nexception message This is great be cause the exception was handled and reported and didnt \ncrash the MyBlog application but its not a good user experience  \nA better solution is for the exception to be reported within the context of the MyBlog \napplication with the navigation bar present a nd a quick way to get back to another part of the \nexperience  \nFlask provides mechanisms to register error handling functions using the \nregistererrorhandler  method that is part of the app instance Looking at \nexamples04appinitpy  in the createapp  function youll see these lines of code  \n   appregistererrorhandler404 errorpage  \n   appregistererrorhandler500 errorpage  \nThese lines of code use the Flask app instance the createapp  function created to call \nthe registererrorhandler  method The first parameter to the call is the HTTP error code \nan error handler function is registered for and the second is the name of the handler function  \n255Manning Publications Co  To comment go to  liveBook  The method is called twice for a 404 Page Not Found error and once for a 500 Internal \nServer E rror error Any number of other standard HTTP errors can be handled in this way \nBoth calls register the same errorpage  function as the handler  \nThe errorpage  function is at the bottom of the initpy  module  \n   def errorpagee  \n    return rend ertemplateerrorhtml ee ecode  \nThis function is passed the exception that caused the error as a parameter Inside the \nfunction a new template  errorhtml  is rendered and passed the exception value The \nexception code value is used as the HTTP r eturn value for the page  \nThe examples04apptemplateserrorhtml  template file does a few simple things  \n extends basehtml   \n \n block title  ename  endblock   \n \n block content   \ndiv classerrorpage mx auto mt3 stylewidth 50  \n  div classcontainer  \n      div classcard text center  \n          h5 classcard header  \n               ecode    ename   \n          h5 \n          div classcard body \n              div classcard text \n                   edescription   \n              div \n          div \n      div \n  div \ndiv \n endblock   \nIn terms of user experience the most important thing is the template inheriting from \nbasehtml  This gives the page the style of the rest of  the MyBlog application and its \nnavigation bar In addition this lets users who find themselves on an error page a way to get \nback to some other more practical page  \nThe rest of the template styles the output of the exception code name and description as \na Bootstrap card  \nCROSS SITE SCRIPTING  \nAnother area of concern the code in examples04  makes a pass at handling are Cross Site \nScripting XSS injection attacks This kind of attack occurs when JavaScript is injected into a \nsite and later runs on anothe r users browser  \nBecause creating content and comments lets the user enter plain text that text could \ncontain embedded JavaScript code in this form  \n some benign content scriptmaliciousfunctionscript more plain content  \nThe text is then saved in the database If another user views the post containing this \nJavaScript their browser has no way of knowing the script could be dangerous and runs it  \n256Manning Publications Co  To comment go to  liveBook  To prevent this behavior a new module called Bleach is used to sanitize the user input text \nThe Blea ch module is part of the requirementstxt file for this chapter and is imported at the \ntop of the contentformspy  module The user entered text  is first filtered by the \ncontentformspy  module before being saved  \ndef removehtmlandscripttagsinputstr ing str  str \n    return bleachcleaninputstring if inputstring is not None else inputstring  \nThis function uses the bleachclean  method to sanitize the inputstring  parameter if it \nhas is not None otherwise it just returns inputstring  \nThe removehtmlandscripttags function is added to all of the form classes that \ncontain StringField  or PageDownField  elements As an example the PostForm  content  fields \nhas been updated to this  \ncontent  PageDownField  \n    Content  \n    validatorsDataRequired  \n    filtersremovehtmlandscripttags  \n    renderkwplaceholder   tabindex 2  \n \nThe filters parameter is passed a tuple the first element being the \nremovehtmlandscripttags  function When the form is sub mitted to the server the filter \nfunction will be executed before the form provides the data during calls like this in \nblogpostcreate  \ncontentformcontentdatastrip  \nIn this way any embedded HTML codescripts are disabled before the content is saved  to \nthe database  \n1111  Summary  \nThis chapter added the primary feature of the MyBlog application the ability to create edit \nand display content and comments Creating this feature stretched your abilities further  \n Youve used the users local time zone informa tion to present timestamps relevant to \nthem \n Youve used third party tools like Flask PageDown to add nice tohave features for a \nblog application  \n Youve used self referential hierarchies to model similar data structures  \n Youve used recursive CTEs to quer y hierarchical structures to present meaningful data  \n Youve used Bootstrap modals to good advantage  \n Youve added error handling at the application level  \n Youve added filtering to help mitigate XSS injection attacks  \nThis was a lot of ground to cover and ev en if it uses some patterns youve used before in \nother parts of the application it represents a significant milestone in developing your skill set  \n257Manning Publications Co  To comment go to  liveBook  By developing the MyBlog application youre not able to zoom out to the big picture of \nnecessary to build a larger application Youre also able to zoom in to see the detailed view \nneeded to implement the parts of a big application  \nThe MyBlog application is now complete as it has met the books stated goals As a teaching \ntool I hope it has served you well The application offers many avenues for addition \nmodification and improvement I also think its a good reference if you tackle developing \nanother web application  \nTo adapt an old clich Thats left as an exercise for the developer  \n  \n258Manning Publications Co  To comment go to  liveBook  1 2 \nAre We There Yet  \nThis chapter covers  \nDebugging\nTesting\nSource Control\nOptimization\nCloud Computing\nOS Environments\nDatabases\nNetworking\nLanguages\nContainers\nCollaboration\nAre we there yet  \nSo help me I will turn this book around  \nJoking aside having read this book gives you a great leap forward as a Python developer \nIf youve worked through the examples and built the MyBlog application youve created an \ninteresting application and managed t he complexity of doing so Youve pulled together tools \nand techniques from many software engineering domains to create a cohesive whole that \ndelivers useful functionality  \nWhats more youve followed good practices to manage the complexity of the applica tion \nHaving managed that complexity means the MyBlog application is maintainable over time and \ncan be expanded on without making the structure brittle  \nTo answer the question Are we there yet elicits the age old response well yes and \nno Lets ta lk about why the answer isnt definitive and how that can be an energizing and \nexciting challenge and an adventurous journey  \n259Manning Publications Co  To comment go to  liveBook  121 Testing  \nAn important aspect of creating software applications is testing them I purposefully havent \nincluded any discussion or examples of testing of the code presented in this book I did this \nfor a couple of reasons  \nFirstly writing test code often creates as much or more code than the application being \ntested This isnt a reason to avoid it but in the context of this book it would have layered \nanother technical domain of work over the examples and distracted from the educational intent \nof those examples  \nSecondly software testing is big subject and warrants its own book Including a subset of \nwhat software testing means wo uld have done the subject and you a disservice A great book \nabout testing in the Python world is Brian Okkens Python Testing with pytest  \nTesting software benefits from automation in every way Using testing tools and \nframeworks like pytest to automate tests provides consistency and early warnings if \nconditions change during development  \nAlso in most cases its better if people other tha n the developer of the application perform \nthe testing Its far too easy as a developer to unconsciously follow the happy path that \nproduces the desired results This is very different from what users of your software do They \nwill stress what youve de veloped with edge cases and unintended boundary conditions  \nThat being said there are many types of testing to consider that apply to the applications \nand code you develop  \n1211  Unit Testing  \nUnit testing is one of the cases where the developer of an applicat ion creates the tests A unit \ntest isolates a function or component and validates that it handles the inputs passed to the \nfunction and produces the expected outputs Besides testing that expected inputs produce \nexpected outputs the tests should exercise edge cases The tests should determine if the \nfunction handles unexpected inputs in an expected manner and if the output is an expected \nerror condition or exception  \nUnit tests should only test the function or component being tested and not dependencies \non external resources outside the test frameworks ability to control or predict Accessing a \ndatabase a network or some unpredictable timing operation can cause a test to fail because \nthe resource failed In those cases the external resource must be mo cked to make the test \nrepeatable  \nMocking an external resource means replacing the actual resource object with something \nthat simulates the behavior of the real object but in a repeatable dependable way  \n1212  Functional Testing  \nFunctional testing builds  on unit testing by examining the functionality of systems and sub \nsystems which are built on functions and components The purpose of the tests is to compare \nactual functionality of a system against the requirements of that system This draws on the \nspecification to guide the development of a system and its intended purpose  \n260Manning Publications Co  To comment go to  liveBook  1213  End To End Testing  \nEnd to end e2e testing determines if the workflows provided by an application behave as \nexpected from beginning to end Is a user able to start continue and comp lete the process the \napplication is intended to provide  \n1214  Integration Testing  \nIntegration testing is similar to End To End testing with the addition that a system is run on \nthe target hardware and in the environment where the application will be deployed  This isnt \nalways possible but steps should be taken to get as close to the target hardware and \nenvironment as reasonably practical  \n1215  Load Testing  \nLoad testing determines if an application running on its target hardware in its expected \nenvironment can ha ndle the workload its designed for Unit tests often use small subsets of \ncontrolled data to exercise functionality Load testing data sets can be much larger to simulate \nactual use case data handling expectations For multi user systems like web applica tions load \ntesting also tests whether a system can handle the number of simultaneous users expected to \naccess the system and remain responsive enough to meet their needs  \n1216  Performance Testing  \nPerformance testing determines if a system meets the performance  requirements which can \nbe expressed in terms of speed of processing handling specified number of multiple requests \nthroughput of data and other metrics  \nThis kind of testing is dependent on a clear understanding of what the performance metrics \nare how  they will be measured and that users and developers understand and agree on both  \n1217  Regression Testing  \nRegression testing helps developers discover if code modifications in a system breaks \nfunctionality adversely affects resource consumption or changes pe rformance characteristics \nRegression testing can automate examining and reporting on the results of End To End tests  \n1218  Accessibility Testing  \nAccessibility testing is very dependent on who the audience is for the software you develop If \nyou are creating  library code for users who are other developers accessibility issues might \nfocus on the developer experience  \nHowever if you are creating mobile or web applications that will be generally available to \nanyone you need to think about how users with disabi lities will access your application The \ndisabilities that can come into play can be vision and hearing impairment and other physical \nand cognitive issues  \n261Manning Publications Co  To comment go to  liveBook  1219  Acceptance Testing  \nAcceptance testing is focused on whether software or an application meets the requirements \nthat initiated creating it The requirements can be defined by yourself your colleagues your \ncompany or your customers These are the stakeholders who determine  if an application \nmeets the agreed upon requirements and is  acceptable to be considered complete  \nIts enticing to think a full complete and clear specification document is a necessity for \nacceptance testing In my experience for the average software p roject no such thing exists \nRequirements are often vague and open ended which can lead to wildly different assumptions \nand understanding between users and developers about what an application should do  \nMisunderstandings like this can cause the relation ship between the end user and the \ndeveloper to become adversarial Especially in situations when the developer accepts the \nrequirements and the user isnt involved in acceptance testing until the end of the project  \nHowever a different approach can often  create a better path towards acceptance with \nagreement all around Because requirements are insufficiently defined its better if the \ndeveloper involves the user in an iterative process As features are developed they are \ndemonstrated to the user and cour se corrections are made as whats provided and the \nrequirements are better understood by both parties  \nAn iterative development and acceptance testing practice can turn an adversarial \nrelationship into a more collaborative one The final acceptance testing  is more likely to be \nsuccessful because the project outcome has been participated in by both the user and \ndeveloper  \n122 Debugging  \nIf you typed in any of the examples modified them or have written programs of your own \nyouve run into bugs in the code  There are no perfect programs and bugs are part of a \ndevelopers life There are runtime errors like trying to divide by zero and there are logical \nerrors where the results of a program are not what you want or expect Growing as a developer \nincludes being a ble to find and fix problems in program code our own or others  \n1221  Reproducing Bugs  \nBefore diving in and reading thousands perhaps tens of thousands of lines of code its useful \nto determine if the bug can be reproduced Is there a series of steps you ca n take to cause the \nbug to occur reliably Is there a set of data you can feed to the program to cause the bug to \nappear  \nIts far more difficult to find and fix  a bug if you cant exercise the bug consistently This \ncan mean taking the time to write te st harness  code or unit tests to isolate the problem and \ninform you when the problem is resolved  \n1222  Breakpoints  \nUsing a debugger to set breakpoints as part of your toolset is very effective to find bugs in \napplications A breakpoint is a location in your application that you set that triggers an \napplication to stop running at that point and transfer control to the debugger  \n262Manning Publications Co  To comment go to  liveBook  When a debugger intercepts a breakpoint you can examine the state of the running \napplication at point in time You c an view variables evaluate statements and single step to \nthe next line of code to see what the results are  \nMany debuggers can set conditional breakpoints These are breakpoints that are only \ntriggered if certain conditions are true For example you can  reproduce a bug but only have \nthousands of iterations through a large data set A conditional breakpoint can be set to trigger \nonly when a counter is equal the number of iterations needed to reach the bug  \nExamining code at a breakpoint is a valuable too l to see whats occurring in an application \nat that snapshot of time  \n1223  Logging  \nBeing able to see the state of an application at a breakpoint is valuable but sometimes youll \nneed to see the history of events as well Logging events over the runtime of an a pplication \ngives you a view of the path through the c ode an application has taken  \nAdding a timestamp to those logging events also gives you a chronology of those events \nwhen they occurred and how much time transpired between them  \nYou can add print s tatements for this but Python provides a better tool for this the logging \nsystem The Python logger module adds a great deal of visibility to the inner workings of your \napplications  \nIf you add loggerdebug statements to your code you can log as much information as \nyou need to help debug an application Then when the application is deployed the \nloggerlevel can be set to INFO and the debug statements are ignored  \nIf at some time in the future another bug manifests itself the loggerlevel  can be set to  \nDEBUG  and your loggerdebug statements become active again to assist with finding and \nresolving a new bug  \n1224  Bad Results  \nIs the bug an application crash or bad results being produced In this case its very useful to \nuse a debugger standalone or built i nto an IDE to understand the state of the application at \nthe point the bug occurs or is about to occur  \nLooking for the computation that generated the bad results can mean moving back and \nforth in the call stack order of operations and function calls to observe the values that \ncontribute to the results A pad and pencil are useful to here to keep track of these intermediary \nvalues  \nIf the computations look right perhaps the data set being fed to the application contains \nbad data  \n1225  Process of Elim ination  \nOften the search for a bug is a process of elimination exercise constantly narrowing down the \ndomain where the bug lives to finally find it This process of elimination can be in the code or \nthe data Using debugger breakpoints or logging statemen ts can help narrow the domain in \nthe code  \n263Manning Publications Co  To comment go to  liveBook  If you suspect the input data set is the source of the problem use a divide and conquer \napproach to narrow in on the problem data Cut the data in half and feed one half at a time to \nthe application Continue to repeat this process with the half that exhibited the problem until \nyou find the values that are triggering the bad results of the bug Even with huge datasets \nthis process takes relatively few iterations  \n1226  Talk About the Problem  \nPerhaps the simplest a nd sometimes most effective path to a solution is to talk about the \nproblem with a friend or colleague The act of putting your thoughts into words that clarify the \nproblem for your audience presents the solution or a path to the solution to you  \n123 Source  Control  \nThe example code accompanying this book resides in a Git repository hosted on GitHub Git is \none tool used for source code of the files necessary to create applications Repository tools \nhelp manage the history of a projects development and the d ocumentation of that history  \nIf youre working as the sole developer of an application  its still well worth learning how \nto use a source code management tool Being able to review and restore the history of your \nwork can be invaluable while working on a  complex application over time  \nIf youre part of a team working on an application source control is a necessity to help \nmanage and prevent collisions while more than one person works on the same section of code  \nLastly using a hosted solution like GitHub  offers a stable and convenient backup solution \nover and above any backup system you maintain locally You do backup up your hard disk \ndont you  \n124 Optimization  \nWhen I first was writing software I was having daydreams about creating game s with moving \nimages that reacted to the players input At that time computers were 8 bit systems with \nsome 16 bit functionality very limited memory and CPUs that ran in the single digit Megahertz \nrange  \nWith those goals under those conditions optimizing code for p erformance was a necessity \nIt was also a lot of fun figuring out how to pull a little more speed out of a system using only \ncode  \nThe lure of optimization is a siren song drawing in many a developer Software runs \nexceptionally fast on modern computers an d thinking about how you can make an application \nrun faster by different implementations data structures caching and a host of other \ntechniques is tempting  \nThe first thing to consider about optimizing of an application is the performance target A \ngeneral statement of make it faster is not a clear requirement Any reasonably complex \napplication provides many features which of those features is important to make faster and \nby how much  \nThat brings us to the second thing to consider measuring the per formance of an \napplication Its important to measure the current baseline performance to establish if changes \nin the application improve the desired performance at all  \n264Manning Publications Co  To comment go to  liveBook  While thinking about optimizing an application its useful to keep the 9010 rule in m ind \nAs a rule of thumb many applications spend 90 percent of their time in 10 percent of the code \nIf you embark on an optimization journey the above rule implies that you spend 90 percent of \nyour development time working on the 10 percent of code where the application spends the \nbulk of its time  \nKeep in mind something I brought up in Chapter 1 optimizing your time as a developer \nReaching a fast enough state of an application that delivers on the intended features now is \noften more desirable than a m arginally faster application later Remember the adage shipping \nis a feature  \nLastly an applications performance can be enormously improved by running it on a faster \ncomputer on a network with more bandwidth using a database with more capacity and other \ndependencies outside of the application These kinds of changes are often much less expensive \nin terms of developer time  \n125 OS Environments  \nMany of the applications running in the world are hosted on either Windows Linux or Mac \ncomputers As a develo per the computer you work on will also most likely be a Windows Linux \nor Mac system You can spend a career working in a single development and deployed \nenvironment but doing so might shrink the domain of the kinds of applications you can write  \nProgram ming in Python allows you to create applications that are unaware of the Operating \nSystem most of the time Its that last part most of the time that worth keeping in mind  \nBecoming familiar with developing for other operating systems is valuable because it puts \nanother tool in your hands to reach a wider audience With the growing adoption of cloud \ncomputing and the use of containers for applications developing on one platform and targeting \nanother for deployment is common  \n126 Cloud Computi ng \nCloud computing systems allows computing resources to be located elsewhere and accessed \nsecurely through the Internet Besides moving the responsibility of running and maintaining \ncomputing hardware to a service it gives developers the ability to size the computing resources \ncapabilities appropriately for user requirements The size and capabilities of the resource can \nalso be changed dynamically up or down depending on the workload on the system  \nApplications rarely run in isolation and have dependenci es on networks file storage load \nbalancers databases and more These dependencies are also available from cloud service \nproviders and can be scaled to meet the needs of an entire integrated system  \nApplications can run independently in a cloud providers  compute instance  but its becoming \nmore common for an application to exist in a container  \n127 Containers  \nA container provides an environment configured by the developer for an application to run in \nIn this way an application in a container can run on an y compute resource that can host the \n265Manning Publications Co  To comment go to  liveBook  container No matter what host the container runs on the application in the container always \ninteracts with the same environment  \nThe application in the container runs on a what is commonly called a guest operating \nsystem The guest operating system is a subset of a full operating system and is much \nsmaller than a traditional Virtual Machine VM  \nThe application in the container makes calls to the guest OS for services and the guest OS \nin turn makes calls to the  host OS for services of the compute resource it resides on  \nApplications can also be developed directly in containers running on your development \ncomputer which acts as the host for the container This has the advantage of developing the \napplication in t he same environment the container as it will be deployed with  \n128 Databases  \nThe MyBlog application uses an SQLite database to persist the content and relationships \ncreated by users of the application RDBMS are often much larger and more complex than wha t \nweve created here with many more tables containing millions of rows of data  \nIts been my experience to work with existing databases far more than Ive created them \nAs a developer its useful to learn more about database structures tools and techniq ues to \nexpand the features of a database and maintain its performance  \nThe databases presented in this book have done some of that by eliminating redundant \ndata and taking advantage of the relationships possible in an RDBMS Its also important to \nlearn wh en redundant data is acceptable to improve query performance for an application  \nThere are also database systems that are document based rather than table based These \nare sometimes called NoSQL databases  as they sometimes dont provide SQL access to the \ndata Instead the data is accessed by making function calls against the database interface and \npassing parameters  \nThe NoSQL document oriented databases often store information in JavaScript Object \nNotat ion JSON structures Instead of table structures with strict data typing the stored JSON \ndata can by dynamically changed at will  \nBoth database approaches have advantages and disadvantages and it falls to the \ndeveloper to determine which would serve th e needs of an application best A NoSQL database \ncan be faster to retrieve data for certain kinds of applications An RDBMS database can offer \nmore structure and consistency to the data  \nAn additional wrinkle when considering either type of database is tha t both are acquiring \nmore and more features of the other Modern RDBMS databases offer the ability to store JSON \ndata as a column within tables and functions to interact with the data contained by JSON \ndocuments By the same token NoSQL databases are off ering SQL interfaces that allow more \ntraditional queries to access the managed data  \n129 Languages  \nThis is a Python book and Python is a powerful general purpose language that I feel is the right \nchoice for many technical domains that can benefit from computer  applications That doesnt \nmean Python is the only or even the best choice in every situation  \n266Manning Publications Co  To comment go to  liveBook  One of the goals of this book is to give you a well stocked toolbelt when constructing a \nPython application Sometimes however the problem at hand would benef it from another \ntoolbelt entirely Learning and knowing other programming languages will benefit a well \ngrounded developer in many ways over the course of a career  \nFor example JavaScript is essentially the standard language when working in a web \nbrowser  Its superset TypeScript is also gaining traction not only in the browser but as a \nserver side language  \nJava Rust Go Kotlin and many others all have wide application and acceptance as tools \nused in many programming domains Many of those domains o verlap and it can come down to \nwhat language is most appealing and comfortable to a software developer  \nOver the course of my own career Ive worked in Fortran Pascal CC Visual Basic PHP \nJavaScript TypeScript and of course Python Some of them Id  gladly work in again some Id \nrather not but they all served me and my career well at the time  \nStaying current is an interesting and challenging part of being a developer Spending time \nto learn new technology should benefit you and your life spend it wisely  \n1210  Networking  \nThe world is a very connected place and getting more so all the time Connections and what \nthey bring to conversations and the choices we make have changed the fabric of society in \nextraordinary ways  \nA software application work ing in isolation would be a rare exception as almost all \nsignificant applications run and depend on environments connected to a network and often \nbeyond to the Internet  \nWhile working on the MyBlog application getting the server running and accessing it  with \na local browser it can be easy to forget that its a networked application Theres no reason \nthe application couldnt run on a server located somewhere in the world and be accessed by a \nweb browser somewhere else in the world over the Internet  \nWriting applications for computer systems connected to networks means your application \ncan provide information and resources to other systems as well as consume information and \nresources provided by other systems on the network  \nAll modern languages provide tools and libraries to interface with networks and \ncommunicate across them The MyBlog application uses the HTTP protocol to connect the \nserver to the browser is one example of this  \nLearning how to use and develop networked applications can increase the p ower and \nfeature sets of your applications by orders of magnitude  \n1211  Collaboration  \nBuilding relationships is an important aspect of being a well grounded developer Certainly \ncreating and maintaining relationships in a database is vital but building and ma intaining \nrelationships with the people in your life is far more important  \nEven as the sole developer on a personal project youll be reaching out to ask questions on \nsites blogs user groups and of colleagues and friends seeking help with challenges yo ull run \ninto Remember the idiom that good developers are lazy That doesnt mean well grounded \n267Manning Publications Co  To comment go to  liveBook  developers are slow to get things done it means we take advantage of already existing \nsolutions to problems to implement things faster  \nBeing part of a com munity is a two way street We should listen more than talk strive to \noffer more help than we ask for and work hard to build and maintain relationships so were the \nkind of people others want and seek out in a community  \nBeing part of a diverse community of developers means being exposed to many different \nways of thinking and perspectives on challenges In my experience that exposure presents \napproaches ideas and solutions that my pattern of thinking wouldnt have arrived at on its \nown \nCollaboration is a  multiplier Connecting and sharing with people multiples your talents and \nabilities as a developer manyfold  \n1212  Summary  \nYouve come a long way on your journey as a well grounded Python developer From the early \nchapters seeing through a telescope to the huge  field of view of many possible destinations \nto the many small details of a fully realized and focused application  \nThat is a characteristic of being a software developer thats almost unique from any other \nengineering endeavor The domains we can work in  span the macroscopic view of the \nunfathomably huge to the microscopic details of the unimaginably small  \nIve been developing software for nearly forty years and accept completely there are still \nso many things I dont know but want to learn That desire to learn and the fortunate ability \nto do so has been key  \nMy goals for this book were to help guide you along a path that leads to being a well \ngrounded developer Having arrived the answer to the question are we there yet is happily \nno You are at a way station that branches to many paths and you have the ability to follow \nany of them My hopes for you are that you find the journeys ahead as enlightening enjoyable \nand just plain as much fun as possible  \n268"
}
